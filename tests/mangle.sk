namespace Skew.Tests {
  def testMangle {

# Test associative operator rotation
test("
@export
def foo {
  dynamic.test(dynamic.a + (dynamic.b + dynamic.c))
  dynamic.test(dynamic.a - (dynamic.b - dynamic.c))
  dynamic.test(dynamic.a * (dynamic.b * dynamic.c))
  dynamic.test(dynamic.a / (dynamic.b / dynamic.c))
  dynamic.test(dynamic.a & (dynamic.b & dynamic.c))
  dynamic.test(dynamic.a | (dynamic.b | dynamic.c))
  dynamic.test(dynamic.a ^ (dynamic.b ^ dynamic.c))
  dynamic.test(dynamic.a && (dynamic.b && dynamic.c))
  dynamic.test(dynamic.a || (dynamic.b || dynamic.c))
}

@export
def bar {
  dynamic.test(dynamic.a & ((dynamic.b | dynamic.c) & (dynamic.d & (dynamic.e & dynamic.f))))
}
", "
(function() {
  foo = function() {
    test(a + (b + c)), test(a - (b - c)), test(a * (b * c)), test(a / (b / c)), test(a & b & c), test(a | b | c), test(a ^ b ^ c), test(a && b && c), test(a || b || c);
  };

  bar = function() {
    test(a & (b | c) & d & e & f);
  };
})();
").jsMangle

# Test if statement folding
test("
@export
def main {
  if dynamic.a() {}
  if dynamic.b() { dynamic.c() }
  if dynamic.d() {}
  else { dynamic.e() }
  if dynamic.f() { dynamic.g() }
  else { dynamic.h() }
}
", "
(function() {
  main = function() {
    a(), b() && c(), d() || e(), f() ? g() : h();
  };
})();
").jsMangle.foldAllConstants

# Test if statement return folding
test("
@export
def foo bool {
  if dynamic.a { return true }
  if dynamic.b && dynamic.c { return true }
  if dynamic.d { return true }
  if dynamic.e && dynamic.f { return true }
  return false
}

@export
def bar bool {
  if dynamic.a { return true }
  else if dynamic.b && dynamic.c { return true }
  else if dynamic.d { return true }
  else if dynamic.e && dynamic.f { return true }
  else { return false }
}

@export
def baz bool {
  if dynamic.a || dynamic.b {
    if dynamic.c || dynamic.d {
      return true
    }
  }
  return false
}
", "
(function() {
  foo = function() {
    return a || b && c || d || e && f ? !0 : !1;
  };

  bar = function() {
    return a || b && c || d || e && f ? !0 : !1;
  };

  baz = function() {
    return (a || b) && (c || d) ? !0 : !1;
  };
})();
").jsMangle

# More tests for if statement return folding
test("
@export
def foo(x dynamic) dynamic {
  x.foo(1)
  if x.y {
    x.foo(2)
    if x.y {
      x.foo(0)
      return x
    }
  }
  x.foo(3)
  if x.y {
    x.foo(4)
    if x.y {
      x.foo(0)
      return x
    }
  }
}

@export
def bar(x double) int {
  if x < 0 { return 0 }
  if x > 1 { return 1 }
  return 2
}
", "
(function() {
  foo = function(a) {
    if ((a.foo(1), a.y && (a.foo(2), a.y)) || (a.foo(3), a.y && (a.foo(4), a.y))) {
      return a.foo(0), a;
    }
  };

  bar = function(a) {
    return a < 0 ? 0 : a > 1 ? 1 : 2;
  };
})();
").jsMangle

# Test integer comparison special cases
test("
@export
def foo(bar int, baz fn()) {
  if bar < 1 { baz() }
  if bar <= 1 { baz() }
  if bar > 1 { baz() }
  if bar >= 1 { baz() }
  if bar == 1 { baz() }
  if bar != 1 { baz() }
}

@export
def bar(foo int, baz fn()) {
  if 1 < foo { baz() }
  if 1 <= foo { baz() }
  if 1 > foo { baz() }
  if 1 >= foo { baz() }
  if 1 == foo { baz() }
  if 1 != foo { baz() }
}
", "
(function() {
  foo = function(a, b) {
    a < 1 && b(), a < 2 && b(), a > 1 && b(), a > 0 && b(), a ^ 1 || b(), a ^ 1 && b();
  };

  bar = function(a, b) {
    1 < a && b(), 0 < a && b(), 1 > a && b(), 2 > a && b(), 1 ^ a || b(), 1 ^ a && b();
  };
})();
").jsMangle

# Test enum comparison special cases
test("
@export
def foo(bar int, baz fn()) {
  if bar as int < Foo.BAR as int { baz() }
  if bar as int <= Foo.BAR as int { baz() }
  if bar as int > Foo.BAR as int { baz() }
  if bar as int >= Foo.BAR as int { baz() }
  if bar == Foo.FOO { baz() }
  if bar != Foo.FOO { baz() }
  if bar == Foo.BAR { baz() }
  if bar != Foo.BAR { baz() }
}

@export
def bar(foo int, baz fn()) {
  if Foo.BAR as int < foo as int { baz() }
  if Foo.BAR as int <= foo as int { baz() }
  if Foo.BAR as int > foo as int { baz() }
  if Foo.BAR as int >= foo as int { baz() }
  if Foo.FOO == foo { baz() }
  if Foo.FOO != foo { baz() }
  if Foo.BAR == foo { baz() }
  if Foo.BAR != foo { baz() }
}

enum Foo {
  FOO
  BAR
}
", "
(function() {
  foo = function(a, b) {
    a < 1 && b(), a < 2 && b(), a > 1 && b(), a > 0 && b(), a || b(), a && b(), a ^ 1 || b(), a ^ 1 && b();
  };

  bar = function(a, b) {
    1 < a && b(), 0 < a && b(), 1 > a && b(), 2 > a && b(), a || b(), a && b(), 1 ^ a || b(), 1 ^ a && b();
  };
})();
").jsMangle.foldAllConstants

# Doubles should not trigger integer comparison special cases
test("
@export
def foo(bar double, baz fn()) {
  if bar < 1 { baz() }
  if bar <= 1 { baz() }
  if bar > 1 { baz() }
  if bar >= 1 { baz() }
  if bar == 1 { baz() }
  if bar != 1 { baz() }
}

@export
def bar(foo double, baz fn()) {
  if 1 < foo { baz() }
  if 1 <= foo { baz() }
  if 1 > foo { baz() }
  if 1 >= foo { baz() }
  if 1 == foo { baz() }
  if 1 != foo { baz() }
}
", "
(function() {
  foo = function(a, b) {
    a < 1 && b(), a <= 1 && b(), a > 1 && b(), a >= 1 && b(), a === 1 && b(), a !== 1 && b();
  };

  bar = function(a, b) {
    1 < a && b(), 1 <= a && b(), 1 > a && b(), 1 >= a && b(), 1 === a && b(), 1 !== a && b();
  };
})();
").jsMangle

# Test a special case for comparison with -1
test("
@export
def main(foo string) {
  if \"foo\" in foo { dynamic.bar() }
}
", "
(function() {
  main = function(a) {
    ~a.indexOf('foo') && bar();
  };
})();
").jsMangle.inlineAllFunctions.foldAllConstants

# Test index to member conversions
test("
@export
def foo(map StringMap<int>) {
  dynamic.test(map[\"x\"])
  dynamic.test(map[\"_\"])
  dynamic.test(map[\"0\"])
  dynamic.test(map[\"x0\"])
  dynamic.test(map[\"if\"])
}

@export
def bar(map StringMap<int>) {
  map[\"x\"] = dynamic.test()
  map[\"_\"] = dynamic.test()
  map[\"0\"] = dynamic.test()
  map[\"x0\"] = dynamic.test()
  map[\"if\"] = dynamic.test()
}
", "
(function() {
  foo = function(a) {
    test(a.x), test(a._), test(a['0']), test(a.x0), test(a['if']);
  };

  bar = function(a) {
    a.x = test(), a._ = test(), a['0'] = test(), a.x0 = test(), a['if'] = test();
  };
})();
").jsMangle.inlineAllFunctions.foldAllConstants

# Test dead code elimination with constants
test("
enum Foo {
  FOO
  BAR
  BAZ
}

const foo = Foo.BAZ

@export
def bar {
  if foo == .FOO { dynamic.test(\"FOO\") }
  else if foo == .BAR { dynamic.test(\"BAR\") }
  else if foo == .BAZ { dynamic.test(\"BAZ\") }
  else { dynamic.test(\"FAIL\") }
}
", "
(function() {
  bar = function() {
    test('BAZ');
  };
})();
").jsMangle.foldAllConstants

# Test return statement collapsing
test("
@export
def foo {
  if dynamic.x {
    dynamic.y()
    return
  }
}
", "
(function() {
  foo = function() {
    if (x) {
      y();
    }
  };
})();
").jsMangle

# Test return statement collapsing
test("
@export
def foo {
  if dynamic.x { return }
  dynamic.y()
  dynamic.y()
}
", "
(function() {
  foo = function() {
    x || (y(), y());
  };
})();
").jsMangle

# Test return statement collapsing
test("
@export
def foo {
  if dynamic.x { return }
  dynamic.y()
  if dynamic.x { return }
  dynamic.y()
}
", "
(function() {
  foo = function() {
    x || (y(), x || y());
  };
})();
").jsMangle

# Test return statement collapsing
test("
@export
def foo {
  if dynamic.x {
    if dynamic.y { return }
    dynamic.z()
    dynamic.z()
  }
}
", "
(function() {
  foo = function() {
    x && (y || (z(), z()));
  };
})();
").jsMangle

# Test return statement collapsing
test("
@export
def foo {
  if dynamic.x {
    if dynamic.y { return }
    dynamic.z()
    dynamic.z()
  }
  dynamic.z()
}
", "
(function() {
  foo = function() {
    if (x) {
      if (y) {
        return;
      }

      z(), z();
    }

    z();
  };
})();
").jsMangle

# Test return statement collapsing
test("
@export
def foo {
  while dynamic.x {
    if dynamic.y { return }
    dynamic.z()
    dynamic.z()
  }
}
", "
(function() {
  foo = function() {
    for (; x; ) {
      if (y) {
        return;
      }

      z(), z();
    }
  };
})();
").jsMangle

# Test return statement collapsing
test("
@export
def foo {
  dynamic.a()
  dynamic.b()
  if dynamic.c() {
    if dynamic.d() { return }
    dynamic.e()
    dynamic.f()
  }
}

@export
def bar {
  dynamic.a()
  dynamic.b()
  if dynamic.c() {
    if dynamic.d() { return }
    dynamic.e()
    dynamic.f()
  }
  dynamic.g()
}
", "
(function() {
  foo = function() {
    a(), b(), c() && (d() || (e(), f()));
  };

  bar = function() {
    if (a(), b(), c()) {
      if (d()) {
        return;
      }

      e(), f();
    }

    g();
  };
})();
").jsMangle

# Test continue statement collapsing
test("
@export
def foo {
  while dynamic.x {
    if dynamic.y {
      dynamic.z()
      continue
    }
  }
}
", "
(function() {
  foo = function() {
    for (; x; ) {
      if (y) {
        z();
      }
    }
  };
})();
").jsMangle

# Test continue statement collapsing
test("
@export
def foo {
  while dynamic.x {
    if dynamic.y { continue }
    dynamic.z()
    dynamic.z()
  }
}
", "
(function() {
  foo = function() {
    for (; x; ) {
      y || (z(), z());
    }
  };
})();
").jsMangle

# Test continue statement collapsing
test("
@export
def foo {
  while dynamic.x {
    if dynamic.y { continue }
    dynamic.z()
    if dynamic.y { continue }
    dynamic.z()
  }
}
", "
(function() {
  foo = function() {
    for (; x; ) {
      y || (z(), y || z());
    }
  };
})();
").jsMangle

# Test continue statement collapsing
test("
@export
def foo {
  while dynamic.x {
    if dynamic.y {
      dynamic.z()
      if dynamic.y { continue }
      dynamic.z()
      dynamic.z()
    }
  }
}
", "
(function() {
  foo = function() {
    for (; x; ) {
      y && (z(), y || (z(), z()));
    }
  };
})();
").jsMangle

# Test continue statement collapsing
test("
@export
def foo {
  while dynamic.x {
    if dynamic.y {
      dynamic.z()
      if dynamic.y { continue }
      dynamic.z()
      dynamic.z()
    }
    dynamic.z()
  }
}
", "
(function() {
  foo = function() {
    for (; x; ) {
      if (y) {
        if (z(), y) {
          continue;
        }

        z(), z();
      }

      z();
    }
  };
})();
").jsMangle

# Test continue statement collapsing
test("
@export
def foo {
  while dynamic.x {
    if dynamic.y {
      dynamic.z()
      continue
    }
    dynamic.z()
    dynamic.z()
  }
}
", "
(function() {
  foo = function() {
    for (; x; ) {
      y ? z() : (z(), z());
    }
  };
})();
").jsMangle

# Test continue statement collapsing
test("
@export
def foo {
  while dynamic.x {
    dynamic.a()
    dynamic.b()
    if dynamic.c() {
      if dynamic.d() { continue }
      dynamic.e()
      dynamic.f()
    }
  }
}

@export
def bar {
  while dynamic.x {
    dynamic.a()
    dynamic.b()
    if dynamic.c() {
      if dynamic.d() { continue }
      dynamic.e()
      dynamic.f()
    }
    dynamic.g()
  }
}
", "
(function() {
  foo = function() {
    for (; x; ) {
      a(), b(), c() && (d() || (e(), f()));
    }
  };

  bar = function() {
    for (; x; ) {
      if (a(), b(), c()) {
        if (d()) {
          continue;
        }

        e(), f();
      }

      g();
    }
  };
})();
").jsMangle

# Test mangling the "self" variable
test("
@export
class Foo {
  var x = 100

  def foo fn() int {
    var y = dynamic.get()
    return => x + y
  }

  def bar fn() int {
    var y = dynamic.get()
    while true {
      return => x + y
    }
  }

  def baz fn() int {
    while true {
      return => x
    }
  }

  def test fn() int {
    return => x
  }
}
", "
(function() {
  Foo = function() {
    this.x = 100;
  };

  Foo.prototype.foo = function() {
    var a = this, b = get();
    return function() {
      return a.x + b;
    };
  };

  Foo.prototype.bar = function() {
    for (var a = this, b = get(); ; ) {
      return function() {
        return a.x + b;
      };
    }
  };

  Foo.prototype.baz = function() {
    for (var a = this; ; ) {
      return function() {
        return a.x;
      };
    }
  };

  Foo.prototype.test = function() {
    var a = this;
    return function() {
      return a.x;
    };
  };
})();
").jsMangle

# Test a loop special case
test("
@export
def foo {
  while true {
    dynamic.a()
    if dynamic.b() {
      break
    }
  }
}

@export
def bar {
  while dynamic.a() {
    dynamic.b()
    if dynamic.c() {
      break
    }
  }
}
", "
(function() {
  foo = function() {
    for (; a(), !b(); ) {
    }
  };

  bar = function() {
    for (; a() && (b(), !c()); ) {
    }
  };
})();
").jsMangle

# Test mangling the name of catch variables
test("
@export
def foo {
  try {
  } catch foo dynamic {
  }
}
", "
(function() {
  foo = function() {
    try {
    }

    catch (a) {
    }
  };
})();
").jsMangle

  }
}
