namespace Skew.Tests {
  def testMangle {

# Test default values
test("
@export
def main string {
  var i int
  var s string
  var d double
  var b bool
  var f Foo
  return i.toString + d.toString + b.toString + s + f.toString
}

class Foo {
  def toString string
}
", "
(function() {
  main = function() {
    var a = null, b = null;
    return '00false' + a + b.c();
  };
  var d = {};
})();
").jsMangle.foldAllConstants

# Test associative operator rotation
test("
@export
def foo {
  dynamic.test(dynamic.a + (dynamic.b + dynamic.c))
  dynamic.test(dynamic.a - (dynamic.b - dynamic.c))
  dynamic.test(dynamic.a * (dynamic.b * dynamic.c))
  dynamic.test(dynamic.a / (dynamic.b / dynamic.c))
  dynamic.test(dynamic.a & (dynamic.b & dynamic.c))
  dynamic.test(dynamic.a | (dynamic.b | dynamic.c))
  dynamic.test(dynamic.a ^ (dynamic.b ^ dynamic.c))
  dynamic.test(dynamic.a && (dynamic.b && dynamic.c))
  dynamic.test(dynamic.a || (dynamic.b || dynamic.c))
}

@export
def bar {
  dynamic.test(dynamic.a & ((dynamic.b | dynamic.c) & (dynamic.d & (dynamic.e & dynamic.f))))
}
", "
(function() {
  foo = function() {
    test(a + (b + c)), test(a - (b - c)), test(a * (b * c)), test(a / (b / c)), test(a & b & c), test(a | b | c), test(a ^ b ^ c), test(a && b && c), test(a || b || c);
  };

  bar = function() {
    test(a & (b | c) & d & e & f);
  };
})();
").jsMangle

# Test if statement folding
test("
@export
def main {
  if dynamic.a() {}
  if dynamic.b() { dynamic.c() }
  if dynamic.d() {}
  else { dynamic.e() }
  if dynamic.f() { dynamic.g() }
  else { dynamic.h() }
}
", "
(function() {
  main = function() {
    a(), b() && c(), d() || e(), f() ? g() : h();
  };
})();
").jsMangle.foldAllConstants

# Test if statement return folding
test("
@export
def foo bool {
  if dynamic.a { return true }
  if dynamic.b && dynamic.c { return true }
  if dynamic.d { return true }
  if dynamic.e && dynamic.f { return true }
  return false
}

@export
def bar bool {
  if dynamic.a { return true }
  else if dynamic.b && dynamic.c { return true }
  else if dynamic.d { return true }
  else if dynamic.e && dynamic.f { return true }
  else { return false }
}

@export
def baz bool {
  if dynamic.a || dynamic.b {
    if dynamic.c || dynamic.d {
      return true
    }
  }
  return false
}
", "
(function() {
  foo = function() {
    return a || b && c || d || e && f ? !0 : !1;
  };

  bar = function() {
    return a || b && c || d || e && f ? !0 : !1;
  };

  baz = function() {
    return (a || b) && (c || d) ? !0 : !1;
  };
})();
").jsMangle

# More tests for if statement return folding
test("
@export
def foo(x dynamic) dynamic {
  x.foo(1)
  if x.y {
    x.foo(2)
    if x.y {
      x.foo(0)
      return x
    }
  }
  x.foo(3)
  if x.y {
    x.foo(4)
    if x.y {
      x.foo(0)
      return x
    }
  }
}

@export
def bar(x double) int {
  if x < 0 { return 0 }
  if x > 1 { return 1 }
  return 2
}
", "
(function() {
  foo = function(a) {
    if ((a.foo(1), a.y && (a.foo(2), a.y)) || (a.foo(3), a.y && (a.foo(4), a.y))) {
      return a.foo(0), a;
    }
  };

  bar = function(a) {
    return a < 0 ? 0 : a > 1 ? 1 : 2;
  };
})();
").jsMangle

# Test integer comparison special cases
test("
@export
def foo(bar int, baz fn()) {
  if bar < 1 { baz() }
  if bar <= 1 { baz() }
  if bar > 1 { baz() }
  if bar >= 1 { baz() }
  if bar == 1 { baz() }
  if bar != 1 { baz() }
}

@export
def bar(foo int, baz fn()) {
  if 1 < foo { baz() }
  if 1 <= foo { baz() }
  if 1 > foo { baz() }
  if 1 >= foo { baz() }
  if 1 == foo { baz() }
  if 1 != foo { baz() }
}
", "
(function() {
  foo = function(a, b) {
    a < 1 && b(), a < 2 && b(), a > 1 && b(), a > 0 && b(), a ^ 1 || b(), a ^ 1 && b();
  };

  bar = function(a, b) {
    1 < a && b(), 0 < a && b(), 1 > a && b(), 2 > a && b(), 1 ^ a || b(), 1 ^ a && b();
  };
})();
").jsMangle

# Test enum comparison special cases
test("
@export
def foo(bar Foo, baz fn()) {
  if bar as int < Foo.BAR as int { baz() }
  if bar as int <= Foo.BAR as int { baz() }
  if bar as int > Foo.BAR as int { baz() }
  if bar as int >= Foo.BAR as int { baz() }
  if bar == Foo.FOO { baz() }
  if bar != Foo.FOO { baz() }
  if bar == Foo.BAR { baz() }
  if bar != Foo.BAR { baz() }
}

@export
def bar(foo Foo, baz fn()) {
  if Foo.BAR as int < foo as int { baz() }
  if Foo.BAR as int <= foo as int { baz() }
  if Foo.BAR as int > foo as int { baz() }
  if Foo.BAR as int >= foo as int { baz() }
  if Foo.FOO == foo { baz() }
  if Foo.FOO != foo { baz() }
  if Foo.BAR == foo { baz() }
  if Foo.BAR != foo { baz() }
}

enum Foo {
  FOO
  BAR
}
", "
(function() {
  foo = function(a, b) {
    a < 1 && b(), a < 2 && b(), a > 1 && b(), a > 0 && b(), a || b(), a && b(), a ^ 1 || b(), a ^ 1 && b();
  };

  bar = function(a, b) {
    1 < a && b(), 0 < a && b(), 1 > a && b(), 2 > a && b(), a || b(), a && b(), 1 ^ a || b(), 1 ^ a && b();
  };
})();
").jsMangle.foldAllConstants

# Doubles should not trigger integer comparison special cases
test("
@export
def foo(bar double, baz fn()) {
  if bar < 1 { baz() }
  if bar <= 1 { baz() }
  if bar > 1 { baz() }
  if bar >= 1 { baz() }
  if bar == 1 { baz() }
  if bar != 1 { baz() }
}

@export
def bar(foo double, baz fn()) {
  if 1 < foo { baz() }
  if 1 <= foo { baz() }
  if 1 > foo { baz() }
  if 1 >= foo { baz() }
  if 1 == foo { baz() }
  if 1 != foo { baz() }
}
", "
(function() {
  foo = function(a, b) {
    a < 1 && b(), a <= 1 && b(), a > 1 && b(), a >= 1 && b(), a === 1 && b(), a !== 1 && b();
  };

  bar = function(a, b) {
    1 < a && b(), 1 <= a && b(), 1 > a && b(), 1 >= a && b(), 1 === a && b(), 1 !== a && b();
  };
})();
").jsMangle

# Test a special case for comparison with -1
test("
@export
def main(foo string) {
  if \"foo\" in foo { dynamic.bar() }
}
", "
(function() {
  main = function(a) {
    ~a.indexOf('foo') && bar();
  };
})();
").jsMangle.inlineAllFunctions.foldAllConstants

# Test index to member conversions
test("
@export
def foo(map StringMap<int>) {
  dynamic.test(map[\"x\"])
  dynamic.test(map[\"_\"])
  dynamic.test(map[\"0\"])
  dynamic.test(map[\"x0\"])
  dynamic.test(map[\"if\"])
}

@export
def bar(map StringMap<int>) {
  map[\"x\"] = dynamic.test()
  map[\"_\"] = dynamic.test()
  map[\"0\"] = dynamic.test()
  map[\"x0\"] = dynamic.test()
  map[\"if\"] = dynamic.test()
}
", "
(function() {
  foo = function(a) {
    test(a.x), test(a._), test(a['0']), test(a.x0), test(a['if']);
  };

  bar = function(a) {
    a.x = test(), a._ = test(), a['0'] = test(), a.x0 = test(), a['if'] = test();
  };
})();
").jsMangle.inlineAllFunctions.foldAllConstants

# Test dead code elimination with constants
test("
enum Foo {
  FOO
  BAR
  BAZ
}

const foo = Foo.BAZ

@export
def bar {
  if foo == .FOO { dynamic.test(\"FOO\") }
  else if foo == .BAR { dynamic.test(\"BAR\") }
  else if foo == .BAZ { dynamic.test(\"BAZ\") }
  else { dynamic.test(\"FAIL\") }
}
", "
(function() {
  bar = function() {
    test('BAZ');
  };
})();
").jsMangle.foldAllConstants

# Test return statement collapsing
test("
@export
def foo {
  if dynamic.x {
    dynamic.y()
    return
  }
}
", "
(function() {
  foo = function() {
    if (x) {
      y();
    }
  };
})();
").jsMangle

# Test return statement collapsing
test("
@export
def foo {
  if dynamic.x { return }
  dynamic.y()
  dynamic.y()
}
", "
(function() {
  foo = function() {
    x || (y(), y());
  };
})();
").jsMangle

# Test return statement collapsing
test("
@export
def foo {
  if dynamic.x { return }
  dynamic.y()
  if dynamic.x { return }
  dynamic.y()
}
", "
(function() {
  foo = function() {
    x || (y(), x || y());
  };
})();
").jsMangle

# Test return statement collapsing
test("
@export
def foo {
  if dynamic.x {
    if dynamic.y { return }
    dynamic.z()
    dynamic.z()
  }
}
", "
(function() {
  foo = function() {
    x && (y || (z(), z()));
  };
})();
").jsMangle

# Test return statement collapsing
test("
@export
def foo {
  if dynamic.x {
    if dynamic.y { return }
    dynamic.z()
    dynamic.z()
  }
  dynamic.z()
}
", "
(function() {
  foo = function() {
    if (x) {
      if (y) {
        return;
      }

      z(), z();
    }

    z();
  };
})();
").jsMangle

# Test return statement collapsing
test("
@export
def foo {
  while dynamic.x {
    if dynamic.y { return }
    dynamic.z()
    dynamic.z()
  }
}
", "
(function() {
  foo = function() {
    for (; x;) {
      if (y) {
        return;
      }

      z(), z();
    }
  };
})();
").jsMangle

# Test return statement collapsing
test("
@export
def foo {
  dynamic.a()
  dynamic.b()
  if dynamic.c() {
    if dynamic.d() { return }
    dynamic.e()
    dynamic.f()
  }
}

@export
def bar {
  dynamic.a()
  dynamic.b()
  if dynamic.c() {
    if dynamic.d() { return }
    dynamic.e()
    dynamic.f()
  }
  dynamic.g()
}
", "
(function() {
  foo = function() {
    a(), b(), c() && (d() || (e(), f()));
  };

  bar = function() {
    if (a(), b(), c()) {
      if (d()) {
        return;
      }

      e(), f();
    }

    g();
  };
})();
").jsMangle

# Test continue statement collapsing
test("
@export
def foo {
  while dynamic.x {
    if dynamic.y {
      dynamic.z()
      continue
    }
  }
}
", "
(function() {
  foo = function() {
    for (; x;) {
      if (y) {
        z();
      }
    }
  };
})();
").jsMangle

# Test continue statement collapsing
test("
@export
def foo {
  while dynamic.x {
    if dynamic.y { continue }
    dynamic.z()
    dynamic.z()
  }
}
", "
(function() {
  foo = function() {
    for (; x;) {
      y || (z(), z());
    }
  };
})();
").jsMangle

# Test continue statement collapsing
test("
@export
def foo {
  while dynamic.x {
    if dynamic.y { continue }
    dynamic.z()
    if dynamic.y { continue }
    dynamic.z()
  }
}
", "
(function() {
  foo = function() {
    for (; x;) {
      y || (z(), y || z());
    }
  };
})();
").jsMangle

# Test continue statement collapsing
test("
@export
def foo {
  while dynamic.x {
    if dynamic.y {
      dynamic.z()
      if dynamic.y { continue }
      dynamic.z()
      dynamic.z()
    }
  }
}
", "
(function() {
  foo = function() {
    for (; x;) {
      y && (z(), y || (z(), z()));
    }
  };
})();
").jsMangle

# Test continue statement collapsing
test("
@export
def foo {
  while dynamic.x {
    if dynamic.y {
      dynamic.z()
      if dynamic.y { continue }
      dynamic.z()
      dynamic.z()
    }
    dynamic.z()
  }
}
", "
(function() {
  foo = function() {
    for (; x;) {
      if (y) {
        if (z(), y) {
          continue;
        }

        z(), z();
      }

      z();
    }
  };
})();
").jsMangle

# Test continue statement collapsing
test("
@export
def foo {
  while dynamic.x {
    if dynamic.y {
      dynamic.z()
      continue
    }
    dynamic.z()
    dynamic.z()
  }
}
", "
(function() {
  foo = function() {
    for (; x;) {
      y ? z() : (z(), z());
    }
  };
})();
").jsMangle

# Test continue statement collapsing
test("
@export
def foo {
  while dynamic.x {
    dynamic.a()
    dynamic.b()
    if dynamic.c() {
      if dynamic.d() { continue }
      dynamic.e()
      dynamic.f()
    }
  }
}

@export
def bar {
  while dynamic.x {
    dynamic.a()
    dynamic.b()
    if dynamic.c() {
      if dynamic.d() { continue }
      dynamic.e()
      dynamic.f()
    }
    dynamic.g()
  }
}
", "
(function() {
  foo = function() {
    for (; x;) {
      a(), b(), c() && (d() || (e(), f()));
    }
  };

  bar = function() {
    for (; x;) {
      if (a(), b(), c()) {
        if (d()) {
          continue;
        }

        e(), f();
      }

      g();
    }
  };
})();
").jsMangle

# Test mangling the "self" variable
test("
@export
class Foo {
  var x = 100

  def foo fn() int {
    var y = dynamic.get()
    return => x + y
  }

  def bar fn() int {
    var y = dynamic.get()
    while true {
      return => x + y
    }
  }

  def baz fn() int {
    while true {
      return => x
    }
  }

  def test fn() int {
    return => x
  }
}
", "
(function() {
  Foo = function() {
    this.x = 100;
  };

  Foo.prototype.foo = function() {
    var b = this, a = get();
    return function() {
      return b.x + a;
    };
  };

  Foo.prototype.bar = function() {
    for (var b = this, a = get();;) {
      return function() {
        return b.x + a;
      };
    }
  };

  Foo.prototype.baz = function() {
    for (var a = this;;) {
      return function() {
        return a.x;
      };
    }
  };

  Foo.prototype.test = function() {
    var a = this;
    return function() {
      return a.x;
    };
  };
})();
").jsMangle

# Test a loop special case
test("
@export
def foo {
  while true {
    dynamic.a()
    if dynamic.b() {
      break
    }
  }
}

@export
def bar {
  while dynamic.a() {
    dynamic.b()
    if dynamic.c() {
      break
    }
  }
}
", "
(function() {
  foo = function() {
    for (; a(), !b();) {
    }
  };

  bar = function() {
    for (; a() && (b(), !c());) {
    }
  };
})();
").jsMangle

# Test mangling the name of catch variables
test("
@export
def foo {
  try {
  } catch foo dynamic {
  }
}
", "
(function() {
  foo = function() {
    try {
    }

    catch (a) {
    }
  };
})();
").jsMangle

test("
@export
def foo {
  while true {
    switch dynamic.x {
      case 0 { break }
      case 1 { switch dynamic.y { case 0 { break } } }
    }
  }

  for i = 0; i < 10; i++ {
    switch dynamic.x {
      case 0 { break }
      case 1 { switch dynamic.y { case 0 { break } } }
    }
  }

  for i in 0..10 {
    switch dynamic.x {
      case 0 { break }
      case 1 { switch dynamic.y { case 0 { break } } }
    }
  }
}
", "
(function() {
  foo = function() {
    c: for (;;) {
      switch (x) {
        case 0: {
          break c;
        }

        case 1: {
          switch (y) {
            case 0: {
              break c;
            }
          }
          break;
        }
      }
    }

    d: for (var a = 0; a < 10; ++a) {
      switch (x) {
        case 0: {
          break d;
        }

        case 1: {
          switch (y) {
            case 0: {
              break d;
            }
          }
          break;
        }
      }
    }

    e: for (var b = 0; b < 10; ++b) {
      switch (x) {
        case 0: {
          break e;
        }

        case 1: {
          switch (y) {
            case 0: {
              break e;
            }
          }
          break;
        }
      }
    }
  };
})();
").jsMangle

# Test moving the default case outside the switch statement
test("
@export
def foo {
  switch dynamic.a {
    case 0 { return }
    default {
      dynamic.b1()
      dynamic.b2()
    }
  }

  switch dynamic.a {
    case 0 { dynamic.c() }
    default {
      dynamic.d1()
      dynamic.d2()
    }
  }

  dynamic.e()
}
", "
(function() {
  foo = function() {
    switch (a) {
      case 0: {
        return;
      }
    }

    b1(), b2();

    switch (a) {
      case 0: {
        c();
        break;
      }

      default: {
        d1(), d2();
        break;
      }
    }

    e();
  };
})();
").jsMangle

# Test inline identifiers in object literals
test("
@export
def foo dynamic {
  return {\"a\": 0, \"0\": 0, \" \": 0}
}
", "
(function() {
  foo = function() {
    return {a: 0, '0': 0, ' ': 0};
  };
})();
").jsMangle

# Test sequence hook rotation
test("
@export
def foo dynamic {
  return () bool => {
    dynamic.x()
    if dynamic.q {
      dynamic.x()
      return true
    }
    return false
  }
}
", "
(function() {
  foo = function() {
    return function() {
      return x(), q ? (x(), !0) : !1;
    };
  };
})();
").jsMangle

# Test toString() removal
test("
@export
def foo(x int, f Foo, b Bar) {
  var z = Baz.new
  dynamic.t(\"\" + x.toString)
  dynamic.t(x.toString + \"\")
  dynamic.t(x.toString + x.toString)
  dynamic.t(f.toString + \"\")
  dynamic.t(b.toString(0) + \"\")
  dynamic.t(z.toString + \"\")
}

@import
class Foo {
  def toString string
}

@import
class Bar {
  def toString(x int) string
}

class Baz {
  def toString string { return \"\" }
}
", "
(function() {
  foo = function(a, e, f) {
    var b = new g();
    t('' + a), t(a + ''), t(a.toString() + a), t(e + ''), t(f.toString(0) + ''), t(b.c() + '');
  };

  function g() {
  }

  g.prototype.c = function() {
    return '';
  };
})();
").jsMangle

# Make sure folding doesn't leave extra variables in this case
test("
@export
def foo int {
  var a = 0, b = 0
  var c = 0
  return a + b + c
}
", "
(function() {
  foo = function() {
    return 0;
  };
})();
").jsMangle.foldAllConstants

# Make sure special runtime function names and definitions are mangled
test("
class Foo {}
class Bar : Foo {}

@entry
def main(args List<string>) int {
  Bar.new
  return args.count * 100
}
", "
(function() {
  function i(a, c) {
    a.prototype = Object.create(c.prototype), a.prototype.constructor = a;
  }

  var j = Math.imul || function(a, c) {
    var f = a >> 16 & 65535, g = c >> 16 & 65535, d = a & 65535, e = c & 65535;
    return d * e + (f * e + d * g << 16) | 0;
  };

  function m(a) {
    return new l(), j(h(a), 100);
  }

  function h(a) {
    return a.length;
  }

  function k() {
  }

  function l() {
    k.call(this);
  }

  i(l, k);

  process.exit(m(process.argv.slice(2)));
})();
").jsMangle

# Make sure casting doesn't cause the enum declaration to be emitted
test("
enum Foo { FOO }

@entry
def main int {
  return 0 as Foo
}
", "
(function() {
  function a() {
    return 0;
  }

  process.exit(a());
})();
").jsMangle

# Make sure constant folding folds string lengths
test("
@export
def foo int {
  return \"abc\".count
}
", "
(function() {
  foo = function() {
    return 3;
  };
})();
").jsMangle.foldAllConstants

# Lock down the name generation algorithm
test("
@import {
  def x int
  def y
}

@entry
def main {
  var a0 = x, a1 = x, a2 = x, a3 = x, a4 = x, a5 = x, a6 = x, a7 = x, a8 = x, a9 = x
  y
  var b0 = x, b1 = x, b2 = x, b3 = x, b4 = x, b5 = x, b6 = x, b7 = x, b8 = x, b9 = x
  y
  var c0 = x, c1 = x, c2 = x, c3 = x, c4 = x, c5 = x, c6 = x, c7 = x, c8 = x, c9 = x
  y
  var d0 = x, d1 = x, d2 = x, d3 = x, d4 = x, d5 = x, d6 = x, d7 = x, d8 = x, d9 = x
  y
  var e0 = x, e1 = x, e2 = x, e3 = x, e4 = x, e5 = x, e6 = x, e7 = x, e8 = x, e9 = x
  y
  var f0 = x, f1 = x, f2 = x, f3 = x, f4 = x, f5 = x, f6 = x, f7 = x, f8 = x, f9 = x
  y
  var g0 = x, g1 = x, g2 = x, g3 = x, g4 = x, g5 = x, g6 = x, g7 = x, g8 = x, g9 = x
  y
  var h0 = x, h1 = x, h2 = x, h3 = x, h4 = x, h5 = x, h6 = x, h7 = x, h8 = x, h9 = x
  y
  var i0 = x, i1 = x, i2 = x, i3 = x, i4 = x, i5 = x, i6 = x, i7 = x, i8 = x, i9 = x
  y
  var j0 = x, j1 = x, j2 = x, j3 = x, j4 = x, j5 = x, j6 = x, j7 = x, j8 = x, j9 = x
  y
  var k0 = x, k1 = x, k2 = x, k3 = x, k4 = x, k5 = x, k6 = x, k7 = x, k8 = x, k9 = x
}
", "
(function() {
  function eb() {
    var a = x(), b = x(), c = x(), d = x(), e = x(), f = x(), g = x(), h = x(), i = x(), j = x();
    y();
    var k = x(), l = x(), m = x(), n = x(), o = x(), p = x(), q = x(), r = x(), s = x(), t = x();
    y();
    var u = x(), v = x(), w = x(), z = x(), A = x(), B = x(), C = x(), D = x(), E = x(), F = x();
    y();
    var G = x(), H = x(), I = x(), J = x(), K = x(), L = x(), M = x(), N = x(), O = x(), P = x();
    y();
    var Q = x(), R = x(), S = x(), T = x(), U = x(), V = x(), W = x(), X = x(), Y = x(), Z = x();
    y();
    var _ = x(), $ = x(), aa = x(), ba = x(), ca = x(), da = x(), ea = x(), fa = x(), ga = x(), ha = x();
    y();
    var ia = x(), ja = x(), ka = x(), la = x(), ma = x(), na = x(), oa = x(), pa = x(), qa = x(), ra = x();
    y();
    var sa = x(), ta = x(), ua = x(), va = x(), wa = x(), xa = x(), ya = x(), za = x(), Aa = x(), Ba = x();
    y();
    var Ca = x(), Da = x(), Ea = x(), Fa = x(), Ga = x(), Ha = x(), Ia = x(), Ja = x(), Ka = x(), La = x();
    y();
    var Ma = x(), Na = x(), Oa = x(), Pa = x(), Qa = x(), Ra = x(), Sa = x(), Ta = x(), Ua = x(), Va = x();
    y();
    var Wa = x(), Xa = x(), Ya = x(), Za = x(), _a = x(), $a = x(), ab = x(), bb = x(), cb = x(), db = x();
  }

  eb();
})();
").jsMangle

# Make sure it's possible to not clobber over jQuery
test("
@import {
  def x int
  def y

  @rename(\"$\")
  var jQuery dynamic
}

@entry
def main {
  var a0 = x, a1 = x, a2 = x, a3 = x, a4 = x, a5 = x, a6 = x, a7 = x, a8 = x, a9 = x
  y
  var b0 = x, b1 = x, b2 = x, b3 = x, b4 = x, b5 = x, b6 = x, b7 = x, b8 = x, b9 = x
  y
  var c0 = x, c1 = x, c2 = x, c3 = x, c4 = x, c5 = x, c6 = x, c7 = x, c8 = x, c9 = x
  y
  var d0 = x, d1 = x, d2 = x, d3 = x, d4 = x, d5 = x, d6 = x, d7 = x, d8 = x, d9 = x
  y
  var e0 = x, e1 = x, e2 = x, e3 = x, e4 = x, e5 = x, e6 = x, e7 = x, e8 = x, e9 = x
  y
  var f0 = x, f1 = x, f2 = x, f3 = x, f4 = x, f5 = x, f6 = x, f7 = x, f8 = x, f9 = x
  jQuery()
}
", "
(function() {
  function ja() {
    var a = x(), b = x(), c = x(), d = x(), e = x(), f = x(), g = x(), h = x(), i = x(), j = x();
    y();
    var k = x(), l = x(), m = x(), n = x(), o = x(), p = x(), q = x(), r = x(), s = x(), t = x();
    y();
    var u = x(), v = x(), w = x(), z = x(), A = x(), B = x(), C = x(), D = x(), E = x(), F = x();
    y();
    var G = x(), H = x(), I = x(), J = x(), K = x(), L = x(), M = x(), N = x(), O = x(), P = x();
    y();
    var Q = x(), R = x(), S = x(), T = x(), U = x(), V = x(), W = x(), X = x(), Y = x(), Z = x();
    y();
    var _ = x(), aa = x(), ba = x(), ca = x(), da = x(), ea = x(), fa = x(), ga = x(), ha = x(), ia = x();
    $();
  }

  ja();
})();
").jsMangle

test("
def foo {
  dynamic.Foo()
}

@noinline
def bar {
  dynamic.Bar()
}

@entry
def main {
  foo
  bar
}
", "
(function() {
  function a() {
    Bar();
  }

  function b() {
    Foo(), a();
  }

  b();
})();
").jsMangle.inlineAllFunctions

# Make sure classes with unused constructors are still emitted
test("
class A.B.C {}

namespace A.B.C {
  def foo {}
}

namespace D.E.F {
  def foo {}
}

@entry
def main {
  A.B.C.foo
  D.E.F.foo
}
", "
(function() {
  function main() {
    A.B.C.foo();
    D.E.F.foo();
  }

  var A = {};
  A.B = {};
  A.B.C = {};

  A.B.C.foo = function() {
  };

  var D = {};
  D.E = {};
  D.E.F = {};

  D.E.F.foo = function() {
  };

  main();
})();
").js

  }
}
