namespace Skew.Tests {
  def testJavaScript {

# Check special cases for keyword operators
test("
@entry
def main {
  dynamic.foo(dynamic.void(0))
  dynamic.foo(dynamic.typeof(0))
  dynamic.foo(dynamic.typeof(0).length)
  dynamic.foo(dynamic.delete(dynamic.foo.bar))
}
", "
(function() {
  function main() {
    foo(void 0);
    foo(typeof 0);
    foo((typeof 0).length);
    foo(delete foo.bar);
  }

  main();
})();
").js

# Make sure classes with unused constructors are still emitted
test("
class A.B.C {}

namespace A.B.C {
  def foo {}
}

namespace D.E.F {
  def foo {}
}

@entry
def main {
  A.B.C.foo
  D.E.F.foo
}
", "
(function() {
  function main() {
    A.B.C.foo();
    D.E.F.foo();
  }

  var A = {};
  A.B = {};
  A.B.C = {};

  A.B.C.foo = function() {
  };

  var D = {};
  D.E = {};
  D.E.F = {};

  D.E.F.foo = function() {
  };

  main();
})();
").js

# Check renaming across inherited scopes
test("
class Foo {
  def foo(x int) {} # Foo.foo(x int)
  def foo(x bool) {} # Foo.foo(x bool)
}

class Bar : Foo {
  def foo1(x string) {} # Bar.foo1(x string)
  over foo(x int) {} # Bar.foo(x int)
}

@entry
def main {
  var foo = Foo.new
  var bar = Bar.new
  foo.foo(0)
  foo.foo(false)
  bar.foo(0)
  bar.foo1(null)
}
", "
(function() {
  function __extends(derived, base) {
    derived.prototype = Object.create(base.prototype);
    derived.prototype.constructor = derived;
  }

  function main() {
    var foo = new Foo();
    var bar = new Bar();
    foo.foo2(0);
    foo.foo1(false);
    bar.foo2(0);
    bar.foo1(null);
  }

  function Foo() {
  }

  // Foo.foo(x int)
  Foo.prototype.foo2 = function(x) {
  };

  // Foo.foo(x bool)
  Foo.prototype.foo1 = function(x) {
  };

  function Bar() {
    Foo.call(this);
  }

  __extends(Bar, Foo);

  // Bar.foo1(x string)
  Bar.prototype.foo1 = function(x) {
  };

  // Bar.foo(x int)
  Bar.prototype.foo2 = function(x) {
  };

  main();
})();
").js

# Check overloaded functions with identical names across types
test("
class Foo {
  def foo(x int) {} # Foo.foo(x int)
  def foo(x bool) {} # Foo.foo(x bool)
}

class Bar {
  def foo(x string) {} # Bar.foo(x string)
  def foo(x int) {} # Bar.foo(x int)
  def foo(x bool) {} # Bar.foo(x bool)
}

@entry
def main {
  var foo = Foo.new
  var bar = Bar.new
  foo.foo(0)
  foo.foo(false)
  bar.foo(0)
  bar.foo(false)
}
", "
(function() {
  function main() {
    var foo = new Foo();
    var bar = new Bar();
    foo.foo1(0);
    foo.foo2(false);
    bar.foo2(0);
    bar.foo3(false);
  }

  function Foo() {
  }

  // Foo.foo(x int)
  Foo.prototype.foo1 = function(x) {
  };

  // Foo.foo(x bool)
  Foo.prototype.foo2 = function(x) {
  };

  function Bar() {
  }

  // Bar.foo(x int)
  Bar.prototype.foo2 = function(x) {
  };

  // Bar.foo(x bool)
  Bar.prototype.foo3 = function(x) {
  };

  main();
})();
").js

# Check overloaded functions when an interface is present
test("
interface I {
  def foo(x int) # I.foo(x int)
  def foo(x bool) # I.foo(x bool)
}

class Foo :: I {
  def foo(x int) {} # Foo.foo(x int)
  def foo(x bool) {} # Foo.foo(x bool)
}

class Bar :: I {
  def foo(x string) {} # Bar.foo(x string)
  def foo(x int) {} # Bar.foo(x int)
  def foo(x bool) {} # Bar.foo(x bool)
}

@entry
def main {
  var foo = Foo.new
  var bar = Bar.new
  foo.foo(0)
  foo.foo(false)
  bar.foo(0)
  bar.foo(false)
}
", "
(function() {
  function main() {
    var foo = new Foo();
    var bar = new Bar();
    foo.foo2(0);
    foo.foo3(false);
    bar.foo2(0);
    bar.foo3(false);
  }

  function Foo() {
  }

  // Foo.foo(x int)
  Foo.prototype.foo2 = function(x) {
  };

  // Foo.foo(x bool)
  Foo.prototype.foo3 = function(x) {
  };

  function Bar() {
  }

  // Bar.foo(x int)
  Bar.prototype.foo2 = function(x) {
  };

  // Bar.foo(x bool)
  Bar.prototype.foo3 = function(x) {
  };

  main();
})();
").js.globalizeAllFunctions

# Interface removal with globalization
test("
interface IFoo {
  def foo
}

namespace IFoo {
  const FOO = 0
}

class Foo :: IFoo {
  def foo {}
}

@entry
def main int {
  var foo = Foo.new
  var ifoo = foo as IFoo
  foo.foo
  ifoo.foo
  return IFoo.FOO
}
", "
(function() {
  function main() {
    var foo = new Foo();
    var ifoo = foo;
    Foo.foo(foo);
    Foo.foo(ifoo);
    return Foo.FOO;
  }

  function Foo() {
  }

  Foo.foo = function(self) {
  };

  Foo.FOO = 0;

  process.exit(main());
})();
").js.globalizeAllFunctions

# Interface removal should not trigger even with globalization
test("
interface IFoo {
  def foo
}

namespace IFoo {
  const FOO = 0
}

class Foo :: IFoo {
  def foo {}
}

class Bar :: IFoo {
  def foo {}
}

@entry
def main int {
  var foo = Foo.new
  var bar = Bar.new
  var ifoo = foo as IFoo
  foo.foo
  bar.foo
  ifoo.foo
  ifoo = bar
  ifoo.foo
  return IFoo.FOO
}
", "
(function() {
  function main() {
    var foo = new Foo();
    var bar = new Bar();
    var ifoo = foo;
    foo.foo();
    bar.foo();
    ifoo.foo();
    ifoo = bar;
    ifoo.foo();
    return in_IFoo.FOO;
  }

  function Foo() {
  }

  Foo.prototype.foo = function() {
  };

  function Bar() {
  }

  Bar.prototype.foo = function() {
  };

  var in_IFoo = {};

  in_IFoo.FOO = 0;

  process.exit(main());
})();
").js.globalizeAllFunctions

# Check interface removal with an inlineable function
test("
@entry
def main int {
  var ifoo IFoo = Foo.new(0)
  return ifoo.x
}

class Foo :: IFoo {
  var _x int
  def x int { return _x }
}

interface IFoo {
  def x int
}
", "
(function() {
  function main() {
    var ifoo = new Foo(0);
    return ifoo.x();
  }

  function Foo(_x) {
    this._x = _x;
  }

  Foo.prototype.x = function() {
    return this._x;
  };

  process.exit(main());
})();
").js

# Check interface removal with an inlineable function
test("
@entry
def main int {
  var ifoo IFoo = Foo.new(0)
  return ifoo.x
}

class Foo :: IFoo {
  var _x int
  def x int { return _x }
}

interface IFoo {
  def x int
}
", "
(function() {
  function main() {
    var ifoo = new Foo(0);
    return Foo.x(ifoo);
  }

  function Foo(_x) {
    this._x = _x;
  }

  Foo.x = function(self) {
    return self._x;
  };

  process.exit(main());
})();
").js.globalizeAllFunctions

# Check interface removal with an inlineable function
test("
@entry
def main int {
  var ifoo IFoo = Foo.new(0)
  return ifoo.x
}

class Foo :: IFoo {
  var _x int
  def x int { return _x }
}

interface IFoo {
  def x int
}
", "
(function() {
  function main() {
    var ifoo = new Foo(0);
    return ifoo._x;
  }

  function Foo(_x) {
    this._x = _x;
  }

  process.exit(main());
})();
").js.globalizeAllFunctions.inlineAllFunctions

# Conflicting rename annotations should be an error
test("
class Foo {
  @rename(\"a\")
  def foo
}

class Bar : Foo {
  @rename(\"b\")
  over foo
}
", "
<stdin>:8:8: error: Cannot rename \"foo\" to both \"a\" and \"b\"
  over foo
       ~~~
").js

# Check map literal inlining
test("
@export
def main {
  dynamic.bar(foo(foo([], 1, 2), \"3\", \"4\"))
}

def foo(map dynamic, key dynamic, value dynamic) dynamic {
  map[key] = value
  return map
}
", "
(function() {
  main = function() {
    bar(foo(foo([], 1, 2), '3', '4'));
  };

  function foo(map, key, value) {
    map[key] = value;
    return map;
  }
})();
").js.inlineAllFunctions

# Check map literal inlining
test("
@export
def main {
  dynamic.bar(foo(foo({}, 1, 2), \"3\", \"4\"))
}

def foo(map dynamic, key dynamic, value dynamic) dynamic {
  map[key] = value
  return map
}
", "
(function() {
  main = function() {
    bar({1: 2, '3': '4'});
  };
})();
").js.inlineAllFunctions

# Check map literal inlining
test("
def foo<T>(map IntMap<T>, key int, value T) IntMap<T> {
  map[key] = value
  return map
}

@export
def main {
  dynamic.bar(foo<int>(foo<int>({}, 1, 2), 3, 4))
}
", "
(function() {
  main = function() {
    bar({1: 2, 3: 4});
  };
})();
").js.inlineAllFunctions

# Check map literal inlining
test("
@export
def main(x int) {
  dynamic.bar(foo(foo(foo(foo({}, 1, 2), 3, 4), x, 5), 6, 7))
}

def foo(map dynamic, key int, value int) dynamic {
  map[key] = value
  return map
}
", "
(function() {
  main = function(x) {
    bar(foo(foo({1: 2, 3: 4}, x, 5), 6, 7));
  };

  function foo(map, key, value) {
    map[key] = value;
    return map;
  }
})();
").js.inlineAllFunctions

# Check map literal inlining
test("
@export
def main(x int) {
  dynamic.bar({1: 2, 3: 4, x: 5, 6: 7} as Foo)
}

@import
class Foo {
  def []=(key int, value int) {
    (self as dynamic)[key] = value
  }

  def {...}(key int, value int) Foo {
    self[key] = value
    return self
  }
}

namespace Foo {
  def new Foo {
    return {} as dynamic
  }
}
", "
(function() {
  main = function(x) {
    bar(in_Foo.insert(in_Foo.insert({1: 2, 3: 4}, x, 5), 6, 7));
  };

  var in_Foo = {};

  in_Foo.insert = function(self, key, value) {
    self[key] = value;
    return self;
  };
})();
").js.inlineAllFunctions

# Check list literal inlining
test("
@export
def main {
  dynamic.bar(foo(foo([], 1), 2))
}

def foo(list dynamic, value dynamic) dynamic {
  list.push(value)
  return list
}
", "
(function() {
  main = function() {
    bar([1, 2]);
  };
})();
").js.inlineAllFunctions

# Check list literal inlining
test("
@export
def main {
  dynamic.bar(foo(foo([], 1), 2))
}

def foo(list dynamic, value dynamic) dynamic {
  list.unshift(value)
  return list
}
", "
(function() {
  main = function() {
    bar(foo(foo([], 1), 2));
  };

  function foo(list, value) {
    list.unshift(value);
    return list;
  }
})();
").js.inlineAllFunctions

# Check list literal inlining
test("
@export
def main {
  dynamic.bar(foo(foo({}, 1), 2))
}

def foo(list dynamic, value dynamic) dynamic {
  list.push(value)
  return list
}
", "
(function() {
  main = function() {
    bar(foo(foo({}, 1), 2));
  };

  function foo(list, value) {
    list.push(value);
    return list;
  }
})();
").js.inlineAllFunctions

# Check list literal inlining
test("
@export
def main(x int) {
  dynamic.bar([1, \"2\", x, false] as Foo)
}

@import
class Foo {
  def append(value dynamic) {
    (self as dynamic).push(value)
  }

  def [...](value dynamic) Foo {
    append(value)
    return self
  }
}

namespace Foo {
  def new Foo {
    return [] as dynamic
  }
}
", "
(function() {
  main = function(x) {
    bar([1, '2', x, false]);
  };
})();
").js.inlineAllFunctions

# Check that order doesn't matter when inlining list literals
test("
@import
class Foo {
  def [...](value int) Foo {
    (self as dynamic).push(value)
    return self
  }

  def [...](value bool) Foo {
    (self as dynamic).push(value)
    return self
  }
}

namespace Foo {
  def [new] Foo {
    return [] as dynamic
  }
}

@export
def main {
  [1, false] as Foo
}
", "
(function() {
  main = function() {
    [1, false];
  };
})();
").js.inlineAllFunctions

# Check that order doesn't matter when inlining list literals
test("
@import
class Foo {
  def [...](value bool) Foo {
    (self as dynamic).push(value)
    return self
  }

  def [...](value int) Foo {
    (self as dynamic).push(value)
    return self
  }
}

namespace Foo {
  def [new] Foo {
    return [] as dynamic
  }
}

@export
def main {
  [1, false] as Foo
}
", "
(function() {
  main = function() {
    [1, false];
  };
})();
").js.inlineAllFunctions

# Check for a bug where merged functions weren't emitted sometimes
test("
class Bar : Foo {
}

class Foo {
  def foo
  def foo {}
}

@entry
def main {
  Foo.new.foo
}
", "
(function() {
  function main() {
    new Foo().foo();
  }

  function Foo() {
  }

  Foo.prototype.foo = function() {
  };

  main();
})();
").js

# Check for a bug where merged functions weren't emitted sometimes
test("
class Foo {
  def foo
  def foo {}
}

class Bar : Foo {
}

@entry
def main {
  Foo.new.foo
}
", "
(function() {
  function main() {
    new Foo().foo();
  }

  function Foo() {
  }

  Foo.prototype.foo = function() {
  };

  main();
})();
").js

# Implemented instance functions should be pulled off of interfaces
test("
class Foo :: IFoo {
  def foo {}
}

interface IFoo {
  def bar {}
}

@export
def main {
  var foo = Foo.new
  var ifoo = foo as IFoo
  foo.foo
  ifoo.bar
}
", "
(function() {
  main = function() {
    var foo = new Foo();
    var ifoo = foo;
    foo.foo();
    in_IFoo.bar(ifoo);
  };

  function Foo() {
  }

  Foo.prototype.foo = function() {
  };

  var in_IFoo = {};

  in_IFoo.bar = function(self) {
  };
})();
").js

# Check folding of the "**" operator
test("
@export
def main dynamic {
  return [
    2 ** 2,
    2 ** 3,
    3 ** 2,
    2 ** 0,
    2 ** -2,
    0.25 ** 0.5,
  ]
}
", "
(function() {
  main = function() {
    return [4, 8, 9, 1, 0, 0.5];
  };
})();
").js.foldAllConstants

# Make sure variable initialization works with multiple user-defined constructors
test("
class Foo {
  var foo = \"\"
  var bar = [1, 2, 3]
  def new {}
  def new(x int) {}
}

@export
def main{
  Foo.new
  Foo.new(1)
}
", "
(function() {
  main = function() {
    new Foo();
    new Foo.new2(1);
  };

  function Foo() {
    this.foo = '';
    this.bar = [1, 2, 3];
  }

  Foo.new2 = function(x) {
    this.foo = '';
    this.bar = [1, 2, 3];
  };

  Foo.new2.prototype = Foo.prototype;
})();
").js

# Make sure constant folding of compile-time guards doesn't change code emission of the variables involved
test("
enum Foo { FOO }
if BAR == 0 {
  @export
  def main {}
}
@export
const BAR = Foo.FOO
", "
(function() {
  main = function() {
  };

  var Foo = {
    FOO: 0
  };

  BAR = Foo.FOO;
})();
").js

# Check for integer casting
test("
@export
def main(x int) {
  dynamic.foo(x + 1)
  dynamic.foo(x - 1)
  dynamic.foo(x * 2)
  dynamic.foo(x / 2)
  dynamic.foo(x % 2)
  dynamic.foo(x % 0)
  dynamic.foo(x % x)
  dynamic.foo(x << 1)
  dynamic.foo(x >> 1)
  dynamic.foo(x >>> 1)
  dynamic.foo(x >>> 0)
  dynamic.foo(x >>> x)
}
", "
(function() {
  var __imul = Math.imul ? Math.imul : function(a, b) {
    var ah = a >> 16 & 65535;
    var bh = b >> 16 & 65535;
    var al = a & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };

  main = function(x) {
    foo(x + 1 | 0);
    foo(x - 1 | 0);
    foo(__imul(x, 2));
    foo(x / 2 | 0);
    foo(x % 2);
    foo(x % 0 | 0);
    foo(x % x | 0);
    foo(x << 1);
    foo(x >> 1);
    foo(x >>> 1);
    foo(x >>> 0 | 0);
    foo(x >>> x | 0);
  };
})();
").js

# This caused an assert to fail during inlining
test("
interface Foo {
  def foo int
}

class Bar :: Foo {
  def foo int { return 0 }
}

class Baz {
  def foo(foo Foo) int {
    return false ? 0 : foo.foo
  }
}

@export
def main {
  Baz.new.foo(null)
}
", "
(function() {
  main = function() {
    Baz.foo(new Baz(), null);
  };
  var Bar = {};

  Bar.foo = function(self) {
    return 0;
  };

  function Baz() {
  }

  Baz.foo = function(self, foo) {
    return Bar.foo(foo);
  };
})();
").js.inlineAllFunctions.foldAllConstants.globalizeAllFunctions

# Check a case of assignment folding
test("
@export
def main(x int, y int) int {
  x = 0
  x = 1
  return x + y
}
", "
(function() {
  main = function(x, y) {
    x = 1;
    return x + y | 0;
  };
})();
").js.foldAllConstants

# Check a case of assignment folding
test("
@export
def main(x int, y int) int {
  x = 0
  x = x + 1
  return x + y
}
", "
(function() {
  main = function(x, y) {
    x = 0;
    x = x + 1 | 0;
    return x + y | 0;
  };
})();
").js.foldAllConstants

# Check a case of assignment folding
test("
@export
def main(x int, y int) int {
  x = 0
  y = 0
  x = 1
  return x + y
}
", "
(function() {
  main = function(x, y) {
    y = 0;
    x = 1;
    return x + y | 0;
  };
})();
").js.foldAllConstants

# Check a case of assignment folding
test("
@export
def main(x int, y int) int {
  x = 0
  dynamic.foo()
  x = 1
  return x + y
}
", "
(function() {
  main = function(x, y) {
    x = 0;
    foo();
    x = 1;
    return x + y | 0;
  };
})();
").js.foldAllConstants

# Check a case of assignment folding
test("
@export
def main(x int, y int) int {
  x = 0
  y = x
  x = 1
  return x + y
}
", "
(function() {
  main = function(x, y) {
    x = 0;
    y = x;
    x = 1;
    return x + y | 0;
  };
})();
").js.foldAllConstants

# Check a case of assignment folding
test("
@export
def main(x int, y int) int {
  x = 0
  y = dynamic.foo ? x : x + 1
  x = 1
  return x + y
}
", "
(function() {
  main = function(x, y) {
    x = 0;
    y = foo ? x : x + 1 | 0;
    x = 1;
    return x + y | 0;
  };
})();
").js.foldAllConstants

# Check a case of assignment folding
test("
class Foo {
  var x = 0
}

@export
def main int {
  var foo = Foo.new
  foo.x = 1
  foo.x = 2
  return foo.x
}
", "
(function() {
  main = function() {
    var foo = new Foo();
    foo.x = 2;
    return foo.x;
  };

  function Foo() {
    this.x = 0;
  }
})();
").js.foldAllConstants

# Check a case of assignment folding
test("
class Foo {
  var x = 0
  def foo {}
}

@export
def main int {
  var foo = Foo.new
  var y Foo = null
  var z = 0
  foo.x = 1
  y = foo
  z = y.x
  foo.x = 2
  return foo.x
}
", "
(function() {
  main = function() {
    var foo = new Foo();
    var y = null;
    var z = 0;
    foo.x = 1;
    y = foo;
    z = y.x;
    foo.x = 2;
    return foo.x;
  };

  function Foo() {
    this.x = 0;
  }
})();
").js.foldAllConstants

# Check a case of assignment folding
test("
class Foo {
  var x = 0
  def foo int { return x }
}

@export
def main int {
  var foo = Foo.new
  foo.x = foo.foo + 1
  foo.x = foo.foo + 2
  return foo.x
}
", "
(function() {
  main = function() {
    var foo = new Foo();
    foo.x = foo.foo() + 1 | 0;
    foo.x = foo.foo() + 2 | 0;
    return foo.x;
  };

  function Foo() {
    this.x = 0;
  }

  Foo.prototype.foo = function() {
    return this.x;
  };
})();
").js.foldAllConstants

# Check a case of assignment folding
test("
class Foo {
  var x = 0
  def foo {}
}

@export
def main int {
  var foo = Foo.new
  var bar = Foo.new
  foo.x = 1
  bar.x = 2
  foo.x = 3
  return foo.x
}
", "
(function() {
  main = function() {
    var foo = new Foo();
    var bar = new Foo();
    bar.x = 2;
    foo.x = 3;
    return foo.x;
  };

  function Foo() {
    this.x = 0;
  }
})();
").js.foldAllConstants

# Check constant folding of switch statements
test("
@export
def main string {
  switch 0 {
    case 0 { return \"0\" }
    case 1 { return \"1\" }
    default { return null }
  }
}
", "
(function() {
  main = function() {
    return '0';
  };
})();
").js.foldAllConstants

# Check constant folding of switch statements
test("
@export
def main string {
  switch 2 {
    case 0 { return \"0\" }
    case 1 { return \"1\" }
    default { return null }
  }
}
", "
(function() {
  main = function() {
    return null;
  };
})();
").js.foldAllConstants

# Check constant folding of switch statements
test("
@export
def main(x int) string {
  switch 0 {
    case 0 { return \"0\" }
    case x { return \"1\" }
    default { return null }
  }
}
", "
(function() {
  main = function(x) {
    return '0';
  };
})();
").js.foldAllConstants

# Check constant folding of switch statements
test("
@export
def main(x int) string {
  switch 1 {
    case x { return \"0\" }
    case 1 { return \"1\" }
    case 2 { return \"2\" }
    default { return null }
  }
}
", "
(function() {
  main = function(x) {
    switch (1) {
      case x: {
        return '0';
      }

      case 1: {
        return '1';
      }

      default: {
        return null;
      }
    }
  };
})();
").js.foldAllConstants

  }
}
