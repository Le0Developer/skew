namespace Skew.Tests {
  def testCSharp {

# Test entry point
test("
@entry
def main {}
", "
public class Globals
{
    public static void Main()
    {
    }
}
").csharp

# Test entry point
test("
@entry
def main int {
  return 0
}
", "
public class Globals
{
    public static int Main()
    {
        return 0;
    }
}
").csharp

# Test entry point
test("
@entry
def main(x List<string>) {
}
", "
using System.Collections.Generic;

public class Globals
{
    public static void Main(string[] x1)
    {
        List<string> x = new List<string>(x1);
    }
}
").csharp.inlineAllFunctions

# Test entry point
test("
@entry
def main(x List<string>) int {
  return x.count
}
", "
using System.Collections.Generic;

public class Globals
{
    public static int Main(string[] x1)
    {
        List<string> x = new List<string>(x1);
        return x.Count;
    }
}
").csharp.inlineAllFunctions

# Basic class hierarchy
test("
@export
class Foo {
  const instanceVariable1 int
  const instanceVariable2 = 0
  def instanceMethod {}
  def instanceMethod2 {}
}

namespace Foo {
  const staticVariable = 0
}

@export
class Bar : Foo {
  const instanceVariable3 int
  const instanceVariable4 = 0
  over instanceMethod { super }
  def instanceMethod3 {}
}

namespace Bar {
  const staticVariable2 = 0
}
", "
public class Foo
{
    public int instanceVariable1;
    public int instanceVariable2 = 0;
    public static int staticVariable = 0;

    public virtual void instanceMethod()
    {
    }

    public void instanceMethod2()
    {
    }

    public Foo(int instanceVariable1)
    {
        this.instanceVariable1 = instanceVariable1;
        this.instanceVariable2 = 0;
    }
}

public class Bar : Foo
{
    public int instanceVariable3;
    public int instanceVariable4 = 0;
    public static int staticVariable2 = 0;

    public override void instanceMethod()
    {
        base.instanceMethod();
    }

    public void instanceMethod3()
    {
    }

    public Bar(int instanceVariable1, int instanceVariable3) : base(instanceVariable1)
    {
        this.instanceVariable3 = instanceVariable3;
        this.instanceVariable4 = 0;
    }
}
").csharp

# Basic interface usage
test("
@export
class Foo :: Bar {
  def instanceMethod {}
  def instanceMethod(x int) {}
  def instanceMethod2 {}
}

@export
interface Bar {
  def instanceMethod
  def instanceMethod(x int)
}
", "
public class Foo : Bar
{
    public void instanceMethod()
    {
    }

    public void instanceMethod(int x)
    {
    }

    public void instanceMethod2()
    {
    }

    public Foo()
    {
    }
}

public interface Bar
{
    void instanceMethod();

    void instanceMethod(int x);
}
").csharp

# Type wrapping
test("
type Foo : double {
  def scaleBy(scale Foo) Foo {
    return ((self as double) * (scale as double)) as Foo
  }
}

namespace Foo {
  const FOO = 0.5 as Foo
}

@export
def test(x double) Foo {
  return (x as Foo).scaleBy(Foo.FOO)
}
", "
public static class Foo
{
    public static double FOO = 0.5;

    public static double scaleBy(double self, double scale)
    {
        return self * scale;
    }
}

public class Globals
{
    public static double test(double x)
    {
        return Foo.scaleBy(x, Foo.FOO);
    }
}
").csharp

# Casting between enums and integers must be explicit
test("
enum Foo {
  FOO
}

@export
def test Foo {
  var x = Foo.FOO
  return ((x as int) * 1) as Foo
}
", "
public enum Foo
{
    FOO = 0,
}

public class Globals
{
    public static Foo test()
    {
        Foo x = Foo.FOO;
        return (Foo)((int)x * 1);
    }
}
").csharp

# Lists and maps
test("
@export
def foo {
  var x = [1, 2, 3]
  var y = {1: 2, 3: 4}
  var z = {\"1\": 2, \"3\": 4}
}
", "
using System.Collections.Generic;

public class in_StringMap
{
    public static Dictionary<string, T> insert<T>(Dictionary<string, T> self, string key, T value)
    {
        self.Add(key, value);
        return self;
    }
}

public class in_IntMap
{
    public static Dictionary<int, T> insert<T>(Dictionary<int, T> self, int key, T value)
    {
        self.Add(key, value);
        return self;
    }
}

public class Globals
{
    public static void foo()
    {
        List<int> x = new List<int> { 1, 2, 3 };
        Dictionary<int, int> y = in_IntMap.insert(in_IntMap.insert(new Dictionary<int, int>(), 1, 2), 3, 4);
        Dictionary<string, int> z = in_StringMap.insert(in_StringMap.insert(new Dictionary<string, int>(), \"1\", 2), \"3\", 4);
    }
}
").csharp

# Inheriting from a dynamically-specified type
test("
@export
class Error : dynamic.System.Exception {
}
", "
public class Error : System.Exception
{
    public Error()
    {
    }
}
").csharp

# Test math constants
test("
@export
def main {
  dynamic.foo(Math.NAN, Math.INFINITY, -Math.INFINITY)
  dynamic.foo(Math.NAN.toString, Math.INFINITY.toString, (-Math.INFINITY).toString)
}
", "
public class Globals
{
    public static void main()
    {
        foo(0.0 / 0.0, 1.0 / 0.0, -(1.0 / 0.0));
        foo((0.0 / 0.0).ToString(), (1.0 / 0.0).ToString(), (-(1.0 / 0.0)).ToString());
    }
}
").csharp.inlineAllFunctions

# Test math constants
test("
@export
def main {
  dynamic.foo(Math.NAN, Math.INFINITY, -Math.INFINITY)
  dynamic.foo(Math.NAN.toString, Math.INFINITY.toString, (-Math.INFINITY).toString)
}
", "
using System;

public class Globals
{
    public static void main()
    {
        foo(Double.NaN, Double.PositiveInfinity, Double.NegativeInfinity);
        foo(Double.NaN.ToString(), Double.PositiveInfinity.ToString(), Double.NegativeInfinity.ToString());
    }
}
").csharp.inlineAllFunctions.foldAllConstants

# Test math toString
test("
@export
def main {
  dynamic.foo(0.toString, 1.0.toString, (-1.0).toString, 0.5.toString, (-0.5).toString)
}
", "
public class Globals
{
    public static void main()
    {
        foo(0.ToString(), 1.0.ToString(), (-1.0).ToString(), 0.5.ToString(), (-0.5).ToString());
    }
}
").csharp

# Test math toString
test("
@export
def main {
  dynamic.foo(0.toString, 1.0.toString, (-1.0).toString, 0.5.toString, (-0.5).toString)
}
", "
public class Globals
{
    public static void main()
    {
        foo(\"0\", 1.0.ToString(), (-1.0).ToString(), 0.5.ToString(), (-0.5).ToString());
    }
}
").csharp.foldAllConstants

# Double literals must be emitted with a decimal point
test("
@export
def main(x double) {
  x = 1.0 / 2.0
  x = 1e100 / 2e100
  x = 1e-100 / 2e-100
  x = 1.5 / 2.5
  x = 1.5e100 / 2.5e100
  x = 1.5e-100 / 2.5e-100
}
", "
public class Globals
{
    public static void main(double x)
    {
        x = 1.0 / 2.0;
        x = 1.0e+100 / 2.0e+100;
        x = 1.0e-100 / 2.0e-100;
        x = 1.5 / 2.5;
        x = 1.5e+100 / 2.5e+100;
        x = 1.5e-100 / 2.5e-100;
    }
}
").csharp

# Check for a crash when converting switch statements to if chains
test("
@export
def main {
  switch \"a\" {
    case \"b\" {}
    case \"c\" {}
    default {}
  }
}
", "
public class Globals
{
    public static void main()
    {
        string value = \"a\";

        if (value == \"b\")
        {
        }
        else if (value == \"c\")
        {
        }
        else
        {
        }
    }
}
").csharp

# Check code generation for flags types
test("
flags Foo {
  X0
  X1
  X2
  X3
  X4
  X5
  X6
  X7
  X8
  X9

  X10
  X11
  X12
  X13
  X14
  X15
  X16
  X17
  X18
  X19

  X20
  X21
  X22
  X23
  X24
  X25
  X26
  X27
  X28
  X29

  X30
  X31
}

@export
def test {
  if !((.X0 | .X1) in (Foo.X30 | .X31)) {
    var x = Foo.X0
    x = .X1 | .X2
    x &= ~.X3
  }
}
", "
public static class Foo
{
    public const int X0 = 1;
    public const int X1 = 2;
    public const int X2 = 4;
    public const int X3 = 8;
    public const int X30 = 1073741824;
    public const int X31 = -2147483648;
}

public class Globals
{
    public static void test()
    {
        if (!(((Foo.X0 | Foo.X1) & (Foo.X30 | Foo.X31)) != 0))
        {
            int x = Foo.X0;
            x = Foo.X1 | Foo.X2;
            x &= ~Foo.X3;
        }
    }
}
").csharp

  }
}
