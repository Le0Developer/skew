namespace Skew.Tests {
  def testLibrary {
    ################################################################################
    # Math

    testExpect("Math.abs(2.5)", Math.abs(2.5), 2.5)
    testExpect("Math.abs(-2.5)", Math.abs(-2.5), 2.5)
    testExpect("Math.abs(2)", Math.abs(2), 2)
    testExpect("Math.abs(-2)", Math.abs(-2), 2)

    testExpect("Math.acos(-1)", Math.acos(-1), Math.PI)
    testExpect("Math.acos(0)", Math.acos(0), Math.PI / 2)
    testExpect("Math.acos(1)", Math.acos(1), 0)

    testExpect("Math.asin(-1)", Math.asin(-1), -Math.PI / 2)
    testExpect("Math.asin(0)", Math.asin(0), 0)
    testExpect("Math.asin(1)", Math.asin(1), Math.PI / 2)

    testExpect("Math.atan(0)", Math.atan(0), 0)

    testExpect("Math.atan2(0, 1)", Math.atan2(0, 1), 0)
    testExpect("Math.atan2(1, 0)", Math.atan2(1, 0), Math.PI / 2)
    testExpect("Math.atan2(0, -1)", Math.atan2(0, -1), Math.PI)
    testExpect("Math.atan2(-1, 0)", Math.atan2(-1, 0), -Math.PI / 2)

    testExpect("Math.sin(0)", Math.sin(0), 0)
    testExpect("Math.cos(0)", Math.cos(0), 1)
    testExpect("Math.tan(0)", Math.tan(0), 0)

    testExpect("Math.floor(1.5)", Math.floor(1.5), 1)
    testExpect("Math.floor(-1.5)", Math.floor(-1.5), -2)
    testExpect("Math.ceil(1.5)", Math.ceil(1.5), 2)
    testExpect("Math.ceil(-1.5)", Math.ceil(-1.5), -1)
    testExpect("Math.round(1.25)", Math.round(1.25), 1)
    testExpect("Math.round(-1.25)", Math.round(-1.25), -1)
    testExpect("Math.round(1.75)", Math.round(1.75), 2)
    testExpect("Math.round(-1.75)", Math.round(-1.75), -2)

    testExpect("Math.exp(0)", Math.exp(0), 1)
    testExpect("Math.exp(1)", Math.exp(1), Math.E)
    testExpect("Math.log(1)", Math.log(1), 0)
    testExpect("Math.log(Math.E)", Math.log(Math.E), 1)
    testExpect("Math.pow(2, 3)", Math.pow(2, 3), 8)
    testExpect("Math.sqrt(4)", Math.sqrt(4), 2)
    testExpect("Math.random >= 0 && Math.random < 1", Math.random >= 0 && Math.random < 1, true)

    testExpect("Math.max(-2.0, 3.0)", Math.max(-2.0, 3.0), 3)
    testExpect("Math.max(-2, 3)", Math.max(-2, 3), 3)
    testExpect("Math.min(-2.0, 3.0)", Math.min(-2.0, 3.0), -2)
    testExpect("Math.min(-2, 3)", Math.min(-2, 3), -2)

    testExpect("Math.E", Math.E, 2.718281828459045)
    testExpect("Math.INFINITY", Math.INFINITY, 1 / 0.0)
    testExpect("Math.NAN", Math.NAN, 0 / 0.0)
    testExpect("Math.PI", Math.PI, 3.141592653589793)
    testExpect("Math.SQRT_2", Math.SQRT_2, 1.4142135623730951)

    ################################################################################
    # bool

    # Unary
    testExpect("!false", !false, true)
    testExpect("!true", !true, false)

    # Binary
    testExpect("false && false", false && false, false)
    testExpect("false && true", false && true, false)
    testExpect("true && false", true && false, false)
    testExpect("true && true", true && true, true)
    testExpect("false || false", false || false, false)
    testExpect("false || true", false || true, true)
    testExpect("true || false", true || false, true)
    testExpect("true || true", true || true, true)

    # Short-circuit
    test("true || (=> { throw null })()", expectString => expectString((true || (=> { throw null })()).toString, "true"))
    test("false && (=> { throw null })()", expectString => expectString((false && (=> { throw null })()).toString, "false"))

    # toString
    testExpect("false.toString", false.toString, "false")
    testExpect("true.toString", true.toString, "true")

    ################################################################################
    # int

    # Literals
    testExpect("'a'", 'a', 97)
    testExpect("0b101", 0b101, 5)
    testExpect("-0b101", -0b101, -5)
    testExpect("0o123", 0o123, 83)
    testExpect("-0o123", -0o123, -83)
    testExpect("0x123", 0x123, 291)
    testExpect("-0x123", -0x123, -291)

    # Unary
    testExpect("+2", +2, 2)
    testExpect("3++", ((x int) int => {
      x++
      return x
    })(3), 4)
    testExpect("++3", ((x int) int => {
      ++x
      return x
    })(3), 4)
    testExpect("-2", -2, -2)
    testExpect("3--", ((x int) int => {
      x--
      return x
    })(3), 2)
    testExpect("--3", ((x int) int => {
      --x
      return x
    })(3), 2)
    testExpect("~2", ~2, -3)

    # Binary
    testExpect("5 + 3", 5 + 3, 8)
    testExpect("5 - 3", 5 - 3, 2)
    testExpect("5 * 3", 5 * 3, 15)
    testExpect("5 / 3", 5 / 3, 1)
    testExpect("5 % 3", 5 % 3, 2)
    testExpect("-5 % 3", -5 % 3, -2)
    testExpect("5 << 3", 5 << 3, 40)
    testExpect("5 >> 1", 5 >> 1, 2)
    testExpect("-5 >> 1", -5 >> 1, -3)
    testExpect("5 >>> 1", 5 >>> 1, 2)
    testExpect("-5 >>> 1", -5 >>> 1, 0x7FFFFFFD)
    testExpect("2 ** 3", 2 ** 3, 8)
    testExpect("44 | 33", 44 | 33, 45)
    testExpect("44 & 33", 44 & 33, 32)
    testExpect("44 ^ 33", 44 ^ 33, 13)
    testExpect("-44 | 33", -44 | 33, -11)
    testExpect("-44 & 33", -44 & 33, 0)
    testExpect("-44 ^ 33", -44 ^ 33, -11)
    testExpect("-44 | -33", -44 | -33, -33)
    testExpect("-44 & -33", -44 & -33, -44)
    testExpect("-44 ^ -33", -44 ^ -33, 11)
    testExpect("2 <=> 5", 2 <=> 5, -1)
    testExpect("2 <=> 2", 2 <=> 2, 0)
    testExpect("5 <=> 2", 5 <=> 2, 1)
    testExpect("-0x7FFFFFFF <=> 0x7FFFFFFF", -0x7FFFFFFF <=> 0x7FFFFFFF, -1)

    # Binary assignment
    testExpect("5 += 3", ((x int) int => {
      x += 3
      return x
    })(5), 8)
    testExpect("5 -= 3", ((x int) int => {
      x -= 3
      return x
    })(5), 2)
    testExpect("5 *= 3", ((x int) int => {
      x *= 3
      return x
    })(5), 15)
    testExpect("5 /= 3", ((x int) int => {
      x /= 3
      return x
    })(5), 1)
    testExpect("5 %= 3", ((x int) int => {
      x %= 3
      return x
    })(5), 2)
    testExpect("2 **= 3", ((x int) int => {
      x **= 3
      return x
    })(2), 8)
    testExpect("44 |= 33", ((x int) int => {
      x |= 33
      return x
    })(44), 45)
    testExpect("44 &= 33", ((x int) int => {
      x &= 33
      return x
    })(44), 32)
    testExpect("44 ^= 33", ((x int) int => {
      x ^= 33
      return x
    })(44), 13)
    testExpect("5 <<= 3", ((x int) int => {
      x <<= 3
      return x
    })(5), 40)
    testExpect("5 >>= 1", ((x int) int => {
      x >>= 1
      return x
    })(5), 2)
    testExpect("-5 >>= 1", ((x int) int => {
      x >>= 1
      return x
    })(-5), -3)
    testExpect("5 >>>= 1", ((x int) int => {
      x >>>= 1
      return x
    })(5), 2)
    testExpect("-5 >>>= 1", ((x int) int => {
      x >>>= 1
      return x
    })(-5), 0x7FFFFFFD)

    ################################################################################
    # double

    # Unary
    testExpect("+2.0", +2.0, 2.0)
    testExpect("x++", ((x double) double => {
      x++
      return x
    })(3.5), 4.5)
    testExpect("++x", ((x double) double => {
      ++x
      return x
    })(3.5), 4.5)
    testExpect("-2.0", -2.0, -2.0)
    testExpect("x--", ((x double) double => {
      x--
      return x
    })(3.5), 2.5)
    testExpect("--x", ((x double) double => {
      --x
      return x
    })(3.5), 2.5)

    # Binary
    testExpect("5.5 + 3.0", 5.5 + 3.0, 8.5)
    testExpect("5.5 - 3.0", 5.5 - 3.0, 2.5)
    testExpect("5.5 * 3.0", 5.5 * 3.0, 16.5)
    testExpect("5.0 / 3.0", 5.0 / 3.0, 1.6666666666666667)
    testExpect("2.0 ** 3.0", 2.0 ** 3.0, 8)
    testExpect("2.0 ** 0.5", 2.0 ** 0.5, 1.4142135623730951)
    testExpect("2.0 <=> 5.5", 2.0 <=> 5.5, -1)
    testExpect("2.0 <=> 2.0", 2.0 <=> 2.0, 0)
    testExpect("5.5 <=> 2.0", 5.5 <=> 2.0, 1)

    # Binary assignment
    testExpect("5.5 += 3.0", ((x double) double => {
      x += 3.0
      return x
    })(5.5), 8.5)
    testExpect("5.5 -= 3.0", ((x double) double => {
      x -= 3.0
      return x
    })(5.5), 2.5)
    testExpect("5.5 *= 3.0", ((x double) double => {
      x *= 3.0
      return x
    })(5.5), 16.5)
    testExpect("5.0 /= 3.0", ((x double) double => {
      x /= 3.0
      return x
    })(5.0), 1.6666666666666667)
    testExpect("2.0 **= 3.0", ((x double) double => {
      x **= 3
      return x
    })(2), 8)

    # isFinite
    testExpect("0.0.isFinite", 0.0.isFinite, true)
    testExpect("Math.NAN.isFinite", Math.NAN.isFinite, false)
    testExpect("Math.INFINITY.isFinite", Math.INFINITY.isFinite, false)
    testExpect("(-Math.INFINITY).isFinite", (-Math.INFINITY).isFinite, false)

    # isNaN
    testExpect("0.0.isNaN", 0.0.isNaN, false)
    testExpect("Math.NAN.isNaN", Math.NAN.isNaN, true)
    testExpect("Math.INFINITY.isNaN", Math.INFINITY.isNaN, false)
    testExpect("(-Math.INFINITY).isNaN", (-Math.INFINITY).isNaN, false)

    ################################################################################
    # string

    # Binary
    testExpect("\"a\\0b\" + \"x\\0y\"", "a\0b" + "x\0y", "a\0bx\0y")
    testExpect("\"a\\0b\" += \"x\\0y\"", ((x string) string => {
      x += "x\0y"
      return x
    })("a\0b"), "a\0bx\0y")
    testExpect("\"\\0a\" <=> \"\\0x\"", "\0a" <=> "\0x", -1)
    testExpect("\"\\0a\" <=> \"\\0a\"", "\0a" <=> "\0a", 0)
    testExpect("\"\\0x\" <=> \"\\0a\"", "\0x" <=> "\0a", 1)

    # count
    testExpect("\"a\\0b\".count", "a\0b".count, 3)

    # in
    testExpect("\"a\\0b\" in \"a\\0\"", "a\0b" in "a\0", false)
    testExpect("\"a\\0b\" in \"a\\0b\"", "a\0b" in "a\0b", true)
    testExpect("\"a\\0b\" in \"a\\0bc\"", "a\0b" in "a\0bc", true)
    testExpect("\"a\\0b\" in \" a\\0b\"", "a\0b" in " a\0b", true)
    testExpect("\"a\\0b\" in \" a\\0bc\"", "a\0b" in " a\0bc", true)

    # indexOf
    testExpect("\"a\\0\".indexOf(\"a\\0b\")", "a\0".indexOf("a\0b"), -1)
    testExpect("\"a\\0b\".indexOf(\"a\\0b\")", "a\0b".indexOf("a\0b"), 0)
    testExpect("\" a\\0b \".indexOf(\"a\\0b\")", " a\0b ".indexOf("a\0b"), 1)
    testExpect("\" a\\0b a\\0b \".indexOf(\"a\\0b\")", " a\0b a\0b ".indexOf("a\0b"), 1)

    # lastIndexOf
    testExpect("\"a\\0\".lastIndexOf(\"a\\0b\")", "a\0".lastIndexOf("a\0b"), -1)
    testExpect("\"a\\0b\".lastIndexOf(\"a\\0b\")", "a\0b".lastIndexOf("a\0b"), 0)
    testExpect("\" a\\0b \".lastIndexOf(\"a\\0b\")", " a\0b ".lastIndexOf("a\0b"), 1)
    testExpect("\" a\\0b a\\0b \".lastIndexOf(\"a\\0b\")", " a\0b a\0b ".lastIndexOf("a\0b"), 5)

    # startsWith
    testExpect("\"a\\0\".startsWith(\"a\\0b\")", "a\0".startsWith("a\0b"), false)
    testExpect("\"a\\0b\".startsWith(\"a\\0b\")", "a\0b".startsWith("a\0b"), true)
    testExpect("\"a\\0bc\".startsWith(\"a\\0b\")", "a\0bc".startsWith("a\0b"), true)
    testExpect("\" a\\0b\".startsWith(\"a\\0b\")", " a\0b".startsWith("a\0b"), false)

    # endsWith
    testExpect("\"a\\0\".endsWith(\"a\\0b\")", "a\0".endsWith("a\0b"), false)
    testExpect("\"a\\0b\".endsWith(\"a\\0b\")", "a\0b".endsWith("a\0b"), true)
    testExpect("\"a\\0bc\".endsWith(\"a\\0b\")", "a\0bc".endsWith("a\0b"), false)
    testExpect("\" a\\0b\".endsWith(\"a\\0b\")", " a\0b".endsWith("a\0b"), true)

    # []
    testExpect("\"a\\0b\"[0]", "a\0b"[0], 'a')
    testExpect("\"a\\0b\"[1]", "a\0b"[1], '\0')
    testExpect("\"a\\0b\"[2]", "a\0b"[2], 'b')

    # get
    testExpect("\"a\\0b\".get(0)", "a\0b".get(0), "a")
    testExpect("\"a\\0b\".get(1)", "a\0b".get(1), "\0")
    testExpect("\"a\\0b\".get(2)", "a\0b".get(2), "b")

    # slice
    testExpect("\"a\\0b\".slice(1)", "a\0b".slice(1), "\0b")
    testExpect("\"a\\0b\".slice(1, 2)", "a\0b".slice(1, 2), "\0")

    # Unicode
    testExpect("\"a\\0b\".codePoints", "a\0b".codePoints, ['a', '\0', 'b'])
    testExpect("\"a\\0b\".codeUnits", "a\0b".codeUnits, ['a', '\0', 'b'])
    testExpect("string.fromCodePoint('\\0')", string.fromCodePoint('\0'), "\0")
    testExpect("string.fromCodePoint('a')", string.fromCodePoint('a'), "a")
    testExpect("string.fromCodeUnit('\\0')", string.fromCodeUnit('\0'), "\0")
    testExpect("string.fromCodeUnit('a')", string.fromCodeUnit('a'), "a")
    testExpect("string.fromCodePoints(['a', '\\0', 'b'])", string.fromCodePoints(['a', '\0', 'b']), "a\0b")
    testExpect("string.fromCodeUnits(['a', '\\0', 'b'])", string.fromCodeUnits(['a', '\0', 'b']), "a\0b")

    # Other
    testExpect("\"a \\0 b\".split(\" \")", "a \0 b".split(" "), ["a", "\0", "b"])
    testExpect("\" a \\0 b \".split(\" \")", " a \0 b ".split(" "), ["", "a", "\0", "b", ""])
    testExpect("\" \".join([\"a\", \"\\0\", \"b\"])", " ".join(["a", "\0", "b"]), "a \0 b")
    testExpect("\" \".join([\"\", \"a\", \"\\0\", \"b\", \"\"])", " ".join(["", "a", "\0", "b", ""]), " a \0 b ")
    testExpect("\"a\\0b\".repeat(3)", "a\0b".repeat(3), "a\0ba\0ba\0b")
    testExpect("\"a\\0b\\0c\".replaceAll(\"\\0\", \"\\0\\0\")", "a\0b\0c".replaceAll("\0", "\0\0"), "a\0\0b\0\0c")
    testExpect("\"a\\0B\\0c\\0D\".toUpperCase", "a\0B\0c\0D".toUpperCase, "A\0B\0C\0D")
    testExpect("\"a\\0B\\0c\\0D\".toLowerCase", "a\0B\0c\0D".toLowerCase, "a\0b\0c\0d")
  }
}
