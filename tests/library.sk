namespace Skew.Tests {
  def testExpect(text string, answer bool, expected bool) {
    test(text, expectString => expectString(answer.toString, expected.toString))
  }

  def testExpect(text string, answer double, expected double) {
    test(text, expectString => expectString(answer.toString, expected.toString))
  }

  def testExpect(text string, answer string, expected string) {
    test(text, expectString => expectString(answer, expected))
  }

  def testLibrary {
    ################################################################################
    # Math

    testExpect("Math.abs(2.5)", Math.abs(2.5), 2.5)
    testExpect("Math.abs(-2.5)", Math.abs(-2.5), 2.5)
    testExpect("Math.abs(2)", Math.abs(2), 2)
    testExpect("Math.abs(-2)", Math.abs(-2), 2)

    testExpect("Math.acos(-1)", Math.acos(-1), Math.PI)
    testExpect("Math.acos(0)", Math.acos(0), Math.PI / 2)
    testExpect("Math.acos(1)", Math.acos(1), 0)

    testExpect("Math.asin(-1)", Math.asin(-1), -Math.PI / 2)
    testExpect("Math.asin(0)", Math.asin(0), 0)
    testExpect("Math.asin(1)", Math.asin(1), Math.PI / 2)

    testExpect("Math.atan(0)", Math.atan(0), 0)

    testExpect("Math.atan2(0, 1)", Math.atan2(0, 1), 0)
    testExpect("Math.atan2(1, 0)", Math.atan2(1, 0), Math.PI / 2)
    testExpect("Math.atan2(0, -1)", Math.atan2(0, -1), Math.PI)
    testExpect("Math.atan2(-1, 0)", Math.atan2(-1, 0), -Math.PI / 2)

    testExpect("Math.sin(0)", Math.sin(0), 0)
    testExpect("Math.cos(0)", Math.cos(0), 1)
    testExpect("Math.tan(0)", Math.tan(0), 0)

    testExpect("Math.floor(1.5)", Math.floor(1.5), 1)
    testExpect("Math.floor(-1.5)", Math.floor(-1.5), -2)
    testExpect("Math.ceil(1.5)", Math.ceil(1.5), 2)
    testExpect("Math.ceil(-1.5)", Math.ceil(-1.5), -1)
    testExpect("Math.round(1.25)", Math.round(1.25), 1)
    testExpect("Math.round(-1.25)", Math.round(-1.25), -1)
    testExpect("Math.round(1.75)", Math.round(1.75), 2)
    testExpect("Math.round(-1.75)", Math.round(-1.75), -2)

    testExpect("Math.exp(0)", Math.exp(0), 1)
    testExpect("Math.exp(1)", Math.exp(1), Math.E)
    testExpect("Math.log(1)", Math.log(1), 0)
    testExpect("Math.log(Math.E)", Math.log(Math.E), 1)
    testExpect("Math.pow(2, 3)", Math.pow(2, 3), 8)
    testExpect("Math.sqrt(4)", Math.sqrt(4), 2)
    testExpect("Math.random >= 0 && Math.random < 1", Math.random >= 0 && Math.random < 1, true)

    testExpect("Math.max(-2.0, 3.0)", Math.max(-2.0, 3.0), 3)
    testExpect("Math.max(-2, 3)", Math.max(-2, 3), 3)
    testExpect("Math.min(-2.0, 3.0)", Math.min(-2.0, 3.0), -2)
    testExpect("Math.min(-2, 3)", Math.min(-2, 3), -2)

    testExpect("Math.E", Math.E, 2.718281828459045)
    testExpect("Math.INFINITY", Math.INFINITY, 1 / 0.0)
    testExpect("Math.NAN", Math.NAN, 0 / 0.0)
    testExpect("Math.PI", Math.PI, 3.141592653589793)
    testExpect("Math.SQRT_2", Math.SQRT_2, 1.4142135623730951)
  }
}
