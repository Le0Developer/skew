# This is a rough port of the raytracer example from http://www.typescriptlang.org/Playground

namespace Math {
  def trunc(x double) int {
    return x as int
  }
}

def render(width int, height int, pixels Int32Array) {
  var scene = Scene.new(Camera.new(Vector.new(3, 2, 4), Vector.new(-1, 0.5, 0)))

  scene.elements = [
    Plane.new(Checkerboard.new, Vector.new(0, 1, 0), 0),
    Sphere.new(Shiny.new, Vector.new(0, 1, -0.25), 1),
    Sphere.new(Shiny.new, Vector.new(-1, 0.5, 1.5), 0.5),
  ]

  scene.lights = [
    Light.new(Vector.new(-2, 2.5, 0), Vector.new(0.49, 0.07, 0.07)),
    Light.new(Vector.new(1.5, 2.5, 1.5), Vector.new(0.07, 0.07, 0.49)),
    Light.new(Vector.new(1.5, 2.5, -1.5), Vector.new(0.07, 0.49, 0.071)),
    Light.new(Vector.new(0, 3.5, 0), Vector.new(0.21, 0.21, 0.35)),
  ]

  var i = 0
  for y in 0..height {
    var screenY = (y * 2.0 + 1 - height) / width
    for x in 0..width {
      var screenX = (x * 2.0 + 1 - width) / width
      pixels[i++] = scene.trace2D(screenX, -screenY).pack
    }
  }
}

class Vector {
  const x double
  const y double
  const z double

  def *(s double) Vector {
    return Vector.new(x * s, y * s, z * s)
  }

  def /(s double) Vector {
    return self * (1 / s)
  }

  def +(v Vector) Vector {
    return Vector.new(x + v.x, y + v.y, z + v.z)
  }

  def -(v Vector) Vector {
    return Vector.new(x - v.x, y - v.y, z - v.z)
  }

  def *(v Vector) Vector {
    return Vector.new(x * v.x, y * v.y, z * v.z)
  }

  def cross(v Vector) Vector {
    return Vector.new(y * v.z - z * v.y, z * v.x - x * v.z, x * v.y - y * v.x)
  }

  def dot(v Vector) double {
    return x * v.x + y * v.y + z * v.z
  }

  def length double {
    return Math.sqrt(dot(self))
  }

  def unit Vector {
    return self / length
  }

  def reflectAbout(n Vector) Vector {
    return self - n * (2 * dot(n))
  }

  def pack int {
    return clamp(x) | clamp(y) << 8 | clamp(z) << 16 | 0xFF000000
  }
}

namespace Vector {
  def clamp(x double) int {
    if x < 0 { return 0 }
    if x > 1 { return 255 }
    return Math.trunc(255.999 * x)
  }
}

namespace Colors {
  const WHITE = Vector.new(1, 1, 1)
  const BLACK = Vector.new(0, 0, 0)
  const GRAY = Vector.new(0.5, 0.5, 0.5)
}

class Light {
  var point Vector
  var color Vector
}

class Intersection {
  var t double
  var element Element
}

class SurfaceInfo {
  var diffuse Vector
  var specular Vector
  var reflect double
  var roughness double
}

interface Surface {
  def infoAt(point Vector) SurfaceInfo
}

class Checkerboard :: Surface {
  def infoAt(point Vector) SurfaceInfo {
    if ((Math.trunc(point.x) ^ Math.trunc(point.z)) & 1) != 0 {
      return WHITE_INFO
    }
    return BLACK_INFO
  }
}

namespace Checkerboard {
  const WHITE_INFO = SurfaceInfo.new(Colors.WHITE, Colors.WHITE, 0.1, 150)
  const BLACK_INFO = SurfaceInfo.new(Colors.BLACK, Colors.WHITE, 0.7, 150)
}

class Shiny :: Surface {
  def infoAt(point Vector) SurfaceInfo {
    return INFO
  }
}

namespace Shiny {
  const INFO = SurfaceInfo.new(Colors.WHITE, Colors.GRAY, 0.7, 250)
}

class Element {
  var surface Surface

  def intersect(origin Vector, ray Vector) Intersection
  def normalAt(point Vector) Vector
}

class Plane : Element {
  var normal Vector
  var offset double

  over intersect(origin Vector, ray Vector) Intersection {
    var t = -(normal.dot(origin) + offset) / normal.dot(ray)
    if t > 0 {
      return Intersection.new(t, self)
    }
    return null
  }

  over normalAt(point Vector) Vector {
    return Vector.new(0, 1, 0)
  }
}

class Sphere : Element {
  var center Vector
  var radius double

  over intersect(origin Vector, ray Vector) Intersection {
    var offset = origin - center
    var a = ray.dot(ray)
    var b = 2 * ray.dot(offset)
    var c = offset.dot(offset) - radius * radius
    var discriminant = b * b - 4 * a * c
    if discriminant > 0 {
      var t = (-b - Math.sqrt(discriminant)) / (2 * a)
      if t > 0 {
        return Intersection.new(t, self)
      }
    }
    return null
  }

  over normalAt(point Vector) Vector {
    return (point - center) / radius
  }
}

class Camera {
  var point Vector
  var forward Vector
  var right Vector
  var up Vector

  def new(point Vector, lookAt Vector) {
    self.point = point
    forward = (lookAt - point).unit
    right = forward.cross(Vector.new(0, -1, 0)).unit
    up = forward.cross(right).unit
  }
}

class Scene {
  var elements List<Element> = []
  var lights List<Light> = []
  var camera Camera

  def intersect(origin Vector, ray Vector, ignore Element) Intersection {
    var closest Intersection = null
    for element in elements {
      if element != ignore {
        var hit = element.intersect(origin, ray)
        if hit != null && (closest == null || hit.t < closest.t) {
          closest = hit
        }
      }
    }
    return closest
  }

  def trace3D(origin Vector, ray Vector, ignore Element, depth int) Vector {
    var hit = intersect(origin, ray, ignore)
    if hit == null {
      return Colors.BLACK
    }

    var point = origin + ray * hit.t
    var normal = hit.element.normalAt(point)
    var reflected = ray.reflectAbout(normal)
    var info = hit.element.surface.infoAt(point)
    var color = Colors.BLACK

    for light in lights {
      var delta = light.point - point

      var shadow = intersect(point, delta, hit.element)
      if shadow != null && shadow.t < 1 {
        continue
      }
      delta = delta.unit

      # Diffuse
      var weight = Math.max(0, delta.dot(normal))
      color = color + light.color * info.diffuse * weight

      # Specular
      weight = Math.pow(Math.max(0, delta.dot(reflected)), info.roughness)
      color = color + light.color * info.specular * weight
    }

    # Reflection
    if depth > 0 {
      var recursive = trace3D(point, reflected, hit.element, depth - 1)
      color = color + recursive * info.reflect
    }

    return color
  }

  def trace2D(x double, y double) Vector {
    var ray = camera.forward + camera.right * x + camera.up * y
    return trace3D(camera.point, ray.unit, null, 5)
  }
}

@entry
def main {
  var canvas = document.createElement("canvas")
  var context = canvas.getContext("2d")
  var width = 640
  var height = 480
  var imageData = context.createImageData(width, height)
  canvas.width = width
  canvas.height = height
  render(width, height, Int32Array.new(imageData.data.buffer))
  context.putImageData(imageData, 0, 0)
  document.body.appendChild(canvas)
}

@import
class Int32Array {
  def new(length int)
  def []=(index int, value int)
}

@import
var document dynamic
