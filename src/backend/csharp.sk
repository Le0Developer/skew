namespace Skew {
  class CSharpEmitter : Emitter {
    const options CompilerOptions
    const cache TypeCache

    over visit(global ObjectSymbol) {
      indentAmount = "    "

      var globals = ObjectSymbol.new(.OBJECT_NAMESPACE, global.scope.generateName("Globals"))
      globals.parent = global
      global.objects.append(globals)

      # Move global functions and variables into their own namespace
      global.functions.removeIf(function => {
        if function.kind != .FUNCTION_ANNOTATION {
          function.parent = globals
          globals.functions.append(function)
          return true
        }
        return false
      })
      global.variables.removeIf(variable => {
        variable.parent = globals
        globals.variables.append(variable)
        return true
      })

      # Generate the entry point
      var entryPoint = cache.entryPointSymbol
      if entryPoint != null {
        entryPoint.name = "Main"

        # The entry point in C# takes an array, not a list
        if entryPoint.arguments.count == 1 {
          var argument = entryPoint.arguments.first
          var array = VariableSymbol.new(.VARIABLE_ARGUMENT, argument.name)
          array.type = Node.createName("string[]")
          array.resolvedType = .DYNAMIC
          entryPoint.arguments = [array]

          # Create the list from the array
          if entryPoint.block != null {
            array.name = entryPoint.scope.generateName(array.name)
            argument.kind = .VARIABLE_LOCAL
            argument.value = Node.createCall(Node.createDot(Node.createType(argument.resolvedType), "new"), [Node.createSymbolReference(array)])
            entryPoint.block.insertChild(0, Node.createVar(argument))
          }
        }
      }

      # Avoid emitting unnecessary stuff
      shakingPass(global, entryPoint, .USE_TYPES)
      markVirtualFunctions(global)

      # All code in C# is inside objects, so just emit objects recursively
      for object in global.objects {
        emitObject(object)
      }

      # Emit a single file if requested
      if options.outputDirectory == "" {
        createSource(options.outputFile)
      }
    }

    @private {
      var previousNode Node = null
      var previousSymbol Symbol = null

      def emitNewlineBeforeSymbol(symbol Symbol) {
        if previousSymbol != null && (!previousSymbol.kind.isVariable || !symbol.kind.isVariable || symbol.comments != null) {
          emit("\n")
        }
        previousSymbol = null
      }

      def emitNewlineAfterSymbol(symbol Symbol) {
        previousSymbol = symbol
      }

      def isCompactNodeKind(kind NodeKind) bool {
        return kind == .EXPRESSION || kind == .VAR || kind.isJump
      }

      def emitNewlineBeforeStatement(node Node) {
        if previousNode != null && (node.comments != null || !isCompactNodeKind(previousNode.kind) || !isCompactNodeKind(node.kind)) {
          emit("\n")
        }
        previousNode = null
      }

      def emitNewlineAfterStatement(node Node) {
        previousNode = node
      }

      def emitComments(comments List<string>) {
        if comments != null {
          for comment in comments {
            emit(indent + "//" + comment)
          }
        }
      }

      def emitObject(symbol ObjectSymbol) {
        if symbol.isImported {
          return
        }

        # Global functions and variables have to be in classes, not namespaces
        if symbol.kind == .OBJECT_NAMESPACE && (!symbol.functions.isEmpty || !symbol.variables.isEmpty || symbol.parent.kind == .OBJECT_CLASS) {
          symbol.kind = .OBJECT_CLASS
        }

        emitNewlineBeforeSymbol(symbol)
        emitComments(symbol.comments)
        if symbol.kind != .OBJECT_NAMESPACE {
          emit(indent + "public ")
        }
        if symbol.isAbstract {
          emit("abstract ")
        }
        switch symbol.kind {
          case .OBJECT_CLASS { emit("class ") }
          case .OBJECT_ENUM { emit("enum ") }
          case .OBJECT_INTERFACE { emit("interface ") }
          case .OBJECT_NAMESPACE { emit("namespace ") }
          default { assert(false) }
        }
        emit(mangleName(symbol))
        emitTypeParameters(symbol.parameters)
        if symbol.base != null {
          emit(" : ")
          emitExpressionOrType(symbol.base, symbol.baseClass != null ? symbol.baseClass.resolvedType : null)
        }
        emit("\n" + indent + "{\n")
        increaseIndent
        for object in symbol.objects {
          emitObject(object)
        }
        for variable in symbol.variables {
          emitVariable(variable)
        }
        for function in symbol.functions {
          emitFunction(function)
        }
        decreaseIndent
        emit(indent + "}\n")
        emitNewlineAfterSymbol(symbol)

        # Emit each object into its own file if requested
        if options.outputDirectory != "" {
          createSource(options.outputDirectory + "/" + fullName(symbol) + ".cs")
        }
      }

      def emitTypeParameters(parameters List<ParameterSymbol>) {
        if parameters != null {
          emit("<")
          for parameter in parameters {
            if parameter != parameters.first {
              emit(", ")
            }
            emit(mangleName(parameter))
          }
          emit(">")
        }
      }

      def emitArgumentList(symbol FunctionSymbol) {
        emit("(")
        for argument in symbol.arguments {
          if argument != symbol.arguments.first {
            emit(", ")
          }
          emitExpressionOrType(argument.type, argument.resolvedType)
          emit(" " + mangleName(argument))
        }
        emit(")")
      }

      def emitVariable(symbol VariableSymbol) {
        if symbol.isImported {
          return
        }

        emitNewlineBeforeSymbol(symbol)
        emitComments(symbol.comments)
        if symbol.kind == .VARIABLE_ENUM {
          emit(indent + mangleName(symbol))
          if symbol.value != null {
            emit(" = ")
            emitExpression(symbol.value, .COMMA)
          }
          emit(",\n")
        } else {
          emit(indent + "public ")
          if symbol.kind == .VARIABLE_GLOBAL {
            emit("static ")
          }
          emitExpressionOrType(symbol.type, symbol.resolvedType)
          emit(" " + mangleName(symbol))
          if symbol.value != null {
            emit(" = ")
            emitExpression(symbol.value, .COMMA)
          }
          emit(";\n")
        }
        emitNewlineAfterSymbol(symbol)
      }

      def emitFunction(symbol FunctionSymbol) {
        if symbol.isImported {
          return
        }

        # C# has sane capture rules for "this" so no variable insertion is needed
        if symbol.self != null {
          symbol.self.name = "this"
          symbol.self.flags |= Symbol.IS_EXPORTED
        }

        emitNewlineBeforeSymbol(symbol)
        emitComments(symbol.comments)
        emit(indent + "public ")
        if symbol.kind == .FUNCTION_GLOBAL {
          emit("static ")
        }
        if symbol.kind != .FUNCTION_CONSTRUCTOR {
          if symbol.block == null {
            emit("abstract ")
          } else if symbol.overridden != null {
            emit("override ")
          } else if symbol.isVirtual {
            emit("virtual ")
          }
          emitExpressionOrType(symbol.returnType, symbol.resolvedType.returnType)
          emit(" ")
        }
        emit(mangleName(symbol))
        emitTypeParameters(symbol.parameters)
        emitArgumentList(symbol)

        var block = symbol.block
        if block == null {
          emit(";\n")
        }

        else {
          # Move the super constructor call out of the function body
          if symbol.kind == .FUNCTION_CONSTRUCTOR && !block.children.isEmpty {
            var first = block.children.first
            if first.kind == .EXPRESSION {
              var call = first.expressionValue
              if call.kind == .CALL && call.callValue.kind == .SUPER {
                emit(" : ")
                first.remove
                emitExpression(call, .LOWEST)
              }
            }
          }

          emit("\n")
          emitBlock(block)
          emit("\n")
        }

        emitNewlineAfterSymbol(symbol)
      }

      def emitType(type Type) {
        if type == null {
          emit("void")
        }

        else if type == .DYNAMIC {
          emit("dynamic")
        }

        else if type.kind == .LAMBDA {
          var returnType = type.returnType
          emit(returnType != null ? "System.Func<" : "System.Action<")
          for argumentType in type.argumentTypes {
            if argumentType != type.argumentTypes.first {
              emit(", ")
            }
            emitType(argumentType)
          }
          if returnType != null {
            if !type.argumentTypes.isEmpty {
              emit(", ")
            }
            emitType(returnType)
          }
          emit(">")
        }

        else {
          assert(type.kind == .SYMBOL)
          emit(fullName(type.symbol))

          if type.isParameterized {
            emit("<")

            if cache.isIntMap(type) || cache.isStringMap(type) {
              emit(cache.isIntMap(type) ? "int" : "string")
              emit(", ")
              emitType(type.substitutions.first)
            }

            else {
              for i in 0..type.substitutions.count {
                if i != 0 {
                  emit(", ")
                }
                emitType(type.substitutions[i])
              }
            }

            emit(">")
          }
        }
      }

      def emitExpressionOrType(node Node, type Type) {
        if node != null {
          emitExpression(node, .LOWEST)
        } else {
          emitType(type)
        }
      }

      def emitStatements(statements List<Node>) {
        previousNode = null

        for statement in statements {
          emitNewlineBeforeStatement(statement)
          emitComments(statement.comments)
          emitStatement(statement)
          emitNewlineAfterStatement(statement)
        }

        previousNode = null
      }

      def emitBlock(node Node) {
        assert(node.kind == .BLOCK)
        emit(indent + "{\n")
        increaseIndent
        emitStatements(node.children)
        decreaseIndent
        emit(indent + "}")
      }

      def emitIf(node Node) {
        emit("if (")
        emitExpression(node.ifTest, .LOWEST)
        emit(")\n")
        emitBlock(node.ifTrue)
        emit("\n")

        var block = node.ifFalse
        if block != null {
          var singleIf = block.children.count == 1 && block.children[0].kind == .IF ? block.children[0] : null
          if block.comments != null || singleIf != null && singleIf.comments != null {
            emit("\n")
            emitComments(block.comments)
            if singleIf != null {
              emitComments(singleIf.comments)
            }
          }
          emit(indent + "else")

          if singleIf != null {
            emit(" ")
            emitIf(singleIf)
          } else {
            emit("\n")
            emitBlock(block)
            emit("\n")
          }
        }
      }

      def emitStatement(node Node) {
        switch node.kind {
          case .VAR {
            var symbol = node.symbol.asVariableSymbol
            emit(indent)
            emitExpressionOrType(symbol.type, symbol.resolvedType)
            emit(" " + mangleName(symbol))
            if symbol.value != null {
              emit(" = ")
              emitExpression(symbol.value, .ASSIGN)
            }
            emit(";\n")
          }

          case .EXPRESSION {
            emit(indent)
            emitExpression(node.expressionValue, .LOWEST)
            emit(";\n")
          }

          case .BREAK {
            emit(indent + "break;\n")
          }

          case .CONTINUE {
            emit(indent + "continue;\n")
          }

          case .IF {
            emit(indent)
            emitIf(node)
          }

          case .SWITCH {
            var cases = node.children
            emit(indent + "switch (")
            emitExpression(node.switchValue, .LOWEST)
            emit(")\n" + indent + "{\n")
            increaseIndent
            for i in 1..cases.count {
              var child = cases[i]
              var values = child.children
              var block = child.caseBlock
              if i != 1 {
                emit("\n")
              }
              if values.count == 1 {
                emit(indent + "default:")
              } else {
                for j in 1..values.count {
                  if j != 1 { emit("\n") }
                  emit(indent + "case ")
                  emitExpression(values[j], .LOWEST)
                  emit(":")
                }
              }
              emit("\n" + indent + "{\n")
              increaseIndent
              emitStatements(block.children)
              if !block.blockAlwaysEndsWithReturn {
                emit(indent + "break;\n")
              }
              decreaseIndent
              emit(indent + "}\n")
            }
            decreaseIndent
            emit(indent + "}\n")
          }

          case .RETURN {
            emit(indent + "return")
            var value = node.returnValue
            if value != null {
              emit(" ")
              emitExpression(value, .LOWEST)
            }
            emit(";\n")
          }

          case .THROW {
            emit(indent + "throw ")
            emitExpression(node.throwValue, .LOWEST)
            emit(";\n")
          }

          case .FOREACH {
            emit(indent + "foreach (var " + mangleName(node.symbol) + " in ")
            emitExpression(node.foreachValue, .LOWEST)
            emit(")\n")
            emitBlock(node.foreachBlock)
            emit("\n")
          }

          case .FOR {
            var test = node.forTest
            var update = node.forUpdate
            var children = node.children
            var count = children.count
            emit(indent + "for (")
            if count > 3 {
              for i in 3..count {
                var child = children[i]
                if i != 3 {
                  emit(", ")
                }
                if child.kind == .VAR {
                  var symbol = child.symbol.asVariableSymbol
                  if i == 3 {
                    emitExpressionOrType(symbol.type, symbol.resolvedType)
                    emit(" ")
                  }
                  emit(mangleName(symbol) + " = ")
                  emitExpression(symbol.value, .LOWEST)
                } else {
                  emitExpression(child, .LOWEST)
                }
              }
            }
            emit("; ")
            if test != null {
              emitExpression(test, .LOWEST)
            }
            emit("; ")
            if update != null {
              emitExpression(update, .LOWEST)
            }
            emit(")\n")
            emitBlock(node.forBlock)
            emit("\n")
          }

          case .TRY {
            var children = node.children
            var finallyBlock = node.finallyBlock
            emit(indent + "try\n")
            emitBlock(node.tryBlock)
            emit("\n")
            for i in 1..children.count - 1 {
              var child = children[i]
              emit("\n")
              emitComments(child.comments)
              emit(indent + "catch")
              if child.symbol != null {
                emit(" (")
                emitExpressionOrType(child.symbol.asVariableSymbol.type, child.symbol.resolvedType)
                emit(" " + mangleName(child.symbol) + ")")
              }
              emit("\n")
              emitBlock(child.catchBlock)
              emit("\n")
            }
            if finallyBlock != null {
              emit("\n")
              emitComments(finallyBlock.comments)
              emit(indent + "finally\n")
              emitBlock(finallyBlock)
              emit("\n")
            }
          }

          case .WHILE {
            emit(indent + "while (")
            emitExpression(node.whileTest, .LOWEST)
            emit(")\n")
            emitBlock(node.whileBlock)
            emit("\n")
          }

          default {
            assert(false)
          }
        }
      }

      def emitContent(content Content) {
        switch content.kind {
          case .BOOL { emit(content.asBool.toString) }
          case .INT { emit(content.asInt.toString) }
          case .DOUBLE { emit(content.asDouble.toString) }
          case .STRING { emit(quoteString(content.asString, '"')) }
        }
      }

      def emitExpression(node Node, precedence Precedence) {
        var kind = node.kind
        switch kind {
          case .TYPE, .LAMBDA_TYPE {
            emitType(node.resolvedType)
          }

          case .NULL {
            emit("null")
          }

          case .NAME {
            var symbol = node.symbol
            emit(symbol != null ? fullName(symbol) : node.asString)
          }

          case .DOT {
            emitExpression(node.dotTarget, .MEMBER)
            emit("." + (node.symbol != null ? mangleName(node.symbol) : node.asString))
          }

          case .CONSTANT {
            emitContent(node.content)
          }

          case .CALL {
            var value = node.callValue
            var symbol = node.symbol

            if value.kind == .SUPER {
              emit("base")
              if symbol.kind != .FUNCTION_CONSTRUCTOR {
                emit(".")
                mangleName(symbol)
              }
            }

            else if symbol != null && symbol.kind == .FUNCTION_CONSTRUCTOR {
              emit("new ")
              emitType(node.resolvedType)
            }

            else if value.kind == .DOT && value.asString == "new" {
              emit("new ")
              emitExpression(value.dotTarget, .MEMBER)
            }

            else {
              emitExpression(value, .UNARY_POSTFIX)
            }

            emit("(")

            for i in 1..node.children.count {
              if i > 1 {
                emit(", ")
              }
              emitExpression(node.children[i], .COMMA)
            }

            emit(")")
          }

          case .CAST {
            var resolvedType = node.resolvedType
            var type = node.castType
            var value = node.castValue

            if type.kind == .DYNAMIC {
              emitExpression(value, precedence)
            }

            # C# doesn't have a cast from bool to int
            else if cache.isNumeric(resolvedType) && value.resolvedType == cache.boolType {
              emitExpression(Node.createHook(value.replaceWithNull, Node.createInt(1), Node.createInt(0)), precedence)
            }

            # C# doesn't have a cast from int to bool
            else if resolvedType == cache.boolType && cache.isNumeric(value.resolvedType) {
              emitExpression(Node.createBinary(.NOT_EQUAL, value.replaceWithNull, Node.createInt(0)), precedence)
            }

            else {
              if Precedence.UNARY_POSTFIX as int < precedence as int {
                emit("(")
              }
              emit("(")
              emitExpression(type, .LOWEST)
              emit(")")
              emitExpression(value, .UNARY_POSTFIX)
              if Precedence.UNARY_POSTFIX as int < precedence as int {
                emit(")")
              }
            }
          }

          case .INITIALIZER_LIST {
            emit("new ")
            emitType(node.resolvedType)
            if node.hasChildren {
              emit(" { ")
              for child in node.children {
                if child != node.children.first {
                  emit(", ")
                }
                emitExpression(child, .COMMA)
              }
              emit(" }")
            } else {
              emit("()")
            }
          }

          case .INDEX {
            assert(node.children.count == 2)
            emitExpression(node.children[0], .UNARY_POSTFIX)
            emit("[")
            emitExpression(node.children[1], .LOWEST)
            emit("]")
          }

          case .ASSIGN_INDEX {
            if Precedence.ASSIGN as int < precedence as int {
              emit("(")
            }
            assert(node.children.count == 3)
            emitExpression(node.children[0], .UNARY_POSTFIX)
            emit("[")
            emitExpression(node.children[1], .LOWEST)
            emit("] = ")
            emitExpression(node.children[2], .ASSIGN)
            if Precedence.ASSIGN as int < precedence as int {
              emit(")")
            }
          }

          case .PARAMETERIZE {
            if node.parameterizeValue.isType {
              emitType(node.resolvedType)
            } else {
              emitExpression(node.parameterizeValue, precedence)
              emit("<")
              for i in 1..node.children.count {
                if i > 1 {
                  emit(", ")
                }
                emitExpression(node.children[i], .COMMA)
              }
              emit(">")
            }
          }

          case .HOOK {
            if Precedence.ASSIGN as int < precedence as int {
              emit("(")
            }
            emitExpression(node.hookTest, .LOGICAL_OR)
            emit(" ? ")
            emitExpression(node.hookTrue, .ASSIGN)
            emit(" : ")
            emitExpression(node.hookFalse, .ASSIGN)
            if Precedence.ASSIGN as int < precedence as int {
              emit(")")
            }
          }

          case .LAMBDA {
            var function = node.symbol.asFunctionSymbol
            emitArgumentList(function)
            emit(" =>\n")
            emitBlock(function.block)
          }

          default {
            if kind.isUnary {
              var value = node.unaryValue
              var info = operatorInfo[kind]
              if info.precedence as int < precedence as int {
                emit("(")
              }
              emit(info.text)
              emitExpression(value, info.precedence)
              if info.precedence as int < precedence as int {
                emit(")")
              }
            }

            else if kind.isBinary {
              var info = operatorInfo[kind]
              if info.precedence as int < precedence as int {
                emit("(")
              }
              emitExpression(node.binaryLeft, info.precedence.incrementIfRightAssociative(info.associativity))
              emit(" " + info.text + " ")
              emitExpression(node.binaryRight, info.precedence.incrementIfLeftAssociative(info.associativity))
              if info.precedence as int < precedence as int {
                emit(")")
              }
            }

            else {
              assert(false)
            }
          }
        }
      }

      def fullName(symbol Symbol) string {
        var parent = symbol.parent
        if parent != null && parent.kind != .OBJECT_GLOBAL && !symbol.kind.isParameter {
          var enclosingName = fullName(parent)
          if symbol.kind == .FUNCTION_CONSTRUCTOR {
            return enclosingName
          }
          return enclosingName + "." + mangleName(symbol)
        }
        return mangleName(symbol)
      }

      def mangleName(symbol Symbol) string {
        if symbol.kind == .FUNCTION_CONSTRUCTOR {
          symbol = symbol.parent
        }
        if !symbol.isImportedOrExported && symbol.name in isKeyword {
          symbol.name = symbol.scope.generateName(symbol.name)
          return symbol.name
        }
        return symbol.nameWithRenaming
      }

      const isKeyword = {
        "abstract": 0,
        "as": 0,
        "base": 0,
        "bool": 0,
        "break": 0,
        "byte": 0,
        "case": 0,
        "catch": 0,
        "char": 0,
        "checked": 0,
        "class": 0,
        "const": 0,
        "continue": 0,
        "decimal": 0,
        "default": 0,
        "delegate": 0,
        "do": 0,
        "double": 0,
        "else": 0,
        "enum": 0,
        "event": 0,
        "explicit": 0,
        "extern": 0,
        "false": 0,
        "finally": 0,
        "fixed": 0,
        "float": 0,
        "for": 0,
        "foreach": 0,
        "goto": 0,
        "if": 0,
        "implicit": 0,
        "in": 0,
        "in": 0,
        "int": 0,
        "interface": 0,
        "internal": 0,
        "is": 0,
        "lock": 0,
        "long": 0,
        "namespace": 0,
        "new": 0,
        "null": 0,
        "object": 0,
        "operator": 0,
        "out": 0,
        "out": 0,
        "override": 0,
        "params": 0,
        "private": 0,
        "protected": 0,
        "public": 0,
        "readonly": 0,
        "ref": 0,
        "return": 0,
        "sbyte": 0,
        "sealed": 0,
        "short": 0,
        "sizeof": 0,
        "stackalloc": 0,
        "static": 0,
        "string": 0,
        "struct": 0,
        "switch": 0,
        "this": 0,
        "throw": 0,
        "true": 0,
        "try": 0,
        "typeof": 0,
        "uint": 0,
        "ulong": 0,
        "unchecked": 0,
        "unsafe": 0,
        "ushort": 0,
        "using": 0,
        "virtual": 0,
        "void": 0,
        "volatile": 0,
        "while": 0,
      }
    }
  }
}
