namespace Skew {
  class CPlusPlusTarget : CompilerTarget {
    over name string { return "C++" }
    over extension string { return "cpp" }
    over runPostResolvePasses bool { return true }
    over moveEverythingOffEnums bool { return true }
    over requiresIntegerSwitchStatements bool { return true }
    over editOptions(options CompilerOptions) { options.define("TARGET", "CPLUSPLUS") }
    over includeSources(sources List<Source>) {}
    over createEmitter(options CompilerOptions, cache TypeCache) Emitter { return CPlusPlusEmitter.new(options, cache) }
  }

  class CPlusPlusEmitter : Emitter {
    const options CompilerOptions
    const cache TypeCache

    over visit(global ObjectSymbol) {
      # Avoid emitting unnecessary stuff
      shakingPass(global, cache.entryPointSymbol, .USE_TYPES)
      markVirtualFunctions(global)
      var sorted = sortedObjects(global)

      # Nested types in C++ can't be forward declared
      for symbol in sorted {
        moveNestedObjectToEnclosingNamespace(symbol)
      }

      # Emit code in passes to deal with C++'s forward declarations
      for symbol in sorted {
        declareObject(symbol)
      }
      for symbol in sorted {
        defineObject(symbol)
      }
      adjustNamespace(null)
      for symbol in sorted {
        implementObject(symbol)
      }
      finalizeEmittedFile
      createSource(options.outputFile, .ALWAYS_EMIT)
    }

    @private {
      enum CodeMode {
        DECLARE
        DEFINE
        IMPLEMENT
      }

      var previousNode Node = null
      var previousSymbol Symbol = null
      var namespaceStack List<Symbol> = []
      var symbolsCheckedForInclude IntMap<int> = {}
      var includeNames StringMap<int> = {}

      def emitNewlineBeforeSymbol(symbol Symbol, mode CodeMode) {
        if previousSymbol != null &&
            (!previousSymbol.kind.isVariable || !symbol.kind.isVariable || symbol.comments != null) &&
            (mode != .DEFINE || !previousSymbol.kind.isFunction || !symbol.kind.isFunction || symbol.comments != null) &&
            (mode != .DECLARE || previousSymbol.kind != .OBJECT_CLASS || symbol.kind != .OBJECT_CLASS) {
          emit("\n")
        }
        previousSymbol = null
      }

      def emitNewlineAfterSymbol(symbol Symbol) {
        previousSymbol = symbol
      }

      def isCompactNodeKind(kind NodeKind) bool {
        return kind == .EXPRESSION || kind == .VAR || kind.isJump
      }

      def emitNewlineBeforeStatement(node Node) {
        if previousNode != null && (node.comments != null || !isCompactNodeKind(previousNode.kind) || !isCompactNodeKind(node.kind)) {
          emit("\n")
        }
        previousNode = null
      }

      def emitNewlineAfterStatement(node Node) {
        previousNode = node
      }

      def adjustNamespace(symbol Symbol) {
        # Get the namespace chain for this symbol
        var symbols List<Symbol> = []
        while symbol != null && symbol.kind != .OBJECT_GLOBAL {
          if symbol.kind == .OBJECT_NAMESPACE {
            symbols.prepend(symbol)
          }
          symbol = symbol.parent
        }

        # Find the intersection
        var limit = Math.min(namespaceStack.count, symbols.count)
        var i = 0
        while i < limit {
          if namespaceStack[i] != symbols[i] {
            break
          }
          i++
        }

        # Leave the old namespace
        while namespaceStack.count > i {
          var object = namespaceStack.takeLast
          decreaseIndent
          emit(indent + "}\n")
          emitNewlineAfterSymbol(object)
        }

        # Enter the new namespace
        while namespaceStack.count < symbols.count {
          var object = symbols[namespaceStack.count]
          emitNewlineBeforeSymbol(object, .DEFINE)
          emit(indent + "namespace " + mangleName(object) + " {\n")
          increaseIndent
          namespaceStack.append(object)
        }
      }

      def emitComments(comments List<string>) {
        if comments != null {
          for comment in comments {
            emit(indent + "//" + comment)
          }
        }
      }

      def moveNestedObjectToEnclosingNamespace(symbol ObjectSymbol) {
        var parent = symbol.parent
        while parent != null && parent.kind == .OBJECT_CLASS {
          parent = parent.parent
        }
        symbol.parent = parent
      }

      def declareObject(symbol ObjectSymbol) {
        if symbol.isImported {
          return
        }

        switch symbol.kind {
          case .OBJECT_ENUM {
            adjustNamespace(symbol)
            emitNewlineBeforeSymbol(symbol, .DECLARE)
            emit(indent + "enum struct " + mangleName(symbol) + " {\n")
            increaseIndent
            for variable in symbol.variables {
              emitVariable(variable, .DECLARE)
            }
            decreaseIndent
            emit(indent + "};\n")
            emitNewlineAfterSymbol(symbol)
          }

          case .OBJECT_CLASS {
            adjustNamespace(symbol)
            emitNewlineBeforeSymbol(symbol, .DECLARE)
            emitTypeParameters(symbol.parameters)
            emit(indent + "struct " + mangleName(symbol) + ";\n")
            emitNewlineAfterSymbol(symbol)
          }
        }
      }

      def defineObject(symbol ObjectSymbol) {
        if symbol.isImported {
          return
        }

        switch symbol.kind {
          case .OBJECT_CLASS {
            adjustNamespace(symbol)
            emitNewlineBeforeSymbol(symbol, .DEFINE)
            emitComments(symbol.comments)
            emitTypeParameters(symbol.parameters)
            emit(indent + "struct " + mangleName(symbol))
            if symbol.baseClass != null {
              emit(" : ")
              emitType(symbol.baseClass.resolvedType, .BARE)
            }
            emit(" {\n")
            increaseIndent
            for function in symbol.functions {
              emitFunction(function, .DEFINE)
            }
            for variable in symbol.variables {
              emitVariable(variable, .DEFINE)
            }
            decreaseIndent
            emit(indent + "};\n")
            emitNewlineAfterSymbol(symbol)
          }
        }
      }

      def implementObject(symbol ObjectSymbol) {
        for function in symbol.functions {
          emitFunction(function, .IMPLEMENT)
        }

        for variable in symbol.variables {
          if variable.kind == .VARIABLE_GLOBAL {
            emitVariable(variable, .IMPLEMENT)
          }
        }
      }

      def emitFunction(symbol FunctionSymbol, mode CodeMode) {
        var block = symbol.block

        if symbol.isImported || block == null {
          return
        }

        # We can't use lambdas in C++ since they don't have the right semantics so no variable insertion is needed
        if symbol.self != null {
          symbol.self.name = "this"
          symbol.self.flags |= Symbol.IS_EXPORTED
        }

        emitNewlineBeforeSymbol(symbol, mode)
        emitComments(symbol.comments)
        emitTypeParameters(symbol.parameters)
        emit(indent)
        if mode == .DEFINE && symbol.kind == .FUNCTION_GLOBAL && symbol.parent.kind == .OBJECT_CLASS {
          emit("static ")
        }
        if symbol.kind != .FUNCTION_CONSTRUCTOR {
          if mode == .DEFINE && symbol.isVirtual {
            emit("virtual ")
          }
          emitType(symbol.resolvedType.returnType, .DECLARATION)
        }
        emit(mode == .DEFINE ? mangleName(symbol) : fullName(symbol))
        emitArgumentList(symbol)

        if mode == .IMPLEMENT {
          # Move the super constructor call out of the function body
          if symbol.kind == .FUNCTION_CONSTRUCTOR && !block.children.isEmpty {
            var first = block.children.first
            if first.kind == .EXPRESSION {
              var call = first.expressionValue
              if call.kind == .CALL && call.callValue.kind == .SUPER {
                emit(" : ")
                first.remove
                emitExpression(call, .LOWEST)
              }
            }
          }

          emitBlock(block)
          emit("\n")
        }

        else {
          if symbol.overridden != null && symbol.kind != .FUNCTION_CONSTRUCTOR {
            emit(" override")
          }
          emit(";\n")
        }

        emitNewlineAfterSymbol(symbol)
      }

      def emitTypeParameters(parameters List<ParameterSymbol>) {
        if parameters != null {
          emit(indent + "template <")
          for parameter in parameters {
            if parameter != parameters.first {
              emit(", ")
            }
            emit("typename " + mangleName(parameter))
          }
          emit(">\n")
        }
      }

      def emitArgumentList(symbol FunctionSymbol) {
        emit("(")
        for argument in symbol.arguments {
          if argument != symbol.arguments.first {
            emit(", ")
          }
          emitType(argument.resolvedType, .DECLARATION)
          emit(mangleName(argument))
        }
        emit(")")
      }

      def emitVariable(symbol VariableSymbol, mode CodeMode) {
        if symbol.isImported {
          return
        }

        emitNewlineBeforeSymbol(symbol, mode)
        if symbol.kind == .VARIABLE_ENUM {
          emit(indent + mangleName(symbol))
          if symbol.value != null {
            emit(" = ")
            emitExpression(symbol.value, .COMMA)
          }
          emit(",\n")
        } else {
          emit(indent)
          if mode == .DEFINE && symbol.kind == .VARIABLE_GLOBAL && symbol.parent.kind == .OBJECT_CLASS {
            emit("static ")
          }
          emitType(symbol.resolvedType, .DECLARATION)
          if mode == .DEFINE {
            emit(mangleName(symbol))
          } else {
            emit(fullName(symbol))
            if symbol.value != null {
              emit(" = ")
              emitExpression(symbol.value, .ASSIGN)
            }
          }
          emit(";\n")
        }
        emitNewlineAfterSymbol(symbol)
      }

      def emitStatements(statements List<Node>) {
        previousNode = null

        for statement in statements {
          emitNewlineBeforeStatement(statement)
          emitComments(statement.comments)
          emitStatement(statement)
          emitNewlineAfterStatement(statement)
        }

        previousNode = null
      }

      def emitBlock(node Node) {
        emit(" {\n")
        increaseIndent
        emitStatements(node.children)
        decreaseIndent
        emit(indent + "}")
      }

      def emitStatement(node Node) {
        switch node.kind {
          case .VAR {
            emitVariable(node.symbol.asVariableSymbol, .IMPLEMENT)
          }

          case .EXPRESSION {
            emit(indent)
            emitExpression(node.expressionValue, .LOWEST)
            emit(";\n")
          }

          case .BREAK {
            emit(indent + "break;\n")
          }

          case .CONTINUE {
            emit(indent + "continue;\n")
          }

          case .IF {
            emit(indent)
            emitIf(node)
            emit("\n")
          }

          case .SWITCH {
            var cases = node.children
            emit(indent + "switch (")
            emitExpression(node.switchValue, .LOWEST)
            emit(") {\n")
            increaseIndent
            for i in 1..cases.count {
              var child = cases[i]
              var values = child.children
              var block = child.caseBlock
              if i != 1 {
                emit("\n")
              }
              if values.count == 1 {
                emit(indent + "default:")
              } else {
                for j in 1..values.count {
                  if j != 1 { emit("\n") }
                  emit(indent + "case ")
                  emitExpression(values[j], .LOWEST)
                  emit(":")
                }
              }
              emit(" {\n")
              increaseIndent
              emitStatements(block.children)
              if !block.blockAlwaysEndsWithReturn {
                emit(indent + "break;\n")
              }
              decreaseIndent
              emit(indent + "}\n")
            }
            decreaseIndent
            emit(indent + "}\n")
          }

          case .RETURN {
            emit(indent + "return")
            var value = node.returnValue
            if value != null {
              emit(" ")
              emitExpression(value, .LOWEST)
            }
            emit(";\n")
          }

          case .THROW {
            emit(indent + "throw ")
            emitExpression(node.throwValue, .LOWEST)
            emit(";\n")
          }

          case .FOR {
            var test = node.forTest
            var update = node.forUpdate
            var children = node.children
            var count = children.count
            emit(indent + "for (")
            if count > 3 {
              for i in 3..count {
                var child = children[i]
                if i != 3 {
                  emit(", ")
                }
                if child.kind == .VAR {
                  var symbol = child.symbol.asVariableSymbol
                  if i == 3 {
                    emitType(symbol.resolvedType, .DECLARATION)
                  }
                  emit(mangleName(symbol) + " = ")
                  emitExpression(symbol.value, .LOWEST)
                } else {
                  emitExpression(child, .LOWEST)
                }
              }
            }
            emit("; ")
            if test != null {
              emitExpression(test, .LOWEST)
            }
            emit("; ")
            if update != null {
              emitExpression(update, .LOWEST)
            }
            emit(")")
            emitBlock(node.forBlock)
            emit("\n")
          }

          case .TRY {
            var children = node.children
            var finallyBlock = node.finallyBlock
            emit(indent + "try")
            emitBlock(node.tryBlock)
            emit("\n")
            for i in 1..children.count - 1 {
              var child = children[i]
              if child.comments != null {
                emit("\n")
                emitComments(child.comments)
              }
              emit(indent + "catch")
              if child.symbol != null {
                emit(" (")
                emitType(child.symbol.resolvedType, .DECLARATION)
                emit(mangleName(child.symbol) + ")")
              } else {
                emit(" (...)")
              }
              emitBlock(child.catchBlock)
              emit("\n")
            }
            if finallyBlock != null {
              if finallyBlock.comments != null {
                emit("\n")
                emitComments(finallyBlock.comments)
              }
              emit(indent + "finally")
              emitBlock(finallyBlock)
              emit("\n")
            }
          }

          case .WHILE {
            emit(indent + "while (")
            emitExpression(node.whileTest, .LOWEST)
            emit(")")
            emitBlock(node.whileBlock)
            emit("\n")
          }

          case .FOREACH {
            emit("TODO:FOREACH")
          }

          default {
            assert(false)
          }
        }
      }

      def emitIf(node Node) {
        emit("if (")
        emitExpression(node.ifTest, .LOWEST)
        emit(")")
        emitBlock(node.ifTrue)

        var block = node.ifFalse
        if block != null {
          var singleIf = block.children.count == 1 && block.children[0].kind == .IF ? block.children[0] : null
          emit("\n\n")
          emitComments(block.comments)
          if singleIf != null {
            emitComments(singleIf.comments)
          }
          emit(indent + "else")

          if singleIf != null {
            emit(" ")
            emitIf(singleIf)
          } else {
            emitBlock(block)
          }
        }
      }

      def emitContent(content Content) {
        switch content.kind {
          case .BOOL { emit(content.asBool.toString) }
          case .INT { emit(content.asInt.toString) }
          case .DOUBLE { emit(content.asDouble.toString) }
          case .STRING { emit(quoteString(content.asString, '"')) }
        }
      }

      def emitExpression(node Node, precedence Precedence) {
        var kind = node.kind
        var symbol = node.symbol

        if symbol != null {
          handleSymbol(symbol)
        }

        switch kind {
          case .TYPE, .LAMBDA_TYPE {
            emitType(node.resolvedType, .BARE)
          }

          case .NULL {
            emit("nullptr")
          }

          case .NAME {
            emit(symbol != null ? fullName(symbol) : node.asString)
          }

          case .DOT {
            var target = node.dotTarget
            var type = target.resolvedType
            emitExpression(target, .MEMBER)
            emit((type != null && type.isReference ? "->" : ".") + (symbol != null ? mangleName(symbol) : node.asString))
          }

          case .CONSTANT {
            emitContent(node.content)
          }

          case .CALL {
            var value = node.callValue

            if value.kind == .SUPER {
              emit(fullName(symbol))
            }

            else if symbol != null && symbol.kind == .FUNCTION_CONSTRUCTOR {
              emit("new ")
              emitType(node.resolvedType, .BARE)
            }

            else if value.kind == .DOT && value.asString == "new" {
              emit("new ")
              emitExpression(value.dotTarget, .MEMBER)
            }

            else {
              emitExpression(value, .UNARY_POSTFIX)
            }

            emit("(")

            for i in 1..node.children.count {
              if i > 1 {
                emit(", ")
              }
              emitExpression(node.children[i], .COMMA)
            }

            emit(")")
          }

          case .CAST {
            var value = node.castValue

            if node.castType.kind == .DYNAMIC {
              emitExpression(value, precedence)
            } else {
              if Precedence.UNARY_POSTFIX as int < precedence as int {
                emit("(")
              }
              emit("(")
              emitType(node.resolvedType, .NORMAL)
              emit(")")
              emitExpression(value, .UNARY_POSTFIX)
              if Precedence.UNARY_POSTFIX as int < precedence as int {
                emit(")")
              }
            }
          }

          case .INDEX {
            assert(node.children.count == 2)
            emitExpression(node.children[0], .UNARY_POSTFIX)
            emit("[")
            emitExpression(node.children[1], .LOWEST)
            emit("]")
          }

          case .ASSIGN_INDEX {
            if Precedence.ASSIGN as int < precedence as int {
              emit("(")
            }
            assert(node.children.count == 3)
            emitExpression(node.children[0], .UNARY_POSTFIX)
            emit("[")
            emitExpression(node.children[1], .LOWEST)
            emit("] = ")
            emitExpression(node.children[2], .ASSIGN)
            if Precedence.ASSIGN as int < precedence as int {
              emit(")")
            }
          }

          case .PARAMETERIZE {
            if node.parameterizeValue.isType {
              emitType(node.resolvedType, .NORMAL)
            } else {
              emitExpression(node.parameterizeValue, precedence)
              emit("<")
              for i in 1..node.children.count {
                if i > 1 {
                  emit(", ")
                }
                emitExpression(node.children[i], .COMMA)
              }
              emit(">")
            }
          }

          case .HOOK {
            if Precedence.ASSIGN as int < precedence as int {
              emit("(")
            }
            emitExpression(node.hookTest, .LOGICAL_OR)
            emit(" ? ")
            emitExpression(node.hookTrue, .ASSIGN)
            emit(" : ")
            emitExpression(node.hookFalse, .ASSIGN)
            if Precedence.ASSIGN as int < precedence as int {
              emit(")")
            }
          }

          case .LAMBDA {
            var lambda = symbol.asFunctionSymbol
            emit("[=]")
            emitArgumentList(lambda)
            emit(" -> ")
            emitType(lambda.resolvedType.returnType, .NORMAL)
            emitBlock(lambda.block)
          }

          case .INITIALIZER_LIST, .INITIALIZER_SET, .INITIALIZER_MAP {
            var children = node.children
            emit("{")
            for child in children {
              if child != children.first {
                emit(", ")
              }
              emitExpression(child, .COMMA)
            }
            emit("}")
          }

          case .PAIR {
            includeNames["<utility>"] = 0
            emit("std::make_pair<")
            emitType(node.firstValue.resolvedType, .NORMAL)
            emit(", ")
            emitType(node.secondValue.resolvedType, .NORMAL)
            emit(">(")
            emitExpression(node.firstValue, .COMMA)
            emit(", ")
            emitExpression(node.secondValue, .COMMA)
            emit(")")
          }

          default {
            if kind.isUnary {
              var value = node.unaryValue
              var info = operatorInfo[kind]
              if info.precedence as int < precedence as int {
                emit("(")
              }
              emit(info.text)
              emitExpression(value, info.precedence)
              if info.precedence as int < precedence as int {
                emit(")")
              }
            }

            else if kind.isBinary {
              var info = operatorInfo[kind]
              if info.precedence as int < precedence as int {
                emit("(")
              }
              emitExpression(node.binaryLeft, info.precedence.incrementIfRightAssociative(info.associativity))
              emit(" " + info.text + " ")
              emitExpression(node.binaryRight, info.precedence.incrementIfLeftAssociative(info.associativity))
              if info.precedence as int < precedence as int {
                emit(")")
              }
            }

            else {
              assert(false)
            }
          }
        }
      }

      enum CppEmitType {
        BARE
        NORMAL
        DECLARATION
      }

      def emitType(type Type, mode CppEmitType) {
        if type == null {
          emit(mode == .DECLARATION ? "void " : "void")
        }

        else if type == .DYNAMIC {
          emit("void *")
        }

        else if type.kind == .LAMBDA {
          includeNames["<functional>"] = 0
          emit("std::function<")
          emitType(type.returnType, .DECLARATION)
          emit("(")
          for i in 0..type.argumentTypes.count {
            if i != 0 {
              emit(", ")
            }
            emitType(type.argumentTypes[i], .NORMAL)
          }
          emit(mode == .DECLARATION ? ")> " : ")>")
        }

        else {
          assert(type.kind == .SYMBOL)
          handleSymbol(type.symbol)
          emit(fullName(type.symbol))

          if type.isParameterized {
            emit("<")
            for i in 0..type.substitutions.count {
              if i != 0 {
                emit(", ")
              }
              emitType(type.substitutions[i], .NORMAL)
            }
            emit(">")
          }

          if type.isReference && mode != .BARE {
            emit(" *")
          } else if mode == .DECLARATION {
            emit(" ")
          }
        }
      }

      def finalizeEmittedFile {
        var includes = includeNames.keys

        if !includes.isEmpty {
          includes.sort((a, b) => a <=> b)
          for include in includes {
            emitPrefix("#include " + (include.startsWith("<") && include.endsWith(">") ? include : "\"" + include + "\"") + "\n")
          }
          emitPrefix("\n")
        }

        adjustNamespace(null)
        previousSymbol = null
        symbolsCheckedForInclude = {}
        includeNames = {}
      }

      def handleSymbol(symbol Symbol) {
        if !symbol.kind.isLocal && !(symbol.id in symbolsCheckedForInclude) {
          symbolsCheckedForInclude[symbol.id] = 0

          if symbol.annotations != null {
            for annotation in symbol.annotations {
              if annotation.symbol != null && annotation.symbol.fullName == "include" {
                var children = annotation.annotationValue.children
                if children.count == 2 {
                  includeNames[children.last.asString] = 0
                }
              }
            }
          }

          if symbol.parent != null {
            handleSymbol(symbol.parent)
          }
        }
      }
    }
  }

  namespace CPlusPlusEmitter {
    @private {
      def fullName(symbol Symbol) string {
        var parent = symbol.parent
        if parent != null && parent.kind != .OBJECT_GLOBAL && !symbol.kind.isParameter {
          return fullName(parent) + "::" + mangleName(symbol)
        }
        return mangleName(symbol)
      }

      def mangleName(symbol Symbol) string {
        if symbol.kind == .FUNCTION_CONSTRUCTOR {
          return mangleName(symbol.parent)
        }
        if !symbol.isImportedOrExported && symbol.name in isKeyword {
          return "_" + symbol.name
        }
        return symbol.nameWithRenaming
      }

      var isKeyword = {
        "alignas": 0,
        "alignof": 0,
        "and": 0,
        "and_eq": 0,
        "asm": 0,
        "auto": 0,
        "bitand": 0,
        "bitor": 0,
        "bool": 0,
        "break": 0,
        "case": 0,
        "catch": 0,
        "char": 0,
        "char16_t": 0,
        "char32_t": 0,
        "class": 0,
        "compl": 0,
        "const": 0,
        "const_cast": 0,
        "constexpr": 0,
        "continue": 0,
        "decltype": 0,
        "default": 0,
        "delete": 0,
        "do": 0,
        "double": 0,
        "dynamic_cast": 0,
        "else": 0,
        "enum": 0,
        "explicit": 0,
        "export": 0,
        "extern": 0,
        "false": 0,
        "float": 0,
        "for": 0,
        "friend": 0,
        "goto": 0,
        "if": 0,
        "INFINITY": 0,
        "inline": 0,
        "int": 0,
        "long": 0,
        "mutable": 0,
        "namespace": 0,
        "NAN": 0,
        "new": 0,
        "noexcept": 0,
        "not": 0,
        "not_eq": 0,
        "NULL": 0,
        "nullptr": 0,
        "operator": 0,
        "or": 0,
        "or_eq": 0,
        "private": 0,
        "protected": 0,
        "public": 0,
        "register": 0,
        "reinterpret_cast": 0,
        "return": 0,
        "short": 0,
        "signed": 0,
        "sizeof": 0,
        "static": 0,
        "static_assert": 0,
        "static_cast": 0,
        "struct": 0,
        "switch": 0,
        "template": 0,
        "this": 0,
        "thread_local": 0,
        "throw": 0,
        "true": 0,
        "try": 0,
        "typedef": 0,
        "typeid": 0,
        "typename": 0,
        "union": 0,
        "unsigned": 0,
        "using": 0,
        "virtual": 0,
        "void": 0,
        "volatile": 0,
        "wchar_t": 0,
        "while": 0,
        "xor": 0,
        "xor_eq": 0,
      }
    }
  }
}
