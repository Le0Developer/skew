namespace astral {
  enum TypeKind {
    SYMBOL
    DYNAMIC
    FUNCTION
    NULL
  }

  class Type {
    TypeKind kind

    static var NULL = Type(.NULL)
    static var DYNAMIC = Type(.DYNAMIC)

    SymbolType asSymbolType() {
      assert kind == .SYMBOL
      return (SymbolType)this
    }

    FunctionType asFunctionType() {
      assert kind == .FUNCTION
      return (FunctionType)this
    }

    string toString() {
      switch (kind) {
        case .DYNAMIC { return "dynamic" }
        case .SYMBOL { return asSymbolType().symbol.fullName() }
        default { return "null" }
      }
    }
  }

  class SymbolType : Type {
    TypeSymbol symbol

    new(TypeSymbol symbol) : super(.SYMBOL), symbol = symbol {
    }
  }

  class FunctionType : Type {
    List<Type> argumentTypes
    Type returnType
  }

  class TypeCache {
    SymbolType boolType = null
    SymbolType doubleType = null
    SymbolType intType = null
    SymbolType stringType = null

    void loadGlobals(Log log, TypeSymbol global) {
      boolType = loadGlobalClass(log, global, "bool")
      doubleType = loadGlobalClass(log, global, "double")
      intType = loadGlobalClass(log, global, "int")
      stringType = loadGlobalClass(log, global, "string")
    }

    private static SymbolType loadGlobalClass(Log log, TypeSymbol global, string name) {
      var symbol = global.members.getOrDefault(name, null)
      assert symbol != null
      assert symbol.kind == .TYPE_CLASS
      return SymbolType(symbol.asType())
    }
  }
}
