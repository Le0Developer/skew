namespace astral {
  using terminal

  interface ValidatorReport {
    virtual void reportNestingError(SymbolKind parent, Symbol child)
    virtual void reportKindError(string expected, Symbol symbol)
  }

  class PrintingReport : ValidatorReport {
    override void reportNestingError(SymbolKind parent, Symbol child) {
      print("Cannot nest " + child.kind + " inside " + parent)
    }

    override void reportKindError(string expected, Symbol symbol) {
      print("Invalid " + expected + " with kind " + symbol.kind)
    }
  }

  class Validator {
    ValidatorReport report

    bool validate(TypeSymbol symbol) {
      return validateType(symbol, .NONE)
    }

    private {
      bool validateType(TypeSymbol symbol, SymbolKind parent) {
        var isValidNesting = false

        switch (symbol.kind) {
          case .TYPE_CLASS, .TYPE_INTERFACE {
            isValidNesting =
              parent == .TYPE_CLASS ||
              parent == .TYPE_GLOBAL ||
              parent == .TYPE_INTERFACE ||
              parent == .TYPE_NAMESPACE ||
              parent == .NONE
          }

          case .TYPE_GLOBAL {
            isValidNesting =
              parent == .NONE
          }

          case .TYPE_NAMESPACE {
            isValidNesting =
              parent == .TYPE_GLOBAL ||
              parent == .TYPE_NAMESPACE ||
              parent == .NONE
          }

          default {
            if (report != null) {
              report.reportKindError("type", symbol)
            }
            return false
          }
        }

        if (!isValidNesting) {
          if (report != null) {
            report.reportNestingError(parent, symbol)
          }
          return false
        }

        for (var i = 0; i < symbol.types.size(); i++) {
          if (!validateType(symbol.types[i], symbol.kind)) {
            return false
          }
        }

        for (var i = 0; i < symbol.funcs.size(); i++) {
          if (!validateFunc(symbol.funcs[i], symbol.kind)) {
            return false
          }
        }

        for (var i = 0; i < symbol.vars.size(); i++) {
          if (!validateVar(symbol.vars[i], symbol.kind)) {
            return false
          }
        }

        return true
      }

      bool validateFunc(FuncSymbol symbol, SymbolKind parent) {
        var isValidNesting = false

        switch (symbol.kind) {
          case .FUNC_CONSTRUCTOR {
            isValidNesting =
              parent == .TYPE_CLASS
          }

          case .FUNC_GLOBAL {
            isValidNesting =
              parent == .NONE ||
              parent == .TYPE_CLASS ||
              parent == .TYPE_GLOBAL ||
              parent == .TYPE_NAMESPACE
          }

          case .FUNC_INSTANCE {
            isValidNesting =
              parent == .TYPE_CLASS ||
              parent == .TYPE_INTERFACE
          }

          case .FUNC_LOCAL {
            isValidNesting =
              parent.isFunc()
          }

          default {
            if (report != null) {
              report.reportKindError("function", symbol)
            }
            return false
          }
        }

        if (!isValidNesting) {
          if (report != null) {
            report.reportNestingError(parent, symbol)
          }
          return false
        }

        for (var i = 0; i < symbol.args.size(); i++) {
          var arg = symbol.args[i]
          if (arg.kind != .VAR_LOCAL) {
            if (report != null) {
              report.reportNestingError(symbol.kind, arg)
            }
            return false
          }
        }

        return true
      }

      bool validateVar(VarSymbol symbol, SymbolKind parent) {
        var isValidNesting = false

        switch (symbol.kind) {
          case .VAR_GLOBAL {
            isValidNesting =
              parent == .NONE ||
              parent == .TYPE_CLASS ||
              parent == .TYPE_GLOBAL ||
              parent == .TYPE_INTERFACE ||
              parent == .TYPE_NAMESPACE
          }

          case .VAR_INSTANCE {
            isValidNesting =
              parent == .TYPE_CLASS ||
              parent == .TYPE_INTERFACE
          }

          case .VAR_LOCAL {
            isValidNesting =
              parent.isFunc()
          }

          default {
            if (report != null) {
              report.reportKindError("function", symbol)
            }
            return false
          }
        }

        if (!isValidNesting) {
          if (report != null) {
            report.reportNestingError(parent, symbol)
          }
          return false
        }

        return true
      }
    }
  }
}
