namespace skew {
  class OperatorInfo {
    const text string
    const precedence Precedence
    const associativity Associativity
    const kind OperatorKind
    const count ArgumentCount
  }

  enum ArgumentCount {
    ONE
    ONE_OR_MORE
    ONE_OR_TWO
    TWO_OR_FEWER
    TWO_OR_MORE
    ZERO
    ZERO_OR_MORE
    ZERO_OR_ONE
  }

  enum OperatorKind {
    FIXED
    OVERRIDABLE
  }

  var operatorInfo IntMap<OperatorInfo> = {
    NodeKind.COMPLEMENT:            OperatorInfo.new("~", .UNARY_PREFIX, .NONE, .OVERRIDABLE, .ZERO),
    NodeKind.DECREMENT:             OperatorInfo.new("--", .UNARY_PREFIX, .NONE, .OVERRIDABLE, .ZERO),
    NodeKind.INCREMENT:             OperatorInfo.new("++", .UNARY_PREFIX, .NONE, .OVERRIDABLE, .ZERO),
    NodeKind.NEGATIVE:              OperatorInfo.new("-", .UNARY_PREFIX, .NONE, .OVERRIDABLE, .ZERO_OR_ONE),
    NodeKind.NOT:                   OperatorInfo.new("!", .UNARY_PREFIX, .NONE, .OVERRIDABLE, .ZERO),
    NodeKind.POSITIVE:              OperatorInfo.new("+", .UNARY_PREFIX, .NONE, .OVERRIDABLE, .ZERO_OR_ONE),

    NodeKind.ADD:                   OperatorInfo.new("+", .ADD, .LEFT, .OVERRIDABLE, .ZERO_OR_ONE),
    NodeKind.BITWISE_AND:           OperatorInfo.new("&", .BITWISE_AND, .LEFT, .OVERRIDABLE, .ONE),
    NodeKind.BITWISE_OR:            OperatorInfo.new("|", .BITWISE_OR, .LEFT, .OVERRIDABLE, .ONE),
    NodeKind.BITWISE_XOR:           OperatorInfo.new("^", .BITWISE_XOR, .LEFT, .OVERRIDABLE, .ONE),
    NodeKind.COMPARE:               OperatorInfo.new("<=>", .COMPARE, .LEFT, .OVERRIDABLE, .ONE),
    NodeKind.DIVIDE:                OperatorInfo.new("/", .MULTIPLY, .LEFT, .OVERRIDABLE, .ONE),
    NodeKind.EQUAL:                 OperatorInfo.new("==", .EQUAL, .LEFT, .FIXED, .ONE),
    NodeKind.GREATER_THAN:          OperatorInfo.new(">", .COMPARE, .LEFT, .OVERRIDABLE, .ONE),
    NodeKind.GREATER_THAN_OR_EQUAL: OperatorInfo.new(">=", .COMPARE, .LEFT, .OVERRIDABLE, .ONE),
    NodeKind.IN:                    OperatorInfo.new("in", .COMPARE, .LEFT, .OVERRIDABLE, .ONE),
    NodeKind.LESS_THAN:             OperatorInfo.new("<", .COMPARE, .LEFT, .OVERRIDABLE, .ONE),
    NodeKind.LESS_THAN_OR_EQUAL:    OperatorInfo.new("<=", .COMPARE, .LEFT, .OVERRIDABLE, .ONE),
    NodeKind.LOGICAL_AND:           OperatorInfo.new("&&", .LOGICAL_AND, .LEFT, .FIXED, .ONE),
    NodeKind.LOGICAL_OR:            OperatorInfo.new("||", .LOGICAL_OR, .LEFT, .FIXED, .ONE),
    NodeKind.MULTIPLY:              OperatorInfo.new("*", .MULTIPLY, .LEFT, .OVERRIDABLE, .ONE),
    NodeKind.NOT_EQUAL:             OperatorInfo.new("!=", .EQUAL, .LEFT, .FIXED, .ONE),
    NodeKind.POWER:                 OperatorInfo.new("**", .UNARY_PREFIX, .RIGHT, .OVERRIDABLE, .ONE),
    NodeKind.REMAINDER:             OperatorInfo.new("%", .MULTIPLY, .LEFT, .OVERRIDABLE, .ONE),
    NodeKind.SHIFT_LEFT:            OperatorInfo.new("<<", .SHIFT, .LEFT, .OVERRIDABLE, .ONE),
    NodeKind.SHIFT_RIGHT:           OperatorInfo.new(">>", .SHIFT, .LEFT, .OVERRIDABLE, .ONE),
    NodeKind.SUBTRACT:              OperatorInfo.new("-", .ADD, .LEFT, .OVERRIDABLE, .ZERO_OR_ONE),

    NodeKind.ASSIGN:                OperatorInfo.new("=", .ASSIGN, .RIGHT, .FIXED, .ONE),
    NodeKind.ASSIGN_ADD:            OperatorInfo.new("+=", .ASSIGN, .RIGHT, .OVERRIDABLE, .ONE),
    NodeKind.ASSIGN_BITWISE_AND:    OperatorInfo.new("&=", .ASSIGN, .RIGHT, .OVERRIDABLE, .ONE),
    NodeKind.ASSIGN_BITWISE_OR:     OperatorInfo.new("|=", .ASSIGN, .RIGHT, .OVERRIDABLE, .ONE),
    NodeKind.ASSIGN_BITWISE_XOR:    OperatorInfo.new("^=", .ASSIGN, .RIGHT, .OVERRIDABLE, .ONE),
    NodeKind.ASSIGN_DIVIDE:         OperatorInfo.new("/=", .ASSIGN, .RIGHT, .OVERRIDABLE, .ONE),
    NodeKind.ASSIGN_MULTIPLY:       OperatorInfo.new("*=", .ASSIGN, .RIGHT, .OVERRIDABLE, .ONE),
    NodeKind.ASSIGN_POWER:          OperatorInfo.new("**=", .ASSIGN, .RIGHT, .OVERRIDABLE, .ONE),
    NodeKind.ASSIGN_REMAINDER:      OperatorInfo.new("%=", .ASSIGN, .RIGHT, .OVERRIDABLE, .ONE),
    NodeKind.ASSIGN_SHIFT_LEFT:     OperatorInfo.new("<<=", .ASSIGN, .RIGHT, .OVERRIDABLE, .ONE),
    NodeKind.ASSIGN_SHIFT_RIGHT:    OperatorInfo.new(">>=", .ASSIGN, .RIGHT, .OVERRIDABLE, .ONE),
    NodeKind.ASSIGN_SUBTRACT:       OperatorInfo.new("-=", .ASSIGN, .RIGHT, .OVERRIDABLE, .ONE),

    NodeKind.ASSIGN_INDEX:          OperatorInfo.new("[]=", .MEMBER, .NONE, .OVERRIDABLE, .TWO_OR_MORE),
    NodeKind.INDEX:                 OperatorInfo.new("[]", .MEMBER, .NONE, .OVERRIDABLE, .ONE_OR_MORE),
  }

  var argumentCounts StringMap<ArgumentCount> = null

  def argumentCountForOperator(text string) ArgumentCount {
    if argumentCounts == null {
      argumentCounts = {}
      for value in operatorInfo.values {
        argumentCounts[value.text] = value.count
      }
      argumentCounts["[...]"] = .ONE
      argumentCounts["[new]"] = .ZERO_OR_ONE
      argumentCounts["{...}"] = .ONE_OR_TWO
      argumentCounts["{new}"] = .TWO_OR_FEWER
    }
    return argumentCounts.get(text, .ZERO_OR_MORE)
  }
}
