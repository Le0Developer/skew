namespace Skew.Tests {
  class CompilerTest : Unit.Test {
    var _input string
    var _expected string
    var _options = CompilerOptions.new

    over run {
      rename(compactWhitespace(_input))
      var log = Log.new
      var result = compile(log, _options, [Source.new("<stdin>", _input)])
      var output = result.outputs.isEmpty ? log.toString : "\n".join(
        result.outputs.map<string>(source => (source.name == null ? "" : "[" + source.name + "]\n") + source.contents))
      expectString(trimNewlines(_expected), trimNewlines(output))
    }

    def csharp CompilerTest {
      _options.target = CSharpTarget.new
      return self
    }

    def js CompilerTest {
      _options.target = JavaScriptTarget.new
      return self
    }

    def jsMangle CompilerTest {
      _options.target = JavaScriptTarget.new
      _options.jsMangle = true
      return self
    }

    def jsMinify CompilerTest {
      _options.target = JavaScriptTarget.new
      _options.jsMinify = true
      return self
    }

    def foldAllConstants CompilerTest {
      _options.foldAllConstants = true
      return self
    }

    def globalizeAllFunctions CompilerTest {
      _options.globalizeAllFunctions = true
      return self
    }

    def inlineAllFunctions CompilerTest {
      _options.inlineAllFunctions = true
      return self
    }
  }

  class FormatTest : Unit.Test {
    over run {
      rename(compactWhitespace(_input))
      var formatted = Range.new(Source.new("<stdin>", _input), _start, _end).format(_maxLength)
      expectString(trimNewlines(_expected), trimNewlines(formatted.line + "\n" + formatted.range))
    }

    const _input string
    const _expected string
    const _start int
    const _end int
    const _maxLength int
  }

  class SimpleTest : Unit.Test {
    over run {
      _callback((a, b) => expectString(a, b))
    }

    const _callback fn(fn(string, string))
  }

  def trimNewlines(text string) string {
    var length = text.count
    var start = 0
    var end = length
    while start < length && text[start] == '\n' {
      start++
    }
    while start < end && text[end - 1] == '\n' {
      end--
    }
    return text.slice(start, end)
  }

  def compactWhitespace(text string) string {
    var wasSpace = false
    var result = ""
    for i in 0..text.count {
      var c = text[i]
      if c != '\n' && c != ' ' && c != '\t' {
        result += text.get(i)
        wasSpace = false
      } else if !wasSpace {
        result += " "
        wasSpace = true
      }
    }
    return result
  }

  def test(input string, expected string) CompilerTest {
    return CompilerTest.new(trimNewlines(input), expected)
  }

  def testFormat(input string, expected string, start int, end int, maxLength int) {
    FormatTest.new(trimNewlines(input), expected, start, end, maxLength)
  }

  def testSimple(name string, callback fn(fn(string, string))) {
    SimpleTest.new(callback).rename(name)
  }

  @entry
  def main int {
    # End-to-end tests
    testCSharp
    testJavaScript
    testJavaScriptMangle
    testJavaScriptMinify
    testSimple

    # Unit tests
    testFormatting
    testUnicode

    var report = Unit.TerminalReport.new
    Unit.Test.runAll(report)
    return report.failedCount
  }
}
