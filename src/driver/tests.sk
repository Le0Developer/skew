namespace Skew.Tests {
  class CompilerTest : Unit.Test {
    var _input string
    var _expected string

    over run {
      rename(compactWhitespace(_input))
      var log = Log.new
      compile(log, CompilerOptions.new, [Source.new("<stdin>", _input)])
      var output = log.toString
      expectString(trim(_expected), trim(output))
    }
  }

  def isSpace(c int) bool {
    return c == ' ' || c == '\n'
  }

  def trim(text string) string {
    var length = text.count
    var start = 0
    var end = length
    while start < length && isSpace(text[start]) {
      start++
    }
    while start < end && isSpace(text[end - 1]) {
      end--
    }
    return text.slice(start, end)
  }

  def compactWhitespace(text string) string {
    var wasSpace = false
    var result = ""
    for i in 0..text.count {
      if !isSpace(text[i]) {
        result += text.get(i)
        wasSpace = false
      } else if !wasSpace {
        result += " "
        wasSpace = true
      }
    }
    return result
  }

  def test(input string, expected string) CompilerTest {
    return CompilerTest.new(trim(input), expected)
  }

  @entry
  def main int {
    testSimple

    var report = Unit.TerminalReport.new
    Unit.Test.runAll(report)
    return report.failedCount
  }
}
