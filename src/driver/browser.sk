namespace Skew {
  var compileTime = document.getElementById("compileTime")
  var input = document.getElementById("input")
  var optionArea = document.getElementById("optionArea")
  var outputCode = document.getElementById("outputCode")
  var outputLog = document.getElementById("outputLog")
  var outputTree = document.getElementById("outputTree")
  var targetArea = document.getElementById("targetArea")
  var constantFolding = false
  var functionInlining = false
  var showSyntaxTree = false
  var stringEnums = false

  def update {
    var log = Log.new
    var source = Source.new("<stdin>", input.value)
    var options = CompilerOptions.new
    targetArea.textContent = "JavaScript"
    options.target = .JAVASCRIPT
    if constantFolding { options.foldAllConstants = true }
    if functionInlining { options.inlineAllFunctions = true }
    if stringEnums { options.enumFormat = .STRING }
    var result = compile(log, options, [source])
    outputLog.value = log.toString
    outputTree.value = showSyntaxTree ? LispTreeEmitter.dump(result.global) : ""
    outputCode.value = log.hasErrors ? "" : result.outputs.first.contents
    compileTime.textContent = ((result.totalTime * 1000) as dynamic).toFixed(1) + "ms"
  }

  def createCheckbox(label string, defaultValue bool, callback fn(bool)) dynamic {
    var element = document.createElement("label")
    var checkbox = document.createElement("input")
    checkbox.type = "checkbox"
    checkbox.checked = defaultValue
    checkbox.onchange = => {
      callback(checkbox.checked)
      update
    }
    element.appendChild(checkbox)
    element.appendChild(document.createTextNode(" " + label))
    callback(defaultValue)
    return element
  }

  @entry
  def main {
    optionArea.appendChild(createCheckbox("Show syntax tree", false, value => showSyntaxTree = value))
    optionArea.appendChild(createCheckbox("Constant folding", false, value => constantFolding = value))
    optionArea.appendChild(createCheckbox("Function inlining", false, value => functionInlining = value))
    optionArea.appendChild(createCheckbox("String enums", false, value => stringEnums = value))
    input.oninput = => update
    update
  }
}

@import
var document dynamic
