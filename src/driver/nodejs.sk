namespace Skew {
  enum Option {
    DEFINE
    FOLD_CONSTANTS
    GLOBALIZE_FUNCTIONS
    HELP
    INLINE_FUNCTIONS
    JS_MANGLE
    JS_MINIFY
    JS_SOURCE_MAP
    MESSAGE_LIMIT
    OUTPUT_DIRECTORY
    OUTPUT_FILE
    RELEASE
    TARGET
    VERBOSE
  }

  const DEFAULT_MESSAGE_LIMIT = 10

  @entry
  def main(arguments List<string>) int {
    # Translate frontend flags to compiler options
    var log = Log.new
    var parser = Options.Parser.new
    var options = parseOptions(log, parser, arguments)
    var inputs = readSources(log, parser.normalArguments)

    # Run the compilation
    if !log.hasErrors && options != null {
      var result = compile(log, options, inputs)

      # Write all outputs
      if !log.hasErrors {
        for output in result.outputs {
          if !IO.writeFile(output.name, output.contents) {
            var outputFile = parser.rangeForOption(.OUTPUT_FILE)
            var outputDirectory = parser.rangeForOption(.OUTPUT_DIRECTORY)
            log.commandLineErrorUnwritableFile(outputFile != null ? outputFile : outputDirectory, output.name)
            break
          }
        }

        # Print compilation statistics
        if !log.hasErrors && options.verbose {
          printWithColor(.GRAY, result.statistics + "\n")
        }
      }
    }

    # Print any errors and warnings
    printLogWithColor(log, parser.intForOption(.MESSAGE_LIMIT, DEFAULT_MESSAGE_LIMIT))
    return log.hasErrors ? 1 : 0
  }

  def printWithColor(color Terminal.Color, text string) {
    Terminal.setColor(color)
    Terminal.write(text)
    Terminal.setColor(.DEFAULT)
  }

  def printError(text string) {
    printWithColor(.RED, "error: ")
    printWithColor(.BOLD, text + "\n")
  }

  def printNote(text string) {
    printWithColor(.GRAY, "note: ")
    printWithColor(.BOLD, text + "\n")
  }

  def printWarning(text string) {
    printWithColor(.MAGENTA, "warning: ")
    printWithColor(.BOLD, text + "\n")
  }

  def printUsage(parser Options.Parser) {
    printWithColor(.GREEN, "\nusage: ")
    printWithColor(.BOLD, "skewc [flags] [inputs]\n")
    Terminal.write(parser.usageText(Math.min(Terminal.width, 80)))
  }

  def printLogWithColor(log Log, diagnosticLimit int) {
    var terminalWidth = Terminal.width
    var diagnosticCount = 0

    for diagnostic in log.diagnostics {
      if diagnosticLimit > 0 && diagnosticCount == diagnosticLimit {
        break
      }
      if diagnostic.range != null {
        printWithColor(.BOLD, diagnostic.range.locationString + ": ")
      }
      switch diagnostic.kind {
        case .WARNING {
          printWarning(diagnostic.text)
        }
        case .ERROR {
          printError(diagnostic.text)
        }
      }
      if diagnostic.range != null {
        var formatted = diagnostic.range.format(terminalWidth)
        Terminal.print(formatted.line)
        printWithColor(.GREEN, formatted.range + "\n")
      }
      if diagnostic.noteRange != null {
        printWithColor(.BOLD, diagnostic.noteRange.locationString + ": ")
        printNote(diagnostic.noteText)
        var formatted = diagnostic.noteRange.format(terminalWidth)
        Terminal.print(formatted.line)
        printWithColor(.GREEN, formatted.range + "\n")
      }
      diagnosticCount++
    }

    # Print the summary
    var hasErrors = log.hasErrors
    var hasWarnings = log.hasWarnings
    var summary = ""
    if hasWarnings {
      summary += log.warningCount.toString + " warning" + PrettyPrint.plural(log.warningCount)
      if hasErrors {
        summary += " and "
      }
    }
    if hasErrors {
      summary += log.errorCount.toString + " error" + PrettyPrint.plural(log.errorCount)
    }
    if hasWarnings || hasErrors {
      Terminal.write(summary + " generated")
      printWithColor(.GRAY, diagnosticCount < log.diagnostics.count ? " (only showing " + diagnosticLimit.toString +
        " message" + PrettyPrint.plural(diagnosticLimit) + ", use \"--message-limit=0\" to see all)\n" : "\n")
    }
  }

  def readSources(log Log, files List<Range>) List<Source> {
    var result List<Source>  = []
    for file in files {
      var path = file.toString
      var contents = IO.readFile(path)
      if contents == null {
        log.commandLineErrorUnreadableFile(file, path)
      } else {
        result.append(Source.new(path, contents.value))
      }
    }
    return result
  }

  def parseOptions(log Log, parser Options.Parser, arguments List<string>) CompilerOptions {
    # Configure the parser
    parser.define(.BOOL, .HELP, "--help", "Prints this message.").aliases(["-help", "?", "-?", "-h", "-H", "/?", "/h", "/H"])
    parser.define(.STRING, .TARGET, "--target", "Sets the target format. Valid targets are " + joinKeys(VALID_TARGETS.keys) + ".")
    parser.define(.STRING, .OUTPUT_FILE, "--output-file", "Combines all output into a single file. Mutually exclusive with --output-dir.")
    parser.define(.STRING, .OUTPUT_DIRECTORY, "--output-dir", "Places all output files in the specified directory. Mutually exclusive with --output-file.")
    parser.define(.BOOL, .RELEASE, "--release", "Implies --js-mangle, --js-minify, --fold-constants, --inline-functions, --globalize-functions, and --define:RELEASE=true.")
    parser.define(.BOOL, .VERBOSE, "--verbose", "Prints out information about the compilation.")
    parser.define(.INT, .MESSAGE_LIMIT, "--message-limit", "Sets the maximum number of messages to report. Pass 0 to disable the message limit. The default is " + DEFAULT_MESSAGE_LIMIT.toString + ".")
    parser.define(.STRING_LIST, .DEFINE, "--define", "Override variable values at compile time.")
    parser.define(.BOOL, .JS_MANGLE, "--js-mangle", "Transforms emitted JavaScript to be as small as possible. The \"@export\" annotation prevents renaming a symbol.")
    parser.define(.BOOL, .JS_MINIFY, "--js-minify", "Remove whitespace when compiling to JavaScript.")
    parser.define(.BOOL, .JS_SOURCE_MAP, "--js-source-map", "Generates a source map when targeting JavaScript. The source map is saved with the \".map\" extension in the same directory as the main output file.")
    parser.define(.BOOL, .FOLD_CONSTANTS, "--fold-constants", "Evaluates constants at compile time and removes dead code inside functions.")
    parser.define(.BOOL, .INLINE_FUNCTIONS, "--inline-functions", "Uses heuristics to automatically inline simple global functions.")
    parser.define(.BOOL, .GLOBALIZE_FUNCTIONS, "--globalize-functions", "Convert instance functions to global functions for better inlining.")

    # Parse the command line arguments
    parser.parse(log, arguments)
    if log.hasErrors {
      return null
    }

    # Early-out when printing the usage text
    if parser.boolForOption(.HELP, arguments.isEmpty) {
      printUsage(parser)
      return null
    }

    # Set up the options for the compiler
    var options = CompilerOptions.new
    var releaseFlag = parser.boolForOption(.RELEASE, false)
    options.verbose = parser.boolForOption(.VERBOSE, false)
    options.foldAllConstants = parser.boolForOption(.FOLD_CONSTANTS, releaseFlag)
    options.globalizeAllFunctions = parser.boolForOption(.GLOBALIZE_FUNCTIONS, releaseFlag)
    options.inlineAllFunctions = parser.boolForOption(.INLINE_FUNCTIONS, releaseFlag)
    options.jsMangle = parser.boolForOption(.JS_MANGLE, releaseFlag)
    options.jsMinify = parser.boolForOption(.JS_MINIFY, releaseFlag)
    options.jsSourceMap = parser.boolForOption(.JS_SOURCE_MAP, false)

    # Prepare the defines
    if releaseFlag {
      options.define("RELEASE", "true")
    }
    for range in parser.rangeListForOption(.DEFINE) {
      var name = range.toString
      var equals = name.indexOf("=")
      if equals < 0 {
        log.commandLineErrorExpectedDefineValue(range, name)
        continue
      }
      options.defines[name.slice(0, equals)] = Define.new(range.fromStart(equals), range.fromEnd(name.count - equals - 1))
    }

    # There must be at least one source file
    var end = parser.source.contents.count
    var trailingSpace = Range.new(parser.source, end - 1, end)
    if parser.normalArguments.isEmpty {
      log.commandLineErrorNoInputFiles(trailingSpace)
    }

    # Check the target format
    var target = parser.rangeForOption(.TARGET)
    if target != null {
      options.target = parseEnum<CompilerTarget>(log, "target", VALID_TARGETS, target, null)
    } else {
      log.commandLineErrorMissingTarget(trailingSpace)
    }

    # Parse the output location
    var outputFile = parser.rangeForOption(.OUTPUT_FILE)
    var outputDirectory = parser.rangeForOption(.OUTPUT_DIRECTORY)
    if outputFile == null && outputDirectory == null {
      log.commandLineErrorMissingOutput(trailingSpace, "--output-file", "--output-dir")
    } else if outputFile != null && outputDirectory != null {
      log.commandLineErrorDuplicateOutput(outputFile.start > outputDirectory.start ? outputFile : outputDirectory, "--output-file", "--output-dir")
    } else if outputFile != null {
      options.outputFile = outputFile.toString
    } else {
      options.outputDirectory = outputDirectory.toString
    }

    return options
  }

  class Log {
    def commandLineErrorExpectedDefineValue(range Range, name string) {
      error(range, "Use \"--define:" + name + "=___\" to provide a value")
    }

    def commandLineErrorMissingOutput(range Range, first string, second string) {
      error(range, "Specify the output location using either \"" + first + "\" or \"" + second + "\"")
    }

    def commandLineErrorDuplicateOutput(range Range, first string, second string) {
      error(range, "Cannot specify both \"" + first + "\" and \"" + second + "\"")
    }

    def commandLineErrorUnreadableFile(range Range, name string) {
      error(range, "Could not read from \"" + name + "\"")
    }

    def commandLineErrorUnwritableFile(range Range, name string) {
      error(range, "Could not write to \"" + name + "\"")
    }

    def commandLineErrorNoInputFiles(range Range) {
      error(range, "Missing input files")
    }

    def commandLineErrorMissingTarget(range Range) {
      error(range, "Specify the target format using \"--target\"")
    }

    def commandLineErrorInvalidEnum(range Range, name string, found string, expected List<string>) {
      error(range, "Invalid " + name + " \"" + found + "\", must be either " + PrettyPrint.joinQuoted(expected, "or"))
    }
  }

  def joinKeys(keys List<string>) string {
    keys.sort((a, b) => a <=> b)
    return PrettyPrint.joinQuoted(keys, "and")
  }

  def parseEnum<T>(log Log, name string, map StringMap<T>, range Range, defaultValue T) T {
    var key = range.toString
    if key in map {
      return map[key]
    }
    var keys = map.keys
    keys.sort((a, b) => a <=> b)
    log.commandLineErrorInvalidEnum(range, name, key, keys)
    return defaultValue
  }

  const VALID_TARGETS = {
    "cpp": CPlusPlusTarget.new,
    "cs": CSharpTarget.new,
    "js": JavaScriptTarget.new,
    "lisp-tree": LispTreeTarget.new,
  }
}
