namespace astral {
  class Token {
    Range range
    TokenKind kind
  }

  var REMOVE_NEWLINE_BEFORE = {
    TokenKind.COLON: 0,
    TokenKind.COMMA: 0,
    TokenKind.QUESTION_MARK: 0,
    TokenKind.RIGHT_BRACKET: 0,
    TokenKind.RIGHT_PARENTHESIS: 0,
  }

  var REMOVE_NEWLINE_AFTER = {
    TokenKind.COLON: 0,
    TokenKind.NEWLINE: 0,
    TokenKind.QUESTION_MARK: 0,

    TokenKind.LEFT_BRACE: 0,
    TokenKind.LEFT_BRACKET: 0,
    TokenKind.LEFT_PARENTHESIS: 0,

    TokenKind.ASSIGN: 0,
    TokenKind.BITWISE_AND: 0,
    TokenKind.BITWISE_OR: 0,
    TokenKind.BITWISE_XOR: 0,
    TokenKind.DIVIDE: 0,
    TokenKind.EQUAL: 0,
    TokenKind.GREATER_THAN: 0,
    TokenKind.GREATER_THAN_OR_EQUAL: 0,
    TokenKind.LESS_THAN: 0,
    TokenKind.LESS_THAN_OR_EQUAL: 0,
    TokenKind.LOGICAL_AND: 0,
    TokenKind.LOGICAL_OR: 0,
    TokenKind.MINUS: 0,
    TokenKind.MULTIPLY: 0,
    TokenKind.NOT_EQUAL: 0,
    TokenKind.PLUS: 0,
    TokenKind.REMAINDER: 0,
    TokenKind.SHIFT_LEFT: 0,
    TokenKind.SHIFT_RIGHT: 0,
  }

  void prepareTokens(List<Token> tokens) {
    TokenKind previousKind = .NULL
    List<Token> stack = []
    var count = 0

    for (var i = 0, n = tokens.size(); i < n; i++) {
      var token = tokens[i]

      // Compress tokens to eliminate gaps
      tokens[count] = token
      count++

      // Tokens that start with a greater than may need to be split
      var tokenKind = token.kind

      // Remove newlines based on the previous token or the next token to enable
      // line continuations. Make sure to be conservative. We want to be like
      // Python, not like JavaScript ASI! Anything that is at all ambiguous
      // should be disallowed.
      if (tokenKind == .NEWLINE && previousKind in REMOVE_NEWLINE_AFTER) {
        count--
        continue
      } else if (previousKind == .NEWLINE && tokenKind in REMOVE_NEWLINE_BEFORE) {
        tokens[count - 2] = token
        count--
      }
      previousKind = tokenKind
    }

    // Trim off the remaining tokens due to token removal
    while (tokens.size() > count) {
      tokens.pop()
    }
  }
}
