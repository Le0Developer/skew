################################################################################
#
# This is a generated file, all edits will be lost!
#
################################################################################

namespace skew {
  enum TokenKind {
    ANNOTATION
    ARROW
    AS
    ASSIGN
    ASSIGN_BITWISE_AND
    ASSIGN_BITWISE_OR
    ASSIGN_BITWISE_XOR
    ASSIGN_DIVIDE
    ASSIGN_INDEX
    ASSIGN_MINUS
    ASSIGN_MULTIPLY
    ASSIGN_PLUS
    ASSIGN_POWER
    ASSIGN_REMAINDER
    ASSIGN_SHIFT_LEFT
    ASSIGN_SHIFT_RIGHT
    BITWISE_AND
    BITWISE_OR
    BITWISE_XOR
    BREAK
    CASE
    CHARACTER
    CLASS
    COLON
    COMMA
    COMMENT
    COMPARE
    CONST
    CONTINUE
    DEF
    DEFAULT
    DIVIDE
    DOT
    DOT_DOT
    DOUBLE
    DYNAMIC
    ELSE
    END_OF_FILE
    ENUM
    EQUAL
    ERROR
    FALSE
    FOR
    GREATER_THAN
    GREATER_THAN_OR_EQUAL
    IDENTIFIER
    IF
    IN
    INDEX
    INT
    INTERFACE
    INT_BINARY
    INT_HEX
    INT_OCTAL
    IS
    LEFT_BRACE
    LEFT_BRACKET
    LEFT_PARENTHESIS
    LESS_THAN
    LESS_THAN_OR_EQUAL
    LIST
    LIST_NEW
    LOGICAL_AND
    LOGICAL_OR
    MINUS
    MULTIPLY
    NAMESPACE
    NEWLINE
    NOT
    NOT_EQUAL
    NULL
    OVER
    PLUS
    POWER
    QUESTION_MARK
    REMAINDER
    RETURN
    RIGHT_BRACE
    RIGHT_BRACKET
    RIGHT_PARENTHESIS
    SET
    SET_NEW
    SHIFT_LEFT
    SHIFT_RIGHT
    STRING
    SUPER
    SWITCH
    TILDE
    TRUE
    VAR
    WHILE
    WHITESPACE
    YY_INVALID_ACTION

    # Token kinds not used by flex
    START_PARAMETER_LIST
    END_PARAMETER_LIST
  }

  const yy_accept List<TokenKind> = [.YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .END_OF_FILE, .ERROR, .WHITESPACE, .NEWLINE, .NOT, .ERROR, .COMMENT, .REMAINDER, .BITWISE_AND, .ERROR, .LEFT_PARENTHESIS, .RIGHT_PARENTHESIS, .MULTIPLY, .PLUS, .COMMA, .MINUS, .DOT, .DIVIDE, .INT, .INT, .COLON, .LESS_THAN, .ASSIGN, .GREATER_THAN, .QUESTION_MARK, .ERROR, .IDENTIFIER, .LEFT_BRACKET, .RIGHT_BRACKET, .BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LEFT_BRACE, .BITWISE_OR, .RIGHT_BRACE, .TILDE, .WHITESPACE, .NEWLINE, .NOT_EQUAL, .YY_INVALID_ACTION, .STRING, .YY_INVALID_ACTION, .COMMENT, .COMMENT, .ASSIGN_REMAINDER, .LOGICAL_AND, .ASSIGN_BITWISE_AND, .YY_INVALID_ACTION, .CHARACTER, .YY_INVALID_ACTION, .POWER, .ASSIGN_MULTIPLY, .ASSIGN_PLUS, .ASSIGN_MINUS, .DOT_DOT, .ASSIGN_DIVIDE, .YY_INVALID_ACTION, .INT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .SHIFT_LEFT, .LESS_THAN_OR_EQUAL, .EQUAL, .ARROW, .GREATER_THAN_OR_EQUAL, .SHIFT_RIGHT, .ANNOTATION, .IDENTIFIER, .YY_INVALID_ACTION, .INDEX, .YY_INVALID_ACTION, .ASSIGN_BITWISE_XOR, .AS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IF, .IN, .IS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .ASSIGN_BITWISE_OR, .LOGICAL_OR, .ASSIGN_POWER, .DOUBLE, .YY_INVALID_ACTION, .DOUBLE, .INT_BINARY, .INT_OCTAL, .INT_HEX, .ASSIGN_SHIFT_LEFT, .COMPARE, .ASSIGN_SHIFT_RIGHT, .ANNOTATION, .YY_INVALID_ACTION, .ASSIGN_INDEX, .YY_INVALID_ACTION, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DEF, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .VAR, .IDENTIFIER, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .IDENTIFIER, .CASE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ELSE, .ENUM, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NULL, .OVER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .TRUE, .IDENTIFIER, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .LIST, .LIST_NEW, .BREAK, .CLASS, .CONST, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FALSE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .SUPER, .IDENTIFIER, .WHILE, .SET, .SET_NEW, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .RETURN, .SWITCH, .IDENTIFIER, .DEFAULT, .DYNAMIC, .IDENTIFIER, .IDENTIFIER, .CONTINUE, .IDENTIFIER, .IDENTIFIER, .INTERFACE, .NAMESPACE, .YY_INVALID_ACTION]
  const yy_ec = [0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 22, 1, 23, 24, 25, 26, 27, 28, 28, 28, 28, 29, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 32, 33, 34, 30, 1, 35, 36, 37, 38, 39, 40, 30, 41, 42, 30, 43, 44, 45, 46, 47, 48, 30, 49, 50, 51, 52, 53, 54, 55, 56, 30, 57, 58, 59, 60, 1]
  const yy_meta = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 3, 3, 4, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1]
  const yy_base = [0, 0, 0, 290, 291, 287, 59, 264, 58, 284, 262, 56, 56, 291, 291, 54, 261, 291, 260, 267, 258, 75, 53, 291, 44, 51, 59, 291, 0, 0, 54, 291, 257, 230, 230, 42, 42, 53, 66, 62, 68, 225, 238, 53, 227, 240, 233, 63, 61, 291, 291, 271, 113, 291, 101, 291, 269, 268, 291, 291, 291, 291, 108, 291, 267, 245, 291, 291, 291, 291, 291, 105, 116, 128, 109, 132, 0, 244, 242, 291, 291, 291, 242, 0, 0, 249, 240, 224, 291, 0, 223, 211, 225, 213, 218, 211, 206, 203, 210, 204, 0, 201, 0, 206, 206, 210, 197, 199, 204, 193, 195, 201, 226, 202, 291, 291, 291, 138, 142, 146, 120, 150, 0, 291, 291, 291, 0, 224, 291, 185, 203, 198, 186, 103, 200, 199, 194, 187, 181, 0, 191, 190, 184, 178, 174, 186, 173, 184, 0, 178, 205, 166, 186, 185, 174, 0, 166, 164, 172, 161, 167, 0, 0, 172, 161, 159, 0, 0, 159, 158, 169, 0, 166, 145, 144, 291, 291, 0, 0, 0, 156, 157, 158, 0, 159, 150, 151, 0, 155, 0, 291, 291, 143, 143, 156, 109, 107, 0, 0, 92, 0, 0, 92, 84, 0, 79, 71, 0, 0, 291, 170, 174, 178, 180, 183, 186, 188]
  const yy_def = [0, 209, 1, 209, 209, 209, 209, 209, 210, 211, 209, 209, 212, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 213, 214, 209, 209, 209, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 209, 209, 209, 209, 209, 209, 209, 210, 209, 210, 211, 209, 209, 209, 209, 212, 209, 212, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 215, 209, 209, 209, 209, 209, 209, 216, 214, 209, 209, 209, 209, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 215, 209, 209, 209, 216, 209, 209, 209, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 209, 209, 209, 209, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 209, 209, 209, 209, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 209, 209, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 0, 209, 209, 209, 209, 209, 209, 209]
  const yy_nxt = [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 22, 23, 24, 25, 26, 27, 28, 29, 29, 29, 30, 4, 31, 32, 33, 34, 35, 36, 37, 38, 29, 39, 29, 29, 29, 40, 41, 29, 42, 43, 44, 29, 45, 46, 29, 29, 47, 48, 49, 50, 52, 52, 55, 60, 63, 65, 77, 78, 71, 85, 72, 72, 72, 72, 79, 80, 91, 66, 112, 61, 94, 73, 81, 82, 114, 92, 86, 64, 93, 56, 71, 73, 72, 72, 72, 72, 96, 95, 97, 87, 98, 100, 103, 73, 107, 55, 108, 101, 113, 208, 74, 102, 99, 73, 52, 52, 63, 207, 115, 104, 206, 75, 117, 117, 117, 117, 120, 120, 205, 76, 204, 71, 56, 72, 72, 72, 72, 120, 120, 64, 118, 203, 118, 202, 73, 119, 119, 119, 119, 121, 121, 121, 157, 158, 73, 117, 117, 117, 117, 119, 119, 119, 119, 119, 119, 119, 119, 121, 121, 121, 54, 54, 54, 54, 57, 57, 57, 57, 62, 62, 62, 62, 83, 83, 84, 84, 84, 122, 122, 126, 126, 126, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 125, 124, 123, 116, 209, 58, 209, 51, 111, 110, 109, 106, 105, 90, 89, 88, 70, 69, 68, 67, 59, 58, 53, 51, 209, 3, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209]
  const yy_chk = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 8, 11, 12, 15, 24, 24, 22, 30, 22, 22, 22, 22, 25, 25, 35, 15, 47, 11, 36, 22, 26, 26, 48, 35, 30, 12, 35, 8, 21, 22, 21, 21, 21, 21, 37, 36, 37, 30, 38, 39, 40, 21, 43, 54, 43, 39, 47, 206, 21, 39, 38, 21, 52, 52, 62, 205, 48, 40, 203, 21, 71, 71, 71, 71, 74, 74, 202, 21, 199, 72, 54, 72, 72, 72, 72, 120, 120, 62, 73, 196, 73, 195, 72, 73, 73, 73, 73, 75, 75, 75, 133, 133, 72, 117, 117, 117, 117, 118, 118, 118, 118, 119, 119, 119, 119, 121, 121, 121, 210, 210, 210, 210, 211, 211, 211, 211, 212, 212, 212, 212, 213, 213, 214, 214, 214, 215, 215, 216, 216, 216, 194, 193, 192, 188, 186, 185, 184, 182, 181, 180, 174, 173, 172, 170, 169, 168, 165, 164, 163, 160, 159, 158, 157, 156, 154, 153, 152, 151, 150, 149, 147, 146, 145, 144, 143, 142, 141, 140, 138, 137, 136, 135, 134, 132, 131, 130, 129, 127, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 101, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 87, 86, 85, 82, 78, 77, 65, 64, 57, 56, 51, 46, 45, 44, 42, 41, 34, 33, 32, 20, 19, 18, 16, 10, 9, 7, 5, 3, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209]

  # This is the inner loop from "flex", an ancient lexer generator. The output
  # of flex is pretty bad (obfuscated variable names and the opposite of modular
  # code) but it's fast and somewhat standard for compiler design. The code below
  # replaces a simple hand-coded lexer and offers much better performance.
  def tokenize(log Log, source Source) List<Token> {
    var tokens List<Token> = []
    var text = source.contents
    var text_length = text.count

    # For backing up
    var yy_last_accepting_state = 0
    var yy_last_accepting_cpos = 0

    # The current character pointer
    var yy_cp = 0

    while yy_cp < text_length {
      var yy_current_state = 1 # Reset the NFA
      var yy_bp = yy_cp # The pointer to the beginning of the token

      # Search for a match
      while yy_current_state != 209 {
        if yy_cp >= text_length {
          break # This prevents syntax errors from causing infinite loops
        }
        var c = text[yy_cp]
        var index = c < 127 ? c : 127
        var yy_c = yy_ec[index]
        if yy_accept[yy_current_state] != .YY_INVALID_ACTION {
          yy_last_accepting_state = yy_current_state
          yy_last_accepting_cpos = yy_cp
        }
        while yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state {
          yy_current_state = yy_def[yy_current_state]
          if yy_current_state >= 210 {
            yy_c = yy_meta[yy_c]
          }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c]
        yy_cp += 1
      }

      # Find the action
      var yy_act = yy_accept[yy_current_state]
      while yy_act == .YY_INVALID_ACTION {
        # Have to back up
        yy_cp = yy_last_accepting_cpos
        yy_current_state = yy_last_accepting_state
        yy_act = yy_accept[yy_current_state]
      }

      # Ignore whitespace
      if yy_act == .WHITESPACE {
        continue
      }

      # This is the default action in flex, which is usually called ECHO
      else if yy_act == .ERROR {
        var range = Range.new(source, yy_bp, yy_bp + 1)
        log.syntaxErrorExtraData(range, range.toString)
        break
      }

      # Ignore END_OF_FILE since this loop must still perform the last action
      else if yy_act != .END_OF_FILE {
        tokens.append(Token.new(Range.new(source, yy_bp, yy_cp), yy_act))

        # These tokens start with a ">" and may need to be split if we discover
        # that they should really be END_PARAMETER_LIST tokens. Save enough room
        # for these tokens to be split into pieces, that way all of the tokens
        # don't have to be shifted over repeatedly inside prepareTokens(). The
        # ">>" token may become ">" + ">", the ">=" token may become ">" + "=",
        # and the ">>=" token may become ">" + ">=" and so ">" + ">" + "=".
        if yy_act == .ASSIGN_SHIFT_RIGHT || yy_act == .SHIFT_RIGHT || yy_act == .GREATER_THAN_OR_EQUAL {
          tokens.append(null)
          if yy_act == .ASSIGN_SHIFT_RIGHT {
            tokens.append(null)
          }
        }
      }
    }

    # Every token stream ends in END_OF_FILE
    tokens.append(Token.new(Range.new(source, text_length, text_length), .END_OF_FILE))

    # Also return preprocessor token presence so the preprocessor can be avoided
    return tokens
  }
}
