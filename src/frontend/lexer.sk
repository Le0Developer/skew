////////////////////////////////////////////////////////////////////////////////
//
// This is a generated file, all edits will be lost!
//
////////////////////////////////////////////////////////////////////////////////

namespace astral {
  enum TokenKind {
    ARROW
    ASSIGN
    BITWISE_AND
    BITWISE_OR
    BITWISE_XOR
    BREAK
    CHARACTER
    CLASS
    COLON
    COMMA
    COMMENT
    CONTINUE
    DEF
    DIVIDE
    DOT
    DOUBLE
    ELSE
    END_OF_FILE
    EQUAL
    ERROR
    FALSE
    GREATER_THAN
    GREATER_THAN_OR_EQUAL
    IDEF
    IDENTIFIER
    IF
    INT
    INTERFACE
    IVAR
    LEFT_BRACE
    LEFT_BRACKET
    LEFT_PARENTHESIS
    LESS_THAN
    LESS_THAN_OR_EQUAL
    LOGICAL_AND
    LOGICAL_OR
    MINUS
    MULTIPLY
    NAMESPACE
    NEWLINE
    NOT
    NOT_EQUAL
    NULL
    PLUS
    QUESTION_MARK
    REMAINDER
    RETURN
    RIGHT_BRACE
    RIGHT_BRACKET
    RIGHT_PARENTHESIS
    SHIFT_LEFT
    SHIFT_RIGHT
    STRING
    SUPER
    TILDE
    TRUE
    VAR
    WHILE
    WHITESPACE
    YY_INVALID_ACTION

    // Token kinds not used by flex
    START_PARAMETER_LIST
    END_PARAMETER_LIST
  }

  final List<TokenKind> yy_accept = [.YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .END_OF_FILE, .ERROR, .WHITESPACE, .NEWLINE, .NOT, .ERROR, .REMAINDER, .BITWISE_AND, .ERROR, .LEFT_PARENTHESIS, .RIGHT_PARENTHESIS, .MULTIPLY, .PLUS, .COMMA, .MINUS, .DOT, .DIVIDE, .INT, .COLON, .LESS_THAN, .ASSIGN, .GREATER_THAN, .QUESTION_MARK, .IDENTIFIER, .LEFT_BRACKET, .RIGHT_BRACKET, .BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LEFT_BRACE, .BITWISE_OR, .RIGHT_BRACE, .TILDE, .WHITESPACE, .NEWLINE, .NOT_EQUAL, .YY_INVALID_ACTION, .STRING, .YY_INVALID_ACTION, .LOGICAL_AND, .YY_INVALID_ACTION, .CHARACTER, .YY_INVALID_ACTION, .COMMENT, .YY_INVALID_ACTION, .INT, .SHIFT_LEFT, .LESS_THAN_OR_EQUAL, .EQUAL, .ARROW, .GREATER_THAN_OR_EQUAL, .SHIFT_RIGHT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IF, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LOGICAL_OR, .COMMENT, .DOUBLE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DEF, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .VAR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ELSE, .IDENTIFIER, .IDEF, .IDENTIFIER, .IVAR, .IDENTIFIER, .NULL, .IDENTIFIER, .IDENTIFIER, .TRUE, .IDENTIFIER, .BREAK, .CLASS, .IDENTIFIER, .FALSE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .SUPER, .WHILE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .RETURN, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .CONTINUE, .IDENTIFIER, .IDENTIFIER, .INTERFACE, .NAMESPACE, .YY_INVALID_ACTION]
  final var yy_ec = [0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 1, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 1, 19, 20, 21, 22, 1, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 25, 26, 27, 23, 1, 28, 29, 30, 31, 32, 33, 23, 34, 35, 23, 36, 37, 38, 39, 40, 41, 23, 42, 43, 44, 45, 46, 47, 23, 23, 23, 48, 49, 50, 51, 1]
  final var yy_meta = [0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1]
  final var yy_base = [0, 0, 0, 161, 162, 158, 50, 139, 49, 162, 151, 47, 162, 162, 162, 162, 162, 162, 162, 141, 41, 162, 40, 41, 43, 162, 0, 162, 162, 162, 114, 28, 123, 117, 125, 36, 38, 120, 106, 108, 121, 114, 162, 98, 162, 162, 144, 68, 162, 52, 162, 142, 162, 65, 162, 141, 0, 126, 61, 162, 162, 162, 162, 162, 162, 0, 110, 113, 101, 106, 95, 100, 104, 0, 91, 106, 95, 95, 87, 89, 84, 86, 92, 162, 0, 109, 97, 81, 79, 0, 90, 78, 87, 87, 76, 85, 79, 70, 82, 81, 0, 75, 75, 67, 74, 0, 76, 0, 65, 0, 63, 0, 63, 62, 0, 71, 0, 0, 63, 0, 68, 59, 59, 0, 0, 44, 60, 59, 0, 54, 55, 54, 0, 49, 48, 0, 0, 162, 90, 93, 76, 96]
  final var yy_def = [0, 137, 1, 137, 137, 137, 137, 137, 138, 137, 137, 139, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 140, 137, 137, 137, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 137, 137, 137, 137, 137, 137, 137, 138, 137, 138, 137, 139, 137, 139, 141, 137, 137, 137, 137, 137, 137, 137, 137, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 137, 141, 137, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 0, 137, 137, 137, 137]
  final var yy_nxt = [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 4, 28, 29, 26, 30, 31, 32, 33, 34, 26, 35, 26, 26, 26, 36, 26, 26, 37, 38, 39, 26, 40, 41, 42, 43, 44, 45, 47, 47, 50, 54, 57, 50, 58, 59, 60, 61, 62, 63, 64, 67, 76, 72, 68, 73, 47, 47, 55, 54, 51, 74, 57, 51, 58, 65, 136, 135, 75, 77, 134, 133, 132, 131, 130, 129, 55, 49, 49, 49, 53, 53, 53, 84, 128, 84, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 85, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 137, 137, 46, 83, 82, 81, 80, 79, 78, 71, 70, 69, 66, 56, 52, 48, 46, 137, 3, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137]
  final var yy_chk = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 8, 11, 20, 49, 20, 22, 22, 23, 23, 24, 24, 31, 36, 35, 31, 35, 47, 47, 11, 53, 8, 35, 58, 49, 58, 140, 134, 133, 35, 36, 131, 130, 129, 127, 126, 125, 53, 138, 138, 138, 139, 139, 139, 141, 122, 141, 121, 120, 118, 115, 113, 112, 110, 108, 106, 104, 103, 102, 101, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 88, 87, 86, 85, 82, 81, 80, 79, 78, 77, 76, 75, 74, 72, 71, 70, 69, 68, 67, 66, 57, 55, 51, 46, 43, 41, 40, 39, 38, 37, 34, 33, 32, 30, 19, 10, 7, 5, 3, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137]

  // This is the inner loop from "flex", an ancient lexer generator. The output
  // of flex is pretty bad (obfuscated variable names and the opposite of modular
  // code) but it's fast and somewhat standard for compiler design. The code below
  // replaces a simple hand-coded lexer and offers much better performance.
  List<Token> tokenize(Log log, Source source) {
    List<Token> tokens = []
    var text = source.contents
    var text_length = text.size()

    // For backing up
    var yy_last_accepting_state = 0
    var yy_last_accepting_cpos = 0

    // The current character pointer
    var yy_cp = 0

    while (yy_cp < text_length) {
      var yy_current_state = 1 // Reset the NFA
      var yy_bp = yy_cp // The pointer to the beginning of the token

      // Search for a match
      while (yy_current_state != 137) {
        if (yy_cp >= text_length) {
          break // This prevents syntax errors from causing infinite loops
        }
        var c = text[yy_cp]
        var index = c < 127 ? c : 127
        var yy_c = yy_ec[index]
        if (yy_accept[yy_current_state] != .YY_INVALID_ACTION) {
          yy_last_accepting_state = yy_current_state
          yy_last_accepting_cpos = yy_cp
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
          yy_current_state = yy_def[yy_current_state]
          if (yy_current_state >= 138) {
            yy_c = yy_meta[yy_c]
          }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c]
        yy_cp++
      }

      // Find the action
      var yy_act = yy_accept[yy_current_state]
      while (yy_act == .YY_INVALID_ACTION) {
        // Have to back up
        yy_cp = yy_last_accepting_cpos
        yy_current_state = yy_last_accepting_state
        yy_act = yy_accept[yy_current_state]
      }

      // Ignore whitespace
      if (yy_act == .WHITESPACE) {
        continue
      }

      // This is the default action in flex, which is usually called ECHO
      else if (yy_act == .ERROR) {
        var iterator = unicode.StringIterator.INSTANCE.reset(text, yy_bp)
        iterator.nextCodePoint()
        var range = Range(source, yy_bp, iterator.index)
        log.syntaxErrorExtraData(range, range.toString())
        break
      }

      // Ignore END_OF_FILE since this loop must still perform the last action
      else if (yy_act != .END_OF_FILE) {
        tokens.push(Token(Range(source, yy_bp, yy_cp), yy_act))
      }
    }

    // Every token stream ends in END_OF_FILE
    tokens.push(Token(Range(source, text_length, text_length), .END_OF_FILE))

    // Also return preprocessor token presence so the preprocessor can be avoided
    return tokens
  }
}
