////////////////////////////////////////////////////////////////////////////////
//
// This is a generated file, all edits will be lost!
//
////////////////////////////////////////////////////////////////////////////////

namespace astral {
  enum TokenKind {
    ARROW
    AS
    ASSIGN
    ASSIGN_BITWISE_AND
    ASSIGN_BITWISE_OR
    ASSIGN_BITWISE_XOR
    ASSIGN_DIVIDE
    ASSIGN_MINUS
    ASSIGN_MULTIPLY
    ASSIGN_PLUS
    ASSIGN_REMAINDER
    ASSIGN_SHIFT_LEFT
    ASSIGN_SHIFT_RIGHT
    BITWISE_AND
    BITWISE_OR
    BITWISE_XOR
    BREAK
    CHARACTER
    CLASS
    COLON
    COMMA
    COMMENT
    CONTINUE
    DEF
    DIVIDE
    DOT
    DOUBLE
    DYNAMIC
    ELSE
    END_OF_FILE
    EQUAL
    ERROR
    FALSE
    GREATER_THAN
    GREATER_THAN_OR_EQUAL
    IDENTIFIER
    IF
    INT
    INTERFACE
    LEFT_BRACE
    LEFT_BRACKET
    LEFT_PARENTHESIS
    LESS_THAN
    LESS_THAN_OR_EQUAL
    LOGICAL_AND
    LOGICAL_OR
    MINUS
    MULTIPLY
    NAMESPACE
    NEWLINE
    NOT
    NOT_EQUAL
    NULL
    PLUS
    QUESTION_MARK
    REMAINDER
    RETURN
    RIGHT_BRACE
    RIGHT_BRACKET
    RIGHT_PARENTHESIS
    SHIFT_LEFT
    SHIFT_RIGHT
    STRING
    SUPER
    TILDE
    TRUE
    VAR
    WHILE
    WHITESPACE
    YY_INVALID_ACTION

    // Token kinds not used by flex
    START_PARAMETER_LIST
    END_PARAMETER_LIST
  }

  final List<TokenKind> yy_accept = [.YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .END_OF_FILE, .ERROR, .WHITESPACE, .NEWLINE, .NOT, .ERROR, .REMAINDER, .BITWISE_AND, .ERROR, .LEFT_PARENTHESIS, .RIGHT_PARENTHESIS, .MULTIPLY, .PLUS, .COMMA, .MINUS, .DOT, .DIVIDE, .INT, .COLON, .LESS_THAN, .ASSIGN, .GREATER_THAN, .QUESTION_MARK, .IDENTIFIER, .LEFT_BRACKET, .RIGHT_BRACKET, .BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LEFT_BRACE, .BITWISE_OR, .RIGHT_BRACE, .TILDE, .WHITESPACE, .NEWLINE, .NOT_EQUAL, .YY_INVALID_ACTION, .STRING, .YY_INVALID_ACTION, .ASSIGN_REMAINDER, .LOGICAL_AND, .ASSIGN_BITWISE_AND, .YY_INVALID_ACTION, .CHARACTER, .YY_INVALID_ACTION, .ASSIGN_MULTIPLY, .ASSIGN_PLUS, .ASSIGN_MINUS, .YY_INVALID_ACTION, .COMMENT, .ASSIGN_DIVIDE, .YY_INVALID_ACTION, .INT, .SHIFT_LEFT, .LESS_THAN_OR_EQUAL, .EQUAL, .ARROW, .GREATER_THAN_OR_EQUAL, .SHIFT_RIGHT, .IDENTIFIER, .ASSIGN_BITWISE_XOR, .AS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IF, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ASSIGN_BITWISE_OR, .LOGICAL_OR, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .COMMENT, .COMMENT, .DOUBLE, .ASSIGN_SHIFT_LEFT, .ASSIGN_SHIFT_RIGHT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DEF, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .VAR, .IDENTIFIER, .WHITESPACE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ELSE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NULL, .IDENTIFIER, .IDENTIFIER, .TRUE, .IDENTIFIER, .BREAK, .CLASS, .IDENTIFIER, .IDENTIFIER, .FALSE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .SUPER, .WHILE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .RETURN, .IDENTIFIER, .DYNAMIC, .IDENTIFIER, .IDENTIFIER, .CONTINUE, .IDENTIFIER, .IDENTIFIER, .INTERFACE, .NAMESPACE, .YY_INVALID_ACTION]
  final var yy_ec = [0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 1, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 1, 19, 20, 21, 22, 1, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 25, 26, 27, 23, 1, 28, 29, 30, 31, 32, 33, 23, 34, 35, 23, 36, 37, 38, 39, 40, 41, 23, 42, 43, 44, 45, 46, 47, 23, 48, 23, 49, 50, 51, 52, 1]
  final var yy_meta = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1]
  final var yy_base = [0, 0, 0, 186, 187, 183, 51, 164, 50, 163, 49, 49, 187, 187, 162, 161, 187, 160, 187, 47, 44, 187, 45, 50, 52, 187, 0, 187, 187, 159, 135, 135, 39, 30, 139, 147, 27, 40, 142, 128, 130, 143, 136, 187, 57, 187, 187, 167, 78, 187, 77, 187, 165, 187, 187, 187, 75, 187, 164, 187, 187, 187, 73, 163, 187, 148, 71, 144, 187, 187, 187, 187, 143, 0, 187, 0, 130, 133, 121, 126, 119, 114, 119, 0, 111, 116, 116, 108, 110, 105, 107, 113, 187, 187, 76, 79, 80, 144, 187, 129, 187, 187, 117, 101, 99, 0, 114, 109, 97, 107, 106, 100, 91, 103, 102, 0, 96, 187, 96, 88, 95, 91, 0, 96, 85, 83, 0, 83, 82, 0, 91, 0, 0, 83, 86, 0, 87, 78, 79, 0, 0, 61, 75, 76, 75, 0, 69, 0, 69, 68, 0, 65, 62, 0, 0, 187, 107, 109, 91, 111, 113, 115]
  final var yy_def = [0, 155, 1, 155, 155, 155, 155, 155, 156, 155, 155, 157, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 158, 155, 155, 155, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 155, 155, 155, 155, 155, 155, 155, 156, 155, 156, 155, 155, 155, 157, 155, 157, 155, 155, 155, 159, 160, 155, 155, 155, 155, 155, 155, 155, 155, 155, 158, 155, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 155, 155, 159, 161, 159, 160, 155, 155, 155, 155, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 155, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 0, 155, 155, 155, 155, 155, 155]
  final var yy_nxt = [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 4, 28, 29, 30, 31, 32, 33, 34, 35, 26, 36, 26, 26, 26, 37, 26, 26, 38, 39, 40, 26, 41, 42, 26, 43, 44, 45, 46, 48, 48, 51, 54, 57, 62, 65, 83, 66, 79, 63, 67, 68, 84, 64, 85, 55, 69, 70, 71, 72, 58, 52, 77, 92, 80, 78, 48, 48, 51, 57, 95, 86, 65, 95, 66, 96, 95, 95, 96, 73, 154, 117, 96, 153, 152, 151, 58, 150, 52, 149, 148, 147, 146, 93, 50, 50, 56, 56, 94, 94, 97, 97, 96, 96, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 99, 98, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 155, 155, 47, 91, 90, 89, 88, 87, 82, 81, 76, 75, 74, 61, 60, 59, 53, 49, 47, 155, 3, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155]
  final var yy_chk = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 8, 10, 11, 19, 20, 36, 20, 33, 19, 22, 22, 36, 19, 37, 10, 23, 23, 24, 24, 11, 8, 32, 44, 33, 32, 48, 48, 50, 56, 62, 37, 66, 94, 66, 62, 95, 96, 94, 158, 152, 95, 96, 151, 149, 148, 56, 146, 50, 144, 143, 142, 141, 44, 156, 156, 157, 157, 159, 159, 160, 160, 161, 161, 138, 137, 136, 134, 133, 130, 128, 127, 125, 124, 123, 121, 120, 119, 118, 116, 114, 113, 112, 111, 110, 109, 108, 107, 106, 104, 103, 102, 99, 97, 91, 90, 89, 88, 87, 86, 85, 84, 82, 81, 80, 79, 78, 77, 76, 72, 67, 65, 63, 58, 52, 47, 42, 41, 40, 39, 38, 35, 34, 31, 30, 29, 17, 15, 14, 9, 7, 5, 3, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155]

  // This is the inner loop from "flex", an ancient lexer generator. The output
  // of flex is pretty bad (obfuscated variable names and the opposite of modular
  // code) but it's fast and somewhat standard for compiler design. The code below
  // replaces a simple hand-coded lexer and offers much better performance.
  List<Token> tokenize(Log log, Source source) {
    List<Token> tokens = []
    var text = source.contents
    var text_length = text.size()

    // For backing up
    var yy_last_accepting_state = 0
    var yy_last_accepting_cpos = 0

    // The current character pointer
    var yy_cp = 0

    while (yy_cp < text_length) {
      var yy_current_state = 1 // Reset the NFA
      var yy_bp = yy_cp // The pointer to the beginning of the token

      // Search for a match
      while (yy_current_state != 155) {
        if (yy_cp >= text_length) {
          break // This prevents syntax errors from causing infinite loops
        }
        var c = text[yy_cp]
        var index = c < 127 ? c : 127
        var yy_c = yy_ec[index]
        if (yy_accept[yy_current_state] != .YY_INVALID_ACTION) {
          yy_last_accepting_state = yy_current_state
          yy_last_accepting_cpos = yy_cp
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
          yy_current_state = yy_def[yy_current_state]
          if (yy_current_state >= 156) {
            yy_c = yy_meta[yy_c]
          }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c]
        yy_cp++
      }

      // Find the action
      var yy_act = yy_accept[yy_current_state]
      while (yy_act == .YY_INVALID_ACTION) {
        // Have to back up
        yy_cp = yy_last_accepting_cpos
        yy_current_state = yy_last_accepting_state
        yy_act = yy_accept[yy_current_state]
      }

      // Ignore whitespace
      if (yy_act == .WHITESPACE) {
        continue
      }

      // This is the default action in flex, which is usually called ECHO
      else if (yy_act == .ERROR) {
        var iterator = unicode.StringIterator.INSTANCE.reset(text, yy_bp)
        iterator.nextCodePoint()
        var range = Range(source, yy_bp, iterator.index)
        log.syntaxErrorExtraData(range, range.toString())
        break
      }

      // Ignore END_OF_FILE since this loop must still perform the last action
      else if (yy_act != .END_OF_FILE) {
        tokens.push(Token(Range(source, yy_bp, yy_cp), yy_act))

        // These tokens start with a ">" and may need to be split if we discover
        // that they should really be END_PARAMETER_LIST tokens. Save enough room
        // for these tokens to be split into pieces, that way all of the tokens
        // don't have to be shifted over repeatedly inside prepareTokens(). The
        // ">>" token may become ">" + ">", the ">=" token may become ">" + "=",
        // and the ">>=" token may become ">" + ">=" and so ">" + ">" + "=".
        if (yy_act == .ASSIGN_SHIFT_RIGHT || yy_act == .SHIFT_RIGHT || yy_act == .GREATER_THAN_OR_EQUAL) {
          tokens.push(null)
          if (yy_act == .ASSIGN_SHIFT_RIGHT) {
            tokens.push(null)
          }
        }
      }
    }

    // Every token stream ends in END_OF_FILE
    tokens.push(Token(Range(source, text_length, text_length), .END_OF_FILE))

    // Also return preprocessor token presence so the preprocessor can be avoided
    return tokens
  }
}
