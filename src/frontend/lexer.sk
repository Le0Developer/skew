################################################################################
#
# This is a generated file, all edits will be lost!
#
################################################################################

namespace Skew {
  enum TokenKind {
    ANNOTATION
    ARROW
    AS
    ASSIGN
    ASSIGN_BITWISE_AND
    ASSIGN_BITWISE_OR
    ASSIGN_BITWISE_XOR
    ASSIGN_DIVIDE
    ASSIGN_INDEX
    ASSIGN_MINUS
    ASSIGN_MULTIPLY
    ASSIGN_PLUS
    ASSIGN_POWER
    ASSIGN_REMAINDER
    ASSIGN_SHIFT_LEFT
    ASSIGN_SHIFT_RIGHT
    ASSIGN_UNSIGNED_SHIFT_RIGHT
    BITWISE_AND
    BITWISE_OR
    BITWISE_XOR
    BREAK
    CASE
    CATCH
    CHARACTER
    CLASS
    COLON
    COMMA
    COMMENT
    COMPARE
    CONST
    CONTINUE
    DECREMENT
    DEF
    DEFAULT
    DIVIDE
    DOT
    DOT_DOT
    DOUBLE
    DOUBLE_COLON
    DYNAMIC
    ELSE
    END_OF_FILE
    ENUM
    EQUAL
    ERROR
    FALSE
    FINALLY
    FOR
    GREATER_THAN
    GREATER_THAN_OR_EQUAL
    IDENTIFIER
    IF
    IN
    INCREMENT
    INDEX
    INT
    INTERFACE
    INT_BINARY
    INT_HEX
    INT_OCTAL
    IS
    LEFT_BRACE
    LEFT_BRACKET
    LEFT_PARENTHESIS
    LESS_THAN
    LESS_THAN_OR_EQUAL
    LIST
    LIST_NEW
    LOGICAL_AND
    LOGICAL_OR
    MINUS
    MULTIPLY
    NAMESPACE
    NEWLINE
    NOT
    NOT_EQUAL
    NULL
    NULL_DOT
    NULL_JOIN
    OVER
    PLUS
    POWER
    QUESTION_MARK
    REMAINDER
    RETURN
    RIGHT_BRACE
    RIGHT_BRACKET
    RIGHT_PARENTHESIS
    SEMICOLON
    SET
    SET_NEW
    SHIFT_LEFT
    SHIFT_RIGHT
    STRING
    SUPER
    SWITCH
    THROW
    TILDE
    TRUE
    TRY
    UNSIGNED_SHIFT_RIGHT
    VAR
    WHILE
    WHITESPACE
    YY_INVALID_ACTION

    # Token kinds not used by flex
    START_PARAMETER_LIST
    END_PARAMETER_LIST
  }

  const yy_accept List<TokenKind> = [.YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .END_OF_FILE, .ERROR, .WHITESPACE, .NEWLINE, .NOT, .ERROR, .COMMENT, .REMAINDER, .BITWISE_AND, .ERROR, .LEFT_PARENTHESIS, .RIGHT_PARENTHESIS, .MULTIPLY, .PLUS, .COMMA, .MINUS, .DOT, .DIVIDE, .INT, .INT, .COLON, .SEMICOLON, .LESS_THAN, .ASSIGN, .GREATER_THAN, .QUESTION_MARK, .ERROR, .IDENTIFIER, .LEFT_BRACKET, .RIGHT_BRACKET, .BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LEFT_BRACE, .BITWISE_OR, .RIGHT_BRACE, .TILDE, .WHITESPACE, .NEWLINE, .NOT_EQUAL, .YY_INVALID_ACTION, .STRING, .YY_INVALID_ACTION, .COMMENT, .COMMENT, .ASSIGN_REMAINDER, .LOGICAL_AND, .ASSIGN_BITWISE_AND, .YY_INVALID_ACTION, .CHARACTER, .YY_INVALID_ACTION, .POWER, .ASSIGN_MULTIPLY, .INCREMENT, .ASSIGN_PLUS, .DECREMENT, .ASSIGN_MINUS, .DOT_DOT, .ASSIGN_DIVIDE, .YY_INVALID_ACTION, .INT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .DOUBLE_COLON, .SHIFT_LEFT, .LESS_THAN_OR_EQUAL, .EQUAL, .ARROW, .GREATER_THAN_OR_EQUAL, .SHIFT_RIGHT, .NULL_DOT, .NULL_JOIN, .ANNOTATION, .IDENTIFIER, .YY_INVALID_ACTION, .INDEX, .YY_INVALID_ACTION, .ASSIGN_BITWISE_XOR, .AS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IF, .IN, .IS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .ASSIGN_BITWISE_OR, .LOGICAL_OR, .ASSIGN_POWER, .DOUBLE, .YY_INVALID_ACTION, .DOUBLE, .INT_BINARY, .INT_OCTAL, .INT_HEX, .ASSIGN_SHIFT_LEFT, .COMPARE, .ASSIGN_SHIFT_RIGHT, .UNSIGNED_SHIFT_RIGHT, .ANNOTATION, .YY_INVALID_ACTION, .ASSIGN_INDEX, .YY_INVALID_ACTION, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DEF, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .TRY, .VAR, .IDENTIFIER, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .ASSIGN_UNSIGNED_SHIFT_RIGHT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .IDENTIFIER, .CASE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ELSE, .ENUM, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NULL, .OVER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .TRUE, .IDENTIFIER, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .DOUBLE, .LIST, .LIST_NEW, .BREAK, .CATCH, .CLASS, .CONST, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FALSE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .SUPER, .IDENTIFIER, .THROW, .WHILE, .SET, .SET_NEW, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .RETURN, .SWITCH, .IDENTIFIER, .DEFAULT, .DYNAMIC, .FINALLY, .IDENTIFIER, .IDENTIFIER, .CONTINUE, .IDENTIFIER, .IDENTIFIER, .INTERFACE, .NAMESPACE, .YY_INVALID_ACTION]
  const yy_ec = [0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 29, 29, 30, 29, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 33, 34, 35, 31, 1, 36, 37, 38, 39, 40, 41, 31, 42, 43, 31, 44, 45, 46, 47, 48, 49, 31, 50, 51, 52, 53, 54, 55, 56, 57, 31, 58, 59, 60, 61, 1]
  const yy_meta = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 4, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1]
  const yy_base = [0, 0, 0, 328, 329, 325, 60, 301, 59, 322, 299, 57, 57, 329, 329, 55, 56, 329, 53, 307, 297, 77, 54, 299, 329, 52, 60, 62, 73, 0, 0, 75, 329, 295, 268, 268, 63, 61, 57, 67, 65, 77, 263, 276, 66, 29, 279, 272, 89, 95, 329, 329, 311, 121, 329, 122, 329, 309, 308, 329, 329, 329, 329, 117, 329, 307, 284, 329, 329, 329, 329, 329, 329, 329, 119, 126, 144, 110, 133, 0, 329, 283, 281, 329, 329, 329, 106, 329, 329, 0, 0, 290, 280, 264, 329, 0, 263, 83, 266, 254, 259, 252, 247, 244, 251, 248, 244, 0, 241, 0, 246, 246, 250, 237, 239, 244, 236, 114, 235, 241, 267, 242, 329, 329, 329, 154, 158, 162, 130, 150, 0, 329, 329, 329, 256, 0, 264, 329, 224, 242, 237, 238, 224, 109, 238, 237, 232, 225, 219, 233, 0, 228, 227, 221, 215, 211, 223, 210, 213, 220, 0, 0, 214, 242, 202, 172, 329, 222, 221, 210, 0, 211, 201, 199, 207, 196, 202, 0, 0, 207, 201, 195, 193, 0, 0, 193, 192, 203, 185, 0, 199, 178, 177, 177, 181, 329, 329, 0, 0, 0, 0, 189, 190, 191, 0, 188, 191, 182, 183, 0, 187, 0, 0, 329, 329, 175, 175, 188, 168, 153, 152, 0, 0, 146, 0, 0, 0, 120, 105, 0, 101, 43, 0, 0, 329, 202, 206, 210, 212, 215, 218, 220]
  const yy_def = [0, 234, 1, 234, 234, 234, 234, 234, 235, 236, 234, 234, 237, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 238, 239, 234, 234, 234, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 234, 234, 234, 234, 234, 234, 234, 235, 234, 235, 236, 234, 234, 234, 234, 237, 234, 237, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 240, 234, 234, 234, 234, 234, 234, 234, 234, 234, 241, 239, 234, 234, 234, 234, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 240, 234, 234, 234, 234, 241, 234, 234, 234, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 234, 234, 234, 234, 234, 234, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 234, 234, 234, 234, 234, 234, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 234, 234, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 0, 234, 234, 234, 234, 234, 234, 234]
  const yy_nxt = [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 30, 31, 4, 32, 33, 34, 35, 36, 37, 38, 39, 30, 40, 30, 30, 30, 41, 42, 30, 43, 44, 45, 30, 46, 47, 30, 30, 48, 49, 50, 51, 53, 53, 56, 61, 64, 66, 70, 68, 74, 116, 75, 75, 75, 75, 81, 82, 71, 117, 67, 69, 62, 233, 76, 83, 84, 85, 86, 87, 65, 91, 57, 74, 76, 75, 75, 75, 75, 97, 88, 100, 102, 104, 103, 120, 107, 76, 98, 92, 105, 99, 108, 110, 77, 106, 109, 76, 101, 114, 122, 115, 93, 53, 53, 78, 64, 56, 128, 128, 111, 133, 134, 79, 140, 141, 121, 125, 125, 125, 125, 232, 74, 231, 75, 75, 75, 75, 128, 128, 65, 129, 129, 129, 123, 57, 76, 126, 230, 126, 173, 174, 127, 127, 127, 127, 76, 159, 129, 129, 129, 160, 125, 125, 125, 125, 127, 127, 127, 127, 127, 127, 127, 127, 165, 193, 229, 193, 228, 227, 194, 194, 194, 194, 165, 194, 194, 194, 194, 194, 194, 194, 194, 55, 55, 55, 55, 58, 58, 58, 58, 63, 63, 63, 63, 89, 89, 90, 90, 90, 130, 130, 135, 135, 135, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 172, 171, 170, 169, 168, 167, 166, 164, 163, 162, 161, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 139, 138, 137, 136, 132, 131, 124, 234, 59, 234, 52, 119, 118, 113, 112, 96, 95, 94, 80, 73, 72, 60, 59, 54, 52, 234, 3, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234]
  const yy_chk = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 8, 11, 12, 15, 18, 16, 22, 45, 22, 22, 22, 22, 25, 25, 18, 45, 15, 16, 11, 231, 22, 26, 26, 27, 27, 28, 12, 31, 8, 21, 22, 21, 21, 21, 21, 36, 28, 37, 38, 39, 38, 48, 40, 21, 36, 31, 39, 36, 40, 41, 21, 39, 40, 21, 37, 44, 49, 44, 31, 53, 53, 21, 63, 55, 77, 77, 41, 86, 86, 21, 97, 97, 48, 74, 74, 74, 74, 230, 75, 228, 75, 75, 75, 75, 128, 128, 63, 78, 78, 78, 49, 55, 75, 76, 227, 76, 143, 143, 76, 76, 76, 76, 75, 117, 129, 129, 129, 117, 125, 125, 125, 125, 126, 126, 126, 126, 127, 127, 127, 127, 125, 165, 223, 165, 220, 219, 165, 165, 165, 165, 125, 193, 193, 193, 193, 194, 194, 194, 194, 235, 235, 235, 235, 236, 236, 236, 236, 237, 237, 237, 237, 238, 238, 239, 239, 239, 240, 240, 241, 241, 241, 218, 217, 216, 215, 210, 208, 207, 206, 205, 203, 202, 201, 192, 191, 190, 188, 187, 186, 185, 182, 181, 180, 179, 176, 175, 174, 173, 172, 171, 169, 168, 167, 164, 163, 162, 159, 158, 157, 156, 155, 154, 153, 152, 151, 149, 148, 147, 146, 145, 144, 142, 141, 140, 139, 138, 136, 134, 121, 120, 119, 118, 116, 115, 114, 113, 112, 111, 110, 108, 106, 105, 104, 103, 102, 101, 100, 99, 98, 96, 93, 92, 91, 82, 81, 66, 65, 58, 57, 52, 47, 46, 43, 42, 35, 34, 33, 23, 20, 19, 10, 9, 7, 5, 3, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234]

  # This is the inner loop from "flex", an ancient lexer generator. The output
  # of flex is pretty bad (obfuscated variable names and the opposite of modular
  # code) but it's fast and somewhat standard for compiler design. The code below
  # replaces a simple hand-coded lexer and offers much better performance.
  def tokenize(log Log, source Source) List<Token> {
    var tokens List<Token> = []
    var text = source.contents
    var text_length = text.count

    # For backing up
    var yy_last_accepting_state = 0
    var yy_last_accepting_cpos = 0

    # The current character pointer
    var yy_cp = 0

    while yy_cp < text_length {
      var yy_current_state = 1 # Reset the NFA
      var yy_bp = yy_cp # The pointer to the beginning of the token

      # Search for a match
      while yy_current_state != 234 {
        if yy_cp >= text_length {
          break # This prevents syntax errors from causing infinite loops
        }
        var c = text[yy_cp]
        var index = c < 127 ? c : 127
        var yy_c = yy_ec[index]
        if yy_accept[yy_current_state] != .YY_INVALID_ACTION {
          yy_last_accepting_state = yy_current_state
          yy_last_accepting_cpos = yy_cp
        }
        while yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state {
          yy_current_state = yy_def[yy_current_state]
          if yy_current_state >= 235 {
            yy_c = yy_meta[yy_c]
          }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c]
        yy_cp++
      }

      # Find the action
      var yy_act = yy_accept[yy_current_state]
      while yy_act == .YY_INVALID_ACTION {
        # Have to back up
        yy_cp = yy_last_accepting_cpos
        yy_current_state = yy_last_accepting_state
        yy_act = yy_accept[yy_current_state]
      }

      # Ignore whitespace
      if yy_act == .WHITESPACE {
        continue
      }

      # This is the default action in flex, which is usually called ECHO
      else if yy_act == .ERROR {
        var iterator = Unicode.StringIterator.INSTANCE.reset(text, yy_bp)
        iterator.nextCodePoint
        var range = Range.new(source, yy_bp, iterator.index)
        log.syntaxErrorExtraData(range, range.toString)
        break
      }

      # Ignore END_OF_FILE since this loop must still perform the last action
      else if yy_act != .END_OF_FILE {
        tokens.append(Token.new(Range.new(source, yy_bp, yy_cp), yy_act))

        # These tokens start with a ">" and may need to be split if we discover
        # that they should really be END_PARAMETER_LIST tokens. Save enough room
        # for these tokens to be split into pieces, that way all of the tokens
        # don't have to be shifted over repeatedly inside prepareTokens(). The
        # ">>" token may become ">" + ">", the ">=" token may become ">" + "=",
        # the ">>>" token may become ">" + ">>" and ultimately ">" + ">" + ">",
        # the ">>=" token may ultimately become ">" + ">" + "=", and the ">>>="
        # token may ultimately become ">" + ">" + ">" + "=".
        if yy_act == .ASSIGN_SHIFT_RIGHT || yy_act == .ASSIGN_UNSIGNED_SHIFT_RIGHT || yy_act == .GREATER_THAN_OR_EQUAL || yy_act == .SHIFT_RIGHT || yy_act == .UNSIGNED_SHIFT_RIGHT {
          tokens.append(null)

          if yy_act == .ASSIGN_SHIFT_RIGHT || yy_act == .ASSIGN_UNSIGNED_SHIFT_RIGHT || yy_act == .UNSIGNED_SHIFT_RIGHT {
            tokens.append(null)

            if yy_act == .ASSIGN_UNSIGNED_SHIFT_RIGHT || yy_act == .UNSIGNED_SHIFT_RIGHT {
              tokens.append(null)
            }
          }
        }
      }
    }

    # Every token stream ends in END_OF_FILE
    tokens.append(Token.new(Range.new(source, text_length, text_length), .END_OF_FILE))

    # Also return preprocessor token presence so the preprocessor can be avoided
    return tokens
  }
}
