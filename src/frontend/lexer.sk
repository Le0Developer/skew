////////////////////////////////////////////////////////////////////////////////
//
// This is a generated file, all edits will be lost!
//
////////////////////////////////////////////////////////////////////////////////

namespace skew {
  enum TokenKind {
    ANNOTATION
    ARROW
    AS
    ASSIGN
    ASSIGN_BITWISE_AND
    ASSIGN_BITWISE_OR
    ASSIGN_BITWISE_XOR
    ASSIGN_DIVIDE
    ASSIGN_INDEX
    ASSIGN_MINUS
    ASSIGN_MULTIPLY
    ASSIGN_PLUS
    ASSIGN_POWER
    ASSIGN_REMAINDER
    ASSIGN_SHIFT_LEFT
    ASSIGN_SHIFT_RIGHT
    BITWISE_AND
    BITWISE_OR
    BITWISE_XOR
    BREAK
    CHARACTER
    CLASS
    COLON
    COMMA
    COMMENT
    COMPARE
    CONST
    CONTINUE
    DEF
    DIVIDE
    DOT
    DOT_DOT
    DOUBLE
    DYNAMIC
    ELSE
    END_OF_FILE
    EQUAL
    ERROR
    FALSE
    FOR
    GREATER_THAN
    GREATER_THAN_OR_EQUAL
    IDENTIFIER
    IF
    IN
    INDEX
    INT
    INTERFACE
    INT_BINARY
    INT_HEX
    INT_OCTAL
    IS
    LEFT_BRACE
    LEFT_BRACKET
    LEFT_PARENTHESIS
    LESS_THAN
    LESS_THAN_OR_EQUAL
    LIST
    LIST_NEW
    LOGICAL_AND
    LOGICAL_OR
    MINUS
    MULTIPLY
    NAMESPACE
    NEWLINE
    NOT
    NOT_EQUAL
    NULL
    PLUS
    POWER
    QUESTION_MARK
    REMAINDER
    RETURN
    RIGHT_BRACE
    RIGHT_BRACKET
    RIGHT_PARENTHESIS
    SET
    SET_NEW
    SHIFT_LEFT
    SHIFT_RIGHT
    STRING
    SUPER
    TILDE
    TRUE
    VAR
    WHILE
    WHITESPACE
    YY_INVALID_ACTION

    // Token kinds not used by flex
    START_PARAMETER_LIST
    END_PARAMETER_LIST
  }

  final List<TokenKind> yy_accept = [.YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .END_OF_FILE, .ERROR, .WHITESPACE, .NEWLINE, .ERROR, .ERROR, .COMMENT, .REMAINDER, .BITWISE_AND, .ERROR, .LEFT_PARENTHESIS, .RIGHT_PARENTHESIS, .MULTIPLY, .PLUS, .COMMA, .MINUS, .DOT, .DIVIDE, .INT, .INT, .COLON, .LESS_THAN, .ASSIGN, .GREATER_THAN, .QUESTION_MARK, .ERROR, .IDENTIFIER, .LEFT_BRACKET, .RIGHT_BRACKET, .BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LEFT_BRACE, .BITWISE_OR, .RIGHT_BRACE, .TILDE, .WHITESPACE, .NEWLINE, .NOT_EQUAL, .YY_INVALID_ACTION, .STRING, .YY_INVALID_ACTION, .COMMENT, .COMMENT, .ASSIGN_REMAINDER, .ASSIGN_BITWISE_AND, .YY_INVALID_ACTION, .CHARACTER, .YY_INVALID_ACTION, .POWER, .ASSIGN_MULTIPLY, .ASSIGN_PLUS, .ASSIGN_MINUS, .DOT_DOT, .ASSIGN_DIVIDE, .YY_INVALID_ACTION, .INT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .SHIFT_LEFT, .LESS_THAN_OR_EQUAL, .EQUAL, .ARROW, .GREATER_THAN_OR_EQUAL, .SHIFT_RIGHT, .ANNOTATION, .IDENTIFIER, .YY_INVALID_ACTION, .INDEX, .YY_INVALID_ACTION, .ASSIGN_BITWISE_XOR, .IDENTIFIER, .AS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IF, .IN, .IS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LOGICAL_OR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .ASSIGN_BITWISE_OR, .ASSIGN_POWER, .DOUBLE, .YY_INVALID_ACTION, .DOUBLE, .INT_BINARY, .INT_OCTAL, .INT_HEX, .ASSIGN_SHIFT_LEFT, .COMPARE, .ASSIGN_SHIFT_RIGHT, .ANNOTATION, .YY_INVALID_ACTION, .ASSIGN_INDEX, .YY_INVALID_ACTION, .LOGICAL_AND, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DEF, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FOR, .IDENTIFIER, .IDENTIFIER, .NOT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .VAR, .IDENTIFIER, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ELSE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NULL, .IDENTIFIER, .IDENTIFIER, .TRUE, .IDENTIFIER, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .LIST, .LIST_NEW, .BREAK, .CLASS, .CONST, .IDENTIFIER, .IDENTIFIER, .FALSE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .SUPER, .WHILE, .SET, .SET_NEW, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .RETURN, .IDENTIFIER, .DYNAMIC, .IDENTIFIER, .IDENTIFIER, .CONTINUE, .IDENTIFIER, .IDENTIFIER, .INTERFACE, .NAMESPACE, .YY_INVALID_ACTION]
  final var yy_ec = [0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 22, 1, 23, 24, 25, 26, 27, 28, 28, 28, 28, 29, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 32, 33, 34, 30, 1, 35, 36, 37, 38, 39, 40, 30, 41, 42, 30, 43, 44, 45, 46, 47, 48, 30, 49, 50, 51, 52, 53, 54, 55, 56, 30, 57, 58, 59, 60, 1]
  final var yy_meta = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 3, 3, 4, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1]
  final var yy_base = [0, 0, 0, 275, 276, 272, 59, 249, 58, 269, 247, 246, 55, 276, 276, 53, 245, 276, 244, 251, 242, 75, 50, 276, 49, 50, 56, 276, 0, 0, 51, 276, 241, 32, 215, 39, 46, 219, 41, 59, 63, 213, 222, 208, 210, 223, 216, 85, 232, 276, 276, 253, 104, 276, 87, 276, 251, 250, 276, 276, 276, 91, 276, 249, 227, 276, 276, 276, 276, 276, 106, 116, 128, 94, 98, 0, 226, 224, 276, 276, 276, 224, 0, 0, 231, 222, 206, 276, 206, 0, 204, 207, 195, 200, 193, 188, 193, 187, 0, 184, 0, 189, 182, 188, 0, 180, 182, 177, 179, 185, 210, 186, 276, 276, 132, 138, 142, 102, 120, 0, 276, 276, 276, 0, 208, 276, 169, 0, 187, 171, 78, 0, 185, 180, 168, 0, 178, 177, 0, 171, 162, 174, 173, 0, 167, 194, 155, 175, 174, 163, 155, 153, 161, 157, 0, 162, 151, 149, 0, 149, 148, 0, 157, 136, 135, 276, 276, 0, 0, 0, 147, 150, 0, 151, 142, 143, 0, 0, 276, 276, 136, 150, 151, 119, 0, 105, 0, 105, 96, 0, 69, 64, 0, 0, 276, 163, 167, 171, 173, 176, 179, 181]
  final var yy_def = [0, 194, 1, 194, 194, 194, 194, 194, 195, 196, 194, 194, 197, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 198, 199, 194, 194, 194, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 194, 194, 194, 194, 194, 194, 194, 195, 194, 195, 196, 194, 194, 194, 197, 194, 197, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 200, 194, 194, 194, 194, 194, 194, 201, 199, 194, 194, 194, 194, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 194, 194, 194, 194, 194, 194, 194, 194, 194, 200, 194, 194, 194, 201, 194, 194, 194, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 194, 194, 194, 194, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 194, 194, 194, 194, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 194, 194, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 0, 194, 194, 194, 194, 194, 194, 194]
  final var yy_nxt = [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 22, 23, 24, 25, 26, 27, 28, 29, 29, 29, 30, 4, 31, 32, 33, 34, 35, 36, 37, 38, 29, 39, 29, 29, 29, 40, 41, 29, 42, 43, 44, 29, 45, 46, 29, 29, 47, 48, 49, 50, 52, 52, 55, 62, 64, 70, 84, 71, 71, 71, 71, 76, 77, 78, 79, 96, 65, 88, 72, 80, 81, 89, 91, 85, 93, 92, 63, 97, 72, 56, 70, 55, 71, 71, 71, 71, 86, 101, 98, 62, 110, 94, 193, 72, 99, 52, 52, 192, 100, 102, 73, 117, 117, 72, 103, 118, 118, 118, 56, 117, 117, 74, 63, 114, 114, 114, 114, 151, 152, 75, 111, 70, 191, 71, 71, 71, 71, 118, 118, 118, 115, 190, 115, 189, 72, 116, 116, 116, 116, 114, 114, 114, 114, 188, 72, 116, 116, 116, 116, 116, 116, 116, 116, 54, 54, 54, 54, 57, 57, 57, 57, 61, 61, 61, 61, 82, 82, 83, 83, 83, 119, 119, 123, 123, 123, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 122, 121, 120, 113, 194, 58, 194, 51, 112, 109, 108, 107, 106, 105, 104, 95, 90, 87, 69, 68, 67, 66, 60, 59, 58, 53, 51, 194, 3, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194]
  final var yy_chk = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 8, 12, 15, 22, 30, 22, 22, 22, 22, 24, 24, 25, 25, 38, 15, 33, 22, 26, 26, 33, 35, 30, 36, 35, 12, 38, 22, 8, 21, 54, 21, 21, 21, 21, 30, 40, 39, 61, 47, 36, 191, 21, 39, 52, 52, 190, 39, 40, 21, 73, 73, 21, 40, 74, 74, 74, 54, 117, 117, 21, 61, 70, 70, 70, 70, 130, 130, 21, 47, 71, 188, 71, 71, 71, 71, 118, 118, 118, 72, 187, 72, 185, 71, 72, 72, 72, 72, 114, 114, 114, 114, 183, 71, 115, 115, 115, 115, 116, 116, 116, 116, 195, 195, 195, 195, 196, 196, 196, 196, 197, 197, 197, 197, 198, 198, 199, 199, 199, 200, 200, 201, 201, 201, 182, 181, 180, 175, 174, 173, 171, 170, 164, 163, 162, 160, 159, 157, 156, 155, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 142, 141, 140, 139, 137, 136, 134, 133, 132, 129, 128, 126, 124, 111, 110, 109, 108, 107, 106, 105, 103, 102, 101, 99, 97, 96, 95, 94, 93, 92, 91, 90, 88, 86, 85, 84, 81, 77, 76, 64, 63, 57, 56, 51, 48, 46, 45, 44, 43, 42, 41, 37, 34, 32, 20, 19, 18, 16, 11, 10, 9, 7, 5, 3, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194]

  // This is the inner loop from "flex", an ancient lexer generator. The output
  // of flex is pretty bad (obfuscated variable names and the opposite of modular
  // code) but it's fast and somewhat standard for compiler design. The code below
  // replaces a simple hand-coded lexer and offers much better performance.
  List<Token> tokenize(Log log, Source source) {
    List<Token> tokens = []
    var text = source.contents
    var text_length = text.size()

    // For backing up
    var yy_last_accepting_state = 0
    var yy_last_accepting_cpos = 0

    // The current character pointer
    var yy_cp = 0

    while (yy_cp < text_length) {
      var yy_current_state = 1 // Reset the NFA
      var yy_bp = yy_cp // The pointer to the beginning of the token

      // Search for a match
      while (yy_current_state != 194) {
        if (yy_cp >= text_length) {
          break // This prevents syntax errors from causing infinite loops
        }
        var c = text[yy_cp]
        var index = c < 127 ? c : 127
        var yy_c = yy_ec[index]
        if (yy_accept[yy_current_state] != .YY_INVALID_ACTION) {
          yy_last_accepting_state = yy_current_state
          yy_last_accepting_cpos = yy_cp
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
          yy_current_state = yy_def[yy_current_state]
          if (yy_current_state >= 195) {
            yy_c = yy_meta[yy_c]
          }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c]
        yy_cp++
      }

      // Find the action
      var yy_act = yy_accept[yy_current_state]
      while (yy_act == .YY_INVALID_ACTION) {
        // Have to back up
        yy_cp = yy_last_accepting_cpos
        yy_current_state = yy_last_accepting_state
        yy_act = yy_accept[yy_current_state]
      }

      // Ignore whitespace
      if (yy_act == .WHITESPACE) {
        continue
      }

      // This is the default action in flex, which is usually called ECHO
      else if (yy_act == .ERROR) {
        var iterator = unicode.StringIterator.INSTANCE.reset(text, yy_bp)
        iterator.nextCodePoint()
        var range = Range(source, yy_bp, iterator.index)
        log.syntaxErrorExtraData(range, range.toString())
        break
      }

      // Ignore END_OF_FILE since this loop must still perform the last action
      else if (yy_act != .END_OF_FILE) {
        tokens.push(Token(Range(source, yy_bp, yy_cp), yy_act))

        // These tokens start with a ">" and may need to be split if we discover
        // that they should really be END_PARAMETER_LIST tokens. Save enough room
        // for these tokens to be split into pieces, that way all of the tokens
        // don't have to be shifted over repeatedly inside prepareTokens(). The
        // ">>" token may become ">" + ">", the ">=" token may become ">" + "=",
        // and the ">>=" token may become ">" + ">=" and so ">" + ">" + "=".
        if (yy_act == .ASSIGN_SHIFT_RIGHT || yy_act == .SHIFT_RIGHT || yy_act == .GREATER_THAN_OR_EQUAL) {
          tokens.push(null)
          if (yy_act == .ASSIGN_SHIFT_RIGHT) {
            tokens.push(null)
          }
        }
      }
    }

    // Every token stream ends in END_OF_FILE
    tokens.push(Token(Range(source, text_length, text_length), .END_OF_FILE))

    // Also return preprocessor token presence so the preprocessor can be avoided
    return tokens
  }
}
