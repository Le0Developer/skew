////////////////////////////////////////////////////////////////////////////////
//
// This is a generated file, all edits will be lost!
//
////////////////////////////////////////////////////////////////////////////////

namespace skew {
  enum TokenKind {
    ANNOTATION
    ARROW
    AS
    ASSIGN
    ASSIGN_BITWISE_AND
    ASSIGN_BITWISE_OR
    ASSIGN_BITWISE_XOR
    ASSIGN_DIVIDE
    ASSIGN_INDEX
    ASSIGN_MINUS
    ASSIGN_MULTIPLY
    ASSIGN_PLUS
    ASSIGN_POWER
    ASSIGN_REMAINDER
    ASSIGN_SHIFT_LEFT
    ASSIGN_SHIFT_RIGHT
    BITWISE_AND
    BITWISE_OR
    BITWISE_XOR
    BREAK
    CHARACTER
    CLASS
    COLON
    COMMA
    COMMENT
    COMPARE
    CONTINUE
    DEF
    DIVIDE
    DOT
    DOUBLE
    DYNAMIC
    ELSE
    END_OF_FILE
    EQUAL
    ERROR
    FALSE
    GREATER_THAN
    GREATER_THAN_OR_EQUAL
    IDENTIFIER
    IF
    IN
    INDEX
    INT
    INTERFACE
    IS
    LEFT_BRACE
    LEFT_BRACKET
    LEFT_PARENTHESIS
    LESS_THAN
    LESS_THAN_OR_EQUAL
    LOGICAL_AND
    LOGICAL_OR
    MINUS
    MULTIPLY
    NAMESPACE
    NEWLINE
    NOT
    NOT_EQUAL
    NULL
    PLUS
    POWER
    QUESTION_MARK
    REMAINDER
    RETURN
    RIGHT_BRACE
    RIGHT_BRACKET
    RIGHT_PARENTHESIS
    SHIFT_LEFT
    SHIFT_RIGHT
    STRING
    SUPER
    TILDE
    TRUE
    VAR
    WHILE
    WHITESPACE
    YY_INVALID_ACTION

    // Token kinds not used by flex
    START_PARAMETER_LIST
    END_PARAMETER_LIST
  }

  final List<TokenKind> yy_accept = [.YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .END_OF_FILE, .ERROR, .WHITESPACE, .NEWLINE, .ERROR, .ERROR, .COMMENT, .REMAINDER, .BITWISE_AND, .ERROR, .LEFT_PARENTHESIS, .RIGHT_PARENTHESIS, .MULTIPLY, .PLUS, .COMMA, .MINUS, .DOT, .DIVIDE, .INT, .COLON, .LESS_THAN, .ASSIGN, .GREATER_THAN, .QUESTION_MARK, .ERROR, .IDENTIFIER, .LEFT_BRACKET, .RIGHT_BRACKET, .BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LEFT_BRACE, .BITWISE_OR, .RIGHT_BRACE, .TILDE, .WHITESPACE, .NEWLINE, .NOT_EQUAL, .YY_INVALID_ACTION, .STRING, .YY_INVALID_ACTION, .COMMENT, .COMMENT, .ASSIGN_REMAINDER, .ASSIGN_BITWISE_AND, .YY_INVALID_ACTION, .CHARACTER, .YY_INVALID_ACTION, .POWER, .ASSIGN_MULTIPLY, .ASSIGN_PLUS, .ASSIGN_MINUS, .ASSIGN_DIVIDE, .YY_INVALID_ACTION, .INT, .SHIFT_LEFT, .LESS_THAN_OR_EQUAL, .EQUAL, .ARROW, .GREATER_THAN_OR_EQUAL, .SHIFT_RIGHT, .ANNOTATION, .IDENTIFIER, .INDEX, .ASSIGN_BITWISE_XOR, .IDENTIFIER, .AS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IF, .IN, .IS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LOGICAL_OR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ASSIGN_BITWISE_OR, .ASSIGN_POWER, .DOUBLE, .ASSIGN_SHIFT_LEFT, .COMPARE, .ASSIGN_SHIFT_RIGHT, .ANNOTATION, .ASSIGN_INDEX, .LOGICAL_AND, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DEF, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NOT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .VAR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ELSE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NULL, .IDENTIFIER, .IDENTIFIER, .TRUE, .IDENTIFIER, .BREAK, .CLASS, .IDENTIFIER, .IDENTIFIER, .FALSE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .SUPER, .WHILE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .RETURN, .IDENTIFIER, .DYNAMIC, .IDENTIFIER, .IDENTIFIER, .CONTINUE, .IDENTIFIER, .IDENTIFIER, .INTERFACE, .NAMESPACE, .YY_INVALID_ACTION]
  final var yy_ec = [0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 1, 20, 21, 22, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 27, 28, 29, 25, 1, 30, 31, 32, 33, 34, 35, 25, 36, 37, 25, 38, 39, 40, 41, 42, 43, 25, 44, 45, 46, 47, 48, 49, 25, 50, 25, 51, 52, 53, 54, 1]
  final var yy_meta = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1]
  final var yy_base = [0, 0, 0, 190, 191, 187, 53, 167, 52, 184, 165, 164, 49, 191, 191, 47, 163, 191, 162, 191, 161, 44, 191, 43, 44, 48, 191, 0, 0, 153, 191, 159, 26, 135, 33, 27, 139, 147, 39, 43, 132, 141, 127, 129, 142, 135, 191, 149, 191, 191, 167, 79, 191, 73, 191, 165, 164, 191, 191, 191, 74, 191, 163, 144, 191, 191, 191, 191, 146, 70, 142, 140, 191, 191, 191, 140, 0, 0, 139, 191, 126, 0, 124, 127, 115, 120, 113, 108, 113, 0, 105, 0, 110, 103, 109, 0, 101, 103, 98, 100, 106, 191, 191, 124, 191, 191, 191, 0, 191, 0, 111, 95, 93, 0, 108, 103, 91, 101, 100, 0, 94, 85, 97, 96, 0, 90, 90, 82, 89, 85, 0, 90, 79, 77, 0, 77, 76, 0, 85, 0, 0, 77, 80, 0, 81, 72, 58, 0, 0, 51, 65, 66, 65, 0, 60, 0, 61, 60, 0, 57, 55, 0, 0, 191, 101, 104, 107, 84, 109, 111]
  final var yy_def = [0, 163, 1, 163, 163, 163, 163, 163, 164, 165, 163, 163, 166, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 167, 168, 163, 163, 163, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 163, 163, 163, 163, 163, 163, 163, 164, 163, 164, 165, 163, 163, 163, 166, 163, 166, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 169, 168, 163, 163, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 163, 163, 163, 163, 163, 163, 169, 163, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 0, 163, 163, 163, 163, 163, 163]
  final var yy_nxt = [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 4, 30, 31, 32, 33, 34, 35, 36, 37, 28, 38, 28, 28, 28, 39, 40, 28, 41, 42, 43, 28, 44, 45, 28, 46, 47, 48, 49, 51, 51, 54, 61, 63, 68, 85, 69, 70, 71, 72, 73, 80, 64, 74, 75, 81, 83, 92, 89, 84, 62, 86, 54, 55, 90, 51, 51, 61, 91, 93, 68, 76, 69, 162, 94, 161, 160, 159, 158, 157, 156, 155, 154, 153, 55, 62, 53, 53, 53, 56, 56, 56, 60, 60, 60, 77, 77, 107, 107, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 103, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 106, 105, 104, 103, 102, 163, 57, 163, 50, 101, 100, 99, 98, 97, 96, 95, 88, 87, 82, 79, 78, 67, 66, 65, 59, 58, 57, 52, 50, 163, 3, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163]
  final var yy_chk = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 8, 12, 15, 21, 35, 21, 23, 23, 24, 24, 32, 15, 25, 25, 32, 34, 39, 38, 34, 12, 35, 53, 8, 38, 51, 51, 60, 38, 39, 69, 167, 69, 160, 39, 159, 157, 156, 154, 152, 151, 150, 149, 146, 53, 60, 164, 164, 164, 165, 165, 165, 166, 166, 166, 168, 168, 169, 169, 145, 144, 142, 141, 138, 136, 135, 133, 132, 131, 129, 128, 127, 126, 125, 123, 122, 121, 120, 118, 117, 116, 115, 114, 112, 111, 110, 103, 100, 99, 98, 97, 96, 94, 93, 92, 90, 88, 87, 86, 85, 84, 83, 82, 80, 78, 75, 71, 70, 68, 63, 62, 56, 55, 50, 47, 45, 44, 43, 42, 41, 40, 37, 36, 33, 31, 29, 20, 18, 16, 11, 10, 9, 7, 5, 3, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163]

  // This is the inner loop from "flex", an ancient lexer generator. The output
  // of flex is pretty bad (obfuscated variable names and the opposite of modular
  // code) but it's fast and somewhat standard for compiler design. The code below
  // replaces a simple hand-coded lexer and offers much better performance.
  List<Token> tokenize(Log log, Source source) {
    List<Token> tokens = []
    var text = source.contents
    var text_length = text.size()

    // For backing up
    var yy_last_accepting_state = 0
    var yy_last_accepting_cpos = 0

    // The current character pointer
    var yy_cp = 0

    while (yy_cp < text_length) {
      var yy_current_state = 1 // Reset the NFA
      var yy_bp = yy_cp // The pointer to the beginning of the token

      // Search for a match
      while (yy_current_state != 163) {
        if (yy_cp >= text_length) {
          break // This prevents syntax errors from causing infinite loops
        }
        var c = text[yy_cp]
        var index = c < 127 ? c : 127
        var yy_c = yy_ec[index]
        if (yy_accept[yy_current_state] != .YY_INVALID_ACTION) {
          yy_last_accepting_state = yy_current_state
          yy_last_accepting_cpos = yy_cp
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
          yy_current_state = yy_def[yy_current_state]
          if (yy_current_state >= 164) {
            yy_c = yy_meta[yy_c]
          }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c]
        yy_cp++
      }

      // Find the action
      var yy_act = yy_accept[yy_current_state]
      while (yy_act == .YY_INVALID_ACTION) {
        // Have to back up
        yy_cp = yy_last_accepting_cpos
        yy_current_state = yy_last_accepting_state
        yy_act = yy_accept[yy_current_state]
      }

      // Ignore whitespace
      if (yy_act == .WHITESPACE) {
        continue
      }

      // This is the default action in flex, which is usually called ECHO
      else if (yy_act == .ERROR) {
        var iterator = unicode.StringIterator.INSTANCE.reset(text, yy_bp)
        iterator.nextCodePoint()
        var range = Range(source, yy_bp, iterator.index)
        log.syntaxErrorExtraData(range, range.toString())
        break
      }

      // Ignore END_OF_FILE since this loop must still perform the last action
      else if (yy_act != .END_OF_FILE) {
        tokens.push(Token(Range(source, yy_bp, yy_cp), yy_act))

        // These tokens start with a ">" and may need to be split if we discover
        // that they should really be END_PARAMETER_LIST tokens. Save enough room
        // for these tokens to be split into pieces, that way all of the tokens
        // don't have to be shifted over repeatedly inside prepareTokens(). The
        // ">>" token may become ">" + ">", the ">=" token may become ">" + "=",
        // and the ">>=" token may become ">" + ">=" and so ">" + ">" + "=".
        if (yy_act == .ASSIGN_SHIFT_RIGHT || yy_act == .SHIFT_RIGHT || yy_act == .GREATER_THAN_OR_EQUAL) {
          tokens.push(null)
          if (yy_act == .ASSIGN_SHIFT_RIGHT) {
            tokens.push(null)
          }
        }
      }
    }

    // Every token stream ends in END_OF_FILE
    tokens.push(Token(Range(source, text_length, text_length), .END_OF_FILE))

    // Also return preprocessor token presence so the preprocessor can be avoided
    return tokens
  }
}
