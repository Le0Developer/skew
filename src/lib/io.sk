if TARGET == .JAVASCRIPT {
  namespace IO {
    def isDirectory(path string) bool {
      const qjs = dynamic.globalThis.std != dynamic.void(0)

      if qjs {
        const os = dynamic.globalThis.os
        return os.stat(path) & os.S_IFMT == os.S_IFDIR
      } else {
        try {
          return dynamic.require("fs").statSync(path).isDirectory()
        }
      }
      return false
    }

    def readDirectory(path string) List<string> {
      const qjs = dynamic.globalThis.std != dynamic.void(0)

      try {
        var entries List<string> = qjs ? dynamic.os.readdir(path) : dynamic.require("fs").readdirSync(path)
        entries.sort((a, b) => a <=> b)
        return entries
      }
      return null
    }

    def readFile(path string) string {
      const qjs = dynamic.globalThis.std != dynamic.void(0)

      try {
        var contents string = qjs ? dynamic.std.loadFile(path) : dynamic.require("fs").readFileSync(path, "utf8")
        return contents.replaceAll("\r\n", "\n")
      }
      return null
    }

    def writeFile(path string, contents string) bool {
      const qjs = dynamic.globalThis.std != dynamic.void(0)
      var dirname fn(string) string
      var mkdir_p fn(string)
      
      if qjs {
        const os = dynamic.globalThis.os
        const std = dynamic.globalThis.std

        dirname = path => {
          if path.count == 0 { return "." }
          var code = path[0]
          var hasRoot = code == '/'
          var end = -1
          var matchedSlash = true
          for i = path.count - 1; i >= 1; --i {
            code = path[i]
            if code == '/' {
              if !matchedSlash {
                end = i
                break
              }
            } else {
              # We saw the first non-path separator
              matchedSlash = false
              }
            }

            if end == -1 { return hasRoot ? "/" : "." }
            if hasRoot && end == 1 { return "//" }
            return path.slice(0, end)
        }
        mkdir_p = dir => {
          if dir != dirname(dir) {
            mkdir_p(dirname(dir))
            try { os.mkdir(dir) }
          }
        }
  
        mkdir_p(dirname(path))

        var file = std.open(path, "w")
        if file.error() {
          return false
        }
        file.puts(contents)
        if file.error() {
          return false
        }
        file.close()
        return true
      } else {
        const fs = dynamic.require("fs")
        const p = dynamic.require("path")

        dirname = p.dirname
        mkdir_p = dir => {
          if dir != dirname(dir) {
            mkdir_p(dirname(dir))
            try { fs.mkdirSync(dir) }
          }
        }

        mkdir_p(dirname(path))
        try {
          fs.writeFileSync(path, contents)
          return true
        }
        return false
      }
    }
  }
}

else if TARGET == .CSHARP {
  namespace IO {
    def isDirectory(path string) bool {
      try {
        return dynamic.System.IO.Directory.Exists(path)
      }
      return false
    }

    def readDirectory(path string) List<string> {
      try {
        var entries List<string> = dynamic.System.Linq.Enumerable.ToList(dynamic.System.IO.Directory.GetFileSystemEntries(path))
        for i in 0..entries.count {
          entries[i] = dynamic.System.IO.Path.GetFileName(entries[i])
        }
        entries.sort((a, b) => a <=> b)
        return entries
      }
      return null
    }

    def readFile(path string) string {
      try {
        var contents string = dynamic.System.IO.File.ReadAllText(path)
        return contents.replaceAll("\r\n", "\n")
      }
      return null
    }

    def writeFile(path string, contents string) bool {
      try {
        dynamic.System.IO.File.WriteAllText(path, contents)
        return true
      }
      return false
    }
  }
}

else {
  @import
  namespace IO {
    def isDirectory(path string) bool
    def readDirectory(path string) List<string>
    def readFile(path string) string
    def writeFile(path string, contents string) bool
  }
}
