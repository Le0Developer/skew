namespace Unicode {
  enum Encoding {
    UTF8
    UTF16
    UTF32
  }

  const STRING_ENCODING Encoding =
    TARGET == .CSHARP || TARGET == .JAVASCRIPT ? .UTF16 :
    .UTF32

  class StringIterator {
    var value = ""
    var index = 0
    var stop = 0

    def reset(text string, start int) StringIterator {
      value = text
      index = start
      stop = text.count
      return self
    }

    def countCodePointsUntil(stop int) int {
      var count = 0
      while index < stop && nextCodePoint >= 0 {
        count++
      }
      return count
    }

    if STRING_ENCODING == .UTF8 {
      def nextCodePoint int {
        if index >= stop { return -1 }
        var a = value[index]
        index++
        if a < 0xC0 { return a }
        if index >= stop { return -1 }
        var b = value[index]
        index++
        if a < 0xE0 { return ((a & 0x1F) << 6) | (b & 0x3F) }
        if index >= stop { return -1 }
        var c = value[index]
        index++
        if a < 0xF0 { return ((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F) }
        if index >= stop { return -1 }
        var d = value[index]
        index++
        return ((a & 0x07) << 18) | ((b & 0x3F) << 12) | ((c & 0x3F) << 6) | (d & 0x3F)
      }
    }

    else if STRING_ENCODING == .UTF16 {
      def nextCodePoint int {
        if index >= stop { return -1 }
        var a = value[index]
        index++
        if a < 0xD800 || a >= 0xDC00 { return a }
        if index >= stop { return -1 }
        var b = value[index]
        index++
        return (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00)
      }
    }

    else {
      def nextCodePoint int {
        if index >= stop { return -1 }
        var c = value[index]
        index++
        return c
      }
    }
  }

  namespace StringIterator {
    const INSTANCE = StringIterator.new
  }
}

class string {
  if Unicode.STRING_ENCODING == .UTF32 {
    def codePoints List<int> {
      return codeUnits
    }
  }

  else {
    def codePoints List<int> {
      var codePoints List<int> = []
      var instance = Unicode.StringIterator.INSTANCE
      instance.reset(self, 0)

      while true {
        var codePoint = instance.nextCodePoint
        if codePoint < 0 {
          return codePoints
        }
        codePoints.append(codePoint)
      }
    }
  }
}

namespace string {
  if Unicode.STRING_ENCODING == .UTF8 {
    def fromCodePoints(codePoints List<int>) string {
      var builder = StringBuilder.new

      for codePoint in codePoints {
        if codePoint < 0x80 {
          builder.append(fromCodeUnit(codePoint))
        } else {
          if codePoint < 0x800 {
            builder.append(fromCodeUnit(((codePoint >> 6) & 0x1F) | 0xC0))
          } else {
            if codePoint < 0x10000 {
              builder.append(fromCodeUnit(((codePoint >> 12) & 0x0F) | 0xE0))
            } else {
              builder.append(fromCodeUnit(((codePoint >> 18) & 0x07) | 0xF0))
              builder.append(fromCodeUnit(((codePoint >> 12) & 0x3F) | 0x80))
            }
            builder.append(fromCodeUnit(((codePoint >> 6) & 0x3F) | 0x80))
          }
          builder.append(fromCodeUnit((codePoint & 0x3F) | 0x80))
        }
      }

      return builder.toString
    }
  }

  else if Unicode.STRING_ENCODING == .UTF16 {
    def fromCodePoints(codePoints List<int>) string {
      var builder = StringBuilder.new

      for codePoint in codePoints {
        if codePoint < 0x10000 {
          builder.append(fromCodeUnit(codePoint))
        } else {
          var adjusted = codePoint - 0x10000
          builder.append(fromCodeUnit((adjusted >> 10) + 0xD800))
          builder.append(fromCodeUnit((adjusted & ((1 << 10) - 1)) + 0xDC00))
        }
      }

      return builder.toString
    }
  }

  else {
    def fromCodePoints(codePoints List<int>) string {
      return fromCodeUnits(codePoints)
    }
  }
}
