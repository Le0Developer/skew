namespace Terminal {
  enum Color {
    DEFAULT
    BOLD
    GRAY
    RED
    GREEN
    YELLOW
    BLUE
    MAGENTA
    CYAN

    def toEscapeCode int {
      return colorToEscapeCode[self]
    }
  }

  const colorToEscapeCode = {
    Color.DEFAULT: 0,
    Color.BOLD: 1,
    Color.GRAY: 90,
    Color.RED: 91,
    Color.GREEN: 92,
    Color.YELLOW: 93,
    Color.BLUE: 94,
    Color.MAGENTA: 95,
    Color.CYAN: 96,
  }

  if TARGET == .JAVASCRIPT {
    def setColor(color Color) {
      var is_tty bool
      if dynamic.globalThis.os != dynamic.void(0) {
        is_tty = dynamic.os.isatty(dynamic.std.out.fileno())  
      } else {
        is_tty = dynamic.process.stdout.isTTY
      }

      if is_tty {
        write("\x1B[0;\(color.toEscapeCode)m")
      }
    }

    def width int {
      if dynamic.globalThis.os != dynamic.void(0) {
        var winsize = dynamic.os.ttyGetWinSize(dynamic.std.out.fileno())
        return winsize == null ? -1 : winsize[0]
      } else {
        return dynamic.process.stdout.columns
      }
    }

    def height int {
      if dynamic.globalThis.os != dynamic.void(0) {
        var winsize = dynamic.os.ttyGetWinSize(dynamic.std.out.fileno())
        return winsize == null ? -1 : winsize[1]
      } else {
        return dynamic.process.stdout.rows
      }
    }

    def print(text string) {
      write(text + "\n")
    }

    def flush {
      if dynamic.globalThis.std != dynamic.void(0) {
        dynamic.std.out.flush()
      }
    }

    def write(text string) {
      if dynamic.globalThis.std != dynamic.void(0) {
        dynamic.std.out.puts(text)
      } else {
        dynamic.process.stdout.write(text)
      }
    }
  }

  else if TARGET == .CSHARP {
    @using("System")
    def setColor(color Color) {
      switch color {
        case .BOLD, .DEFAULT { dynamic.Console.ResetColor() }
        case .GRAY { dynamic.Console.ForegroundColor = dynamic.ConsoleColor.DarkGray }
        case .RED { dynamic.Console.ForegroundColor = dynamic.ConsoleColor.Red }
        case .GREEN { dynamic.Console.ForegroundColor = dynamic.ConsoleColor.Green }
        case .YELLOW { dynamic.Console.ForegroundColor = dynamic.ConsoleColor.Yellow }
        case .BLUE { dynamic.Console.ForegroundColor = dynamic.ConsoleColor.Blue }
        case .MAGENTA { dynamic.Console.ForegroundColor = dynamic.ConsoleColor.Magenta }
        case .CYAN { dynamic.Console.ForegroundColor = dynamic.ConsoleColor.Cyan }
      }
    }

    @using("System")
    def width int {
      return dynamic.Console.BufferWidth
    }

    @using("System")
    def height int {
      return dynamic.Console.BufferHeight
    }

    @using("System")
    def print(text string) {
      dynamic.Console.WriteLine(text)
    }

    def flush {
    }

    @using("System")
    def write(text string) {
      dynamic.Console.Write(text)
    }
  }

  else {
    def setColor(color Color) {
      _setColor(color.toEscapeCode)
    }

    @import {
      def _setColor(escapeCode int)
      def width int
      def height int
      def print(text string)
      def flush
      def write(text string)
    }
  }
}
