namespace Skew {
  enum PassKind {
    LAMBDA_LIFTING
  }

  class LambdaLiftingPass : Pass {
    over kind PassKind {
      return .LAMBDA_LIFTING
    }

    over run(context PassContext) {
      LambdaLifter.new(context.global).visitObject(context.global)
    }
  }

  class LambdaLifter {
    class VariableInfo {
      var symbol VariableSymbol
      var definition Node
      var uses List<Node> = []
      var isCaptured = false
    }

    enum CaptureKind {
      FUNCTION
      LAMBDA
      LOOP
    }

    class CaptureScope {
      var kind CaptureKind
      var node Node
      var parent CaptureScope
      var environment VariableSymbol = null
      var variableInfo IntMap<VariableInfo> = {}

      def define(symbol VariableSymbol, node Node) {
        variableInfo[symbol.id] = VariableInfo.new(symbol, node)
      }

      def recordUse(symbol VariableSymbol, node Node, enclosingFunction FunctionSymbol) {
        var isCaptured = false
        for scope = self; scope != null; scope = scope.parent {
          var info = scope.variableInfo.get(symbol.id, null)
          if info != null {
            if isCaptured {
              info.isCaptured = true
              if scope.environment == null {
                scope.environment = VariableSymbol.new(.VARIABLE_LOCAL, enclosingFunction.scope.generateName("env"))
              }
            }
            info.uses.append(node)
            return
          }
          if scope.kind == .LAMBDA {
            isCaptured = true
          }
        }
      }
    }

    var global ObjectSymbol
    var stack List<CaptureScope> = []
    var enclosingFunction FunctionSymbol = null

    def visitObject(symbol ObjectSymbol) {
      for object in symbol.objects {
        visitObject(object)
      }

      for function in symbol.functions {
        enclosingFunction = function
        visitFunction(function)
        enclosingFunction = null
      }

      for variable in symbol.variables {
        visitVariable(variable)
      }
    }

    def visitFunction(symbol FunctionSymbol) {
      if symbol.block != null {
        var scope = CaptureScope.new(.FUNCTION, symbol.block, null)
        for argument in symbol.arguments {
          scope.define(argument, null)
        }
        stack.append(scope)
        visit(symbol.block)
        processCaptureScope
      }
    }

    def visitVariable(symbol VariableSymbol) {
      if symbol.value != null {
        visit(symbol.value)
      }
    }

    def visit(node Node) {
      var kind = node.kind
      var symbol = node.symbol
      var oldEnclosingFunction = enclosingFunction

      if kind == .LAMBDA {
        stack.append(CaptureScope.new(.LAMBDA, node, stack.isEmpty ? null : stack.last))
        enclosingFunction = node.symbol.asFunctionSymbol
      }

      else if kind.isLoop {
        stack.append(CaptureScope.new(.LOOP, node, stack.last))
      }

      else if kind == .VARIABLE {
        stack.last.define(symbol.asVariableSymbol, node)
      }

      else if symbol != null && (symbol.kind == .VARIABLE_ARGUMENT || symbol.kind == .VARIABLE_LOCAL) {
        assert(node.kind == .NAME)
        stack.last.recordUse(symbol.asVariableSymbol, node, enclosingFunction)
      }

      for child = node.firstChild; child != null; child = child.nextSibling {
        visit(child)
      }

      if kind == .LAMBDA {
        processCaptureScope
        enclosingFunction = oldEnclosingFunction
      } else if kind.isLoop {
        processCaptureScope
      }
    }

    def createClass(name string) ObjectSymbol {
      var object = ObjectSymbol.new(.OBJECT_CLASS, global.scope.generateName(name))
      object.scope = ObjectScope.new(global.scope, object)
      object.resolvedType = Type.new(.SYMBOL, object)
      object.parent = global
      global.objects.append(object)
      return object
    }

    def createConstructor(object ObjectSymbol) FunctionSymbol {
      var function = createFunction(object, .FUNCTION_CONSTRUCTOR, "new")
      function.resolvedType.returnType = object.resolvedType
      return function
    }

    def createFunction(object ObjectSymbol, kind SymbolKind, name string) FunctionSymbol {
      var function = FunctionSymbol.new(kind, name)
      function.resolvedType = Type.new(.SYMBOL, function)
      function.parent = object
      function.block = Node.createBlock
      function.scope = FunctionScope.new(object.scope, function)
      function.this = VariableSymbol.new(.VARIABLE_LOCAL, "self")
      function.this.resolvedType = object.resolvedType
      object.functions.append(function)
      return function
    }

    def processCaptureScope {
      var scope = stack.takeLast

      # Convert lambdas to function objects
      if scope.kind == .LAMBDA {
        var lambda = createClass("Lambda")
        var lambdaConstructor = createConstructor(lambda)
        var lambdaRun = createFunction(lambda, .FUNCTION_INSTANCE, "run")
        var lambdaCall = Node.createSymbolCall(lambdaConstructor)
        lambdaRun.block = scope.node.symbol.asFunctionSymbol.block.remove
        lambdaRun.flags |= Symbol.IS_EXPORTED # TODO: This needs to be called
        scope.node.become(lambdaCall)
      }

      # Scopes only need environments when at least one variable is captured
      if scope.environment == null {
        return
      }

      # Create a new object to hold the memory for the environment
      var environment = createClass("Environment")
      var constructor = createConstructor(environment)
      scope.environment.resolvedType = environment.resolvedType

      # All captured arguments will be appended as arguments to the constructor call
      var constructorCall = Node.createSymbolCall(constructor)
      scope.environment.value = constructorCall

      for info in scope.variableInfo.values {
        if !info.isCaptured {
          continue
        }

        var symbol = info.symbol
        var member = VariableSymbol.new(.VARIABLE_INSTANCE, symbol.name)
        member.parent = environment
        member.resolvedType = symbol.resolvedType
        environment.variables.append(member)

        # Change the definition into an assignment
        var assignment = Node.createExpression(Node.createBinary(.ASSIGN,
          Node.createMemberReference(Node.createSymbolReference(scope.environment), member),
          symbol.value != null ? symbol.value.remove : Node.createSymbolReference(symbol)))

        # Local variables can change into assignments
        var definition = info.definition
        if definition != null {
          definition.replaceVariableWith(assignment)
        }

        # Assignments for argument variables must go inside the environment constructor
        else {
          # TODO: Handle foreach variables and catch statement variables

          assert(symbol.kind == .VARIABLE_ARGUMENT)

          # Add an argument to the constructor
          var argument = VariableSymbol.new(.VARIABLE_ARGUMENT, symbol.name)
          argument.resolvedType = symbol.resolvedType
          constructor.arguments.append(argument)

          # Copy the value from the argument to the member
          constructor.block.appendChild(Node.createExpression(Node.createBinary(.ASSIGN,
            Node.createMemberReference(Node.createSymbolReference(constructor.this), member),
            Node.createSymbolReference(argument))))

          # Pass the initial value of the captured variable to the constructor
          constructorCall.appendChild(Node.createSymbolReference(symbol))
        }

        # Rewrite all references to this variable as members of the environment object
        for node in info.uses {
          node.replaceWith(Node.createMemberReference(Node.createSymbolReference(scope.environment), member))
        }
      }

      # Create the environment object
      var initializer = Node.createVariables.appendChild(Node.createVariable(scope.environment))
      switch scope.kind {
        case .FUNCTION { scope.node.prependChild(initializer) }
        case .LAMBDA { scope.node.lambdaBlock.appendChild(initializer) }
        default { scope.node.parent.insertChildBefore(scope.node.parent, initializer) }
      }
    }
  }
}
