namespace skew {
  enum ScopeKind {
    FUNCTION
    LOCAL
    OBJECT
    VARIABLE
  }

  class Scope {
    var parent Scope
    var used StringMap<int> = null

    def kind ScopeKind
    def find(name string) Symbol

    def asObjectScope ObjectScope {
      assert(kind == .OBJECT)
      return self as ObjectScope
    }

    def asFunctionScope FunctionScope {
      assert(kind == .FUNCTION)
      return self as FunctionScope
    }

    def asVariableScope VariableScope {
      assert(kind == .VARIABLE)
      return self as VariableScope
    }

    def asLocalScope LocalScope {
      assert(kind == .LOCAL)
      return self as LocalScope
    }

    def findEnclosingFunctionOrLambda FunctionScope {
      var scope = self
      while scope != null {
        if scope.kind == .FUNCTION {
          return scope.asFunctionScope
        }
        scope = scope.parent
      }
      return null
    }

    def findEnclosingFunction FunctionScope {
      var scope = self
      while scope != null {
        if scope.kind == .FUNCTION && scope.asFunctionScope.symbol.kind != .FUNCTION_LOCAL {
          return scope.asFunctionScope
        }
        scope = scope.parent
      }
      return null
    }

    def findEnclosingLoop LocalScope {
      var scope = self
      while scope != null && scope.kind == .LOCAL {
        if scope.asLocalScope.type == .LOOP {
          return scope.asLocalScope
        }
        scope = scope.parent
      }
      return null
    }

    def generateSymbolName(prefix string) string {
      var count = 0
      var name = prefix
      while true {
        if find(name) == null && (used == null || !(name in used)) {
          reserveSymbolName(name)
          return name
        }
        count += 1
        name = prefix + count.toString
      }
      return prefix
    }

    def reserveSymbolName(name string) {
      if used == null {
        used = {}
      }
      used[name] = 0
    }
  }

  class ObjectScope : Scope {
    var symbol ObjectSymbol

    over kind ScopeKind {
      return .OBJECT
    }

    over find(name string) Symbol {
      var check = symbol
      while check != null {
        var result = check.members.get(name, null)
        if result != null {
          return result
        }
        check = check.baseClass
      }
      return parent != null ? parent.find(name) : null
    }
  }

  class FunctionScope : Scope {
    var symbol FunctionSymbol
    var parameters StringMap<ParameterSymbol> = {}

    over kind ScopeKind {
      return .FUNCTION
    }

    over find(name string) Symbol {
      var result = parameters.get(name, null)
      return result != null ? result : parent != null ? parent.find(name) : null
    }
  }

  class VariableScope : Scope {
    var symbol VariableSymbol

    over kind ScopeKind {
      return .VARIABLE
    }

    over find(name string) Symbol {
      return parent != null ? parent.find(name) : null
    }
  }

  enum LocalType {
    LOOP
    NORMAL
  }

  class LocalScope : Scope {
    var locals StringMap<VariableSymbol> = {}
    var type LocalType

    over kind ScopeKind {
      return .LOCAL
    }

    over find(name string) Symbol {
      var result = locals.get(name, null)
      return result != null ? result : parent != null ? parent.find(name) : null
    }

    def define(symbol VariableSymbol, log Log) {
      symbol.scope = self

      # Check for duplicates
      var other = locals.get(symbol.name, null)
      if (other != null) {
        log.semanticErrorDuplicateSymbol(symbol.range, symbol.name, other.range)
        return
      }

      # Check for shadowing
      var scope = parent
      while scope.kind == .LOCAL {
        var local = scope.asLocalScope.locals.get(symbol.name, null)
        if (local != null) {
          log.semanticErrorShadowedSymbol(symbol.range, symbol.name, local.range)
          return
        }
        scope = scope.parent
      }

      # Make sure no duplicate names are accidentally generated in other local scopes
      scope.reserveSymbolName(symbol.name)

      locals[symbol.name] = symbol
    }
  }
}
