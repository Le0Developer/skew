namespace Skew {
  enum PassKind {
    FOLDING
  }

  class FoldingPass : Pass {
    over kind PassKind {
      return .FOLDING
    }

    over run(context PassContext) {
      Folding.ConstantFolder.new(context.cache, context.options, null).visitObject(context.global)
    }
  }
}

namespace Skew.Folding {
  class ConstantFolder {
    const cache TypeCache
    const options CompilerOptions
    const prepareSymbol fn(Symbol)
    const constantCache IntMap<Content> = {}

    def visitObject(symbol ObjectSymbol) {
      for object in symbol.objects {
        visitObject(object)
      }

      for function in symbol.functions {
        if function.block != null {
          foldConstants(function.block)
        }
      }

      for variable in symbol.variables {
        if variable.value != null {
          foldConstants(variable.value)
        }
      }
    }

    # Use this instead of node.become(Node.createConstant(content)) to avoid more GC
    def flatten(node Node, content Content) {
      node.removeChildren
      node.kind = .CONSTANT
      node.content = content
      node.symbol = null
    }

    # Use this instead of node.become(Node.createBool(value)) to avoid more GC
    def flattenBool(node Node, value bool) {
      assert(cache.isEquivalentToBool(node.resolvedType) || node.resolvedType == .DYNAMIC)
      flatten(node, BoolContent.new(value))
    }

    # Use this instead of node.become(Node.createInt(value)) to avoid more GC
    def flattenInt(node Node, value int) {
      assert(cache.isEquivalentToInt(node.resolvedType) || node.resolvedType == .DYNAMIC)
      flatten(node, IntContent.new(value))
    }

    # Use this instead of node.become(Node.createDouble(value)) to avoid more GC
    def flattenDouble(node Node, value double) {
      assert(cache.isEquivalentToDouble(node.resolvedType) || node.resolvedType == .DYNAMIC)
      flatten(node, DoubleContent.new(value))
    }

    # Use this instead of node.become(Node.createString(value)) to avoid more GC
    def flattenString(node Node, value string) {
      assert(cache.isEquivalentToString(node.resolvedType) || node.resolvedType == .DYNAMIC)
      flatten(node, StringContent.new(value))
    }

    def foldConstants(node Node) {
      var kind = node.kind

      # Transform "a + (b + c)" => "(a + b) + c" before operands are folded
      if kind == .ADD && node.resolvedType == cache.stringType && node.binaryLeft.resolvedType == cache.stringType && node.binaryRight.resolvedType == cache.stringType {
        rotateStringConcatenation(node)
      }

      # Fold operands before folding this node
      for child = node.firstChild; child != null; child = child.nextSibling {
        foldConstants(child)
      }

      # Separating the case bodies into separate functions makes the JavaScript JIT go faster
      switch kind {
        case .BLOCK { foldBlock(node) }
        case .CALL { foldCall(node) }
        case .CAST { foldCast(node) }
        case .DOT { foldDot(node) }
        case .HOOK { foldHook(node) }
        case .NAME { foldName(node) }
        case .COMPLEMENT, .DECREMENT, .INCREMENT, .NEGATIVE, .NOT, .POSITIVE { foldUnary(node) }
        default {
          if kind.isBinary { foldBinary(node) }
        }
      }
    }

    def rotateStringConcatenation(node Node) {
      var left = node.binaryLeft
      var right = node.binaryRight
      assert(node.kind == .ADD)
      assert(left.resolvedType == cache.stringType || left.resolvedType == .DYNAMIC)
      assert(right.resolvedType == cache.stringType || right.resolvedType == .DYNAMIC)

      # "a + (b + c)" => "(a + b) + c"
      if right.kind == .ADD {
        assert(right.binaryLeft.resolvedType == cache.stringType || right.binaryLeft.resolvedType == .DYNAMIC)
        assert(right.binaryRight.resolvedType == cache.stringType || right.binaryRight.resolvedType == .DYNAMIC)
        node.rotateBinaryRightToLeft
      }
    }

    def foldStringConcatenation(node Node) {
      var left = node.binaryLeft
      var right = node.binaryRight
      assert(left.resolvedType == cache.stringType || left.resolvedType == .DYNAMIC)
      assert(right.resolvedType == cache.stringType || right.resolvedType == .DYNAMIC)

      if right.isString {
        # "a" + "b" => "ab"
        if left.isString {
          flattenString(node, left.asString + right.asString)
        }

        else if left.kind == .ADD {
          var leftLeft = left.binaryLeft
          var leftRight = left.binaryRight
          assert(leftLeft.resolvedType == cache.stringType || leftLeft.resolvedType == .DYNAMIC)
          assert(leftRight.resolvedType == cache.stringType || leftRight.resolvedType == .DYNAMIC)

          # (a + "b") + "c" => a + "bc"
          if leftRight.isString {
            flattenString(leftRight, leftRight.asString + right.asString)
            node.become(left.remove)
          }
        }
      }
    }

    def foldTry(node Node) int {
      var tryBlock = node.tryBlock
      # var finallyBlock = node.finallyBlock

      # A try block without any statements cannot possibly throw
      if !tryBlock.hasChildren {
        node.remove
        return -1
      }

      # # No need to keep an empty finally block around
      # if finallyBlock != null && !finallyBlock.hasChildren {
      #   finallyBlock.remove
      #   finallyBlock = null
      # }

      # # Inline the contents of the try block into the parent if possible
      # if node.children.count == 2 && finallyBlock == null {
      #   node.replaceWithChildrenFrom(tryBlock)
      # }

      return 0
    }

    def foldIf(node Node) {
      var test = node.ifTest
      var trueBlock = node.ifTrue
      var falseBlock = node.ifFalse

      # No reason to keep an empty "else" block
      if falseBlock != null && !falseBlock.hasChildren {
        falseBlock.remove
        falseBlock = null
      }

      # Always true if statement
      if test.isTrue {
        # Inline the contents of the true block
        node.replaceWithChildrenFrom(trueBlock)
      }

      # Always false if statement
      else if test.isFalse {
        # Remove entirely
        if falseBlock == null {
          node.remove
        }

        # Inline the contents of the false block
        else {
          node.replaceWithChildrenFrom(falseBlock)
        }
      }

      # Remove if statements with empty true blocks
      else if !trueBlock.hasChildren {
        # "if (a) {} else b;" => "if (!a) b;"
        if falseBlock != null && falseBlock.hasChildren {
          test.invertBooleanCondition(cache)
          trueBlock.remove
        }

        # "if (a) {}" => ""
        else if test.hasNoSideEffects {
          node.remove
        }

        # "if (a) {}" => "a;"
        else {
          node.become(Node.createExpression(test.remove))
        }
      }
    }

    def foldSwitch(node Node) {
      var value = node.switchValue
      var defaultCase Node = null

      # Check for a default case
      for child = value.nextSibling; child != null; child = child.nextSibling {
        if child.hasOneChild {
          defaultCase = child
          break
        }
      }

      # Remove the default case if it's empty
      if defaultCase != null && !defaultCase.caseBlock.hasChildren {
        defaultCase.remove
        defaultCase = null
      }

      # If the default case is missing, all other empty cases can be removed too
      if defaultCase == null {
        for child = node.lastChild, previous Node = null; child != value; child = previous {
          previous = child.previousSibling
          if !child.caseBlock.hasChildren {
            child.remove
          }
        }
      }

      # Replace "switch (foo) {}" with "foo;"
      if node.hasOneChild {
        node.become(Node.createExpression(value.remove).withRange(node.range))
      }
    }

    def foldVariables(node Node) {
      # Remove symbols entirely that are being inlined everywhere
      for child = node.firstChild, next Node = null; child != null; child = next {
        assert(child.kind == .VARIABLE)
        next = child.nextSibling
        var symbol = child.symbol.asVariableSymbol
        if symbol.isConst && constantForSymbol(symbol) != null {
          child.remove
        }
      }

      # Empty variable statements are not allowed
      if !node.hasChildren {
        node.remove
      }
    }

    def foldBlock(node Node) {
      for child = node.firstChild, next Node = null; child != null; child = next {
        next = child.nextSibling
        var kind = child.kind

        # Remove everything after a jump
        if kind.isJump {
          while child.nextSibling != null {
            child.nextSibling.remove
          }
          break
        }

        # Remove constants and "while false { ... }" entirely
        if kind == .EXPRESSION && child.expressionValue.hasNoSideEffects || kind == .WHILE && child.whileTest.isFalse {
          child.remove
        }

        else if kind == .VARIABLES {
          foldVariables(child)
        }

        # Remove unused try statements since they can cause deoptimizations
        else if kind == .TRY {
          foldTry(child)
        }

        # Statically evaluate if statements where possible
        else if kind == .IF {
          foldIf(child)
        }

        # Fold switch statements
        else if kind == .SWITCH {
          foldSwitch(child)
        }
      }
    }

    def foldDot(node Node) {
      var symbol = node.symbol

      # Only replace this with a constant if the target has no side effects.
      # This catches constants declared on imported types.
      if symbol != null && symbol.isConst && (node.dotTarget == null || node.dotTarget.hasNoSideEffects) {
        var content = constantForSymbol(symbol.asVariableSymbol)
        if content != null {
          flatten(node, content)
        }
      }
    }

    def foldName(node Node) {
      var symbol = node.symbol

      # Don't fold loop variables since they aren't actually constant across loop iterations
      if symbol != null && symbol.isConst && !symbol.isLoopVariable {
        var content = constantForSymbol(symbol.asVariableSymbol)
        if content != null {
          flatten(node, content)
        }
      }
    }

    def isKnownCall(symbol Symbol, knownSymbol Symbol) bool {
      return symbol == knownSymbol || symbol != null && symbol.kind.isFunction && symbol.asFunctionSymbol.overloaded == knownSymbol
    }

    def foldCall(node Node) {
      var value = node.callValue
      var symbol = value.symbol

      if value.kind == .DOT {
        var target = value.dotTarget

        if target != null && target.kind == .CONSTANT {
          if isKnownCall(symbol, cache.boolToStringSymbol) { flattenString(node, target.asBool.toString) }
          else if isKnownCall(symbol, cache.doubleToStringSymbol) { flattenString(node, target.asDouble.toString) }
          else if isKnownCall(symbol, cache.intToStringSymbol) { flattenString(node, target.asInt.toString) }
        }
      }

      else if value.kind == .NAME {
        if isKnownCall(symbol, cache.stringCountSymbol) && node.lastChild.isString {
          flattenInt(node, Unicode.codeUnitCountForCodePoints(node.lastChild.asString.codePoints, options.target.stringEncoding))
        }

        else if isKnownCall(symbol, cache.intPowerSymbol) && node.lastChild.isInt && value.nextSibling.isInt {
          flattenInt(node, value.nextSibling.asInt ** node.lastChild.asInt)
        }

        else if isKnownCall(symbol, cache.doublePowerSymbol) && node.lastChild.isDouble && value.nextSibling.isDouble {
          flattenDouble(node, value.nextSibling.asDouble ** node.lastChild.asDouble)
        }
      }
    }

    def foldCast(node Node) {
      var type = node.castType.resolvedType
      var value = node.castValue

      if value.kind == .CONSTANT {
        var content = value.content
        var kind = content.kind

        # Cast "bool" values
        if kind == .BOOL {
          if cache.isEquivalentToBool(type) { flattenBool(node, value.asBool) }
          else if cache.isEquivalentToInt(type) { flattenInt(node, value.asBool as int) }
          else if cache.isEquivalentToDouble(type) { flattenDouble(node, value.asBool as double) }
        }

        # Cast "int" values
        else if kind == .INT {
          if cache.isEquivalentToBool(type) { flattenBool(node, value.asInt as bool) }
          else if cache.isEquivalentToInt(type) { flattenInt(node, value.asInt) }
          else if cache.isEquivalentToDouble(type) { flattenDouble(node, value.asInt) }
        }

        # Cast "double" values
        else if kind == .DOUBLE {
          if cache.isEquivalentToBool(type) { flattenBool(node, value.asDouble as bool) }
          else if cache.isEquivalentToInt(type) { flattenInt(node, value.asDouble as int) }
          else if cache.isEquivalentToDouble(type) { flattenDouble(node, value.asDouble) }
        }
      }
    }

    def foldUnary(node Node) {
      var value = node.unaryValue
      var kind = node.kind

      if value.kind == .CONSTANT {
        var content = value.content
        var contentKind = content.kind

        # Fold "bool" values
        if contentKind == .BOOL {
          if kind == .NOT { flattenBool(node, !value.asBool) }
        }

        # Fold "int" values
        else if contentKind == .INT {
          if kind == .POSITIVE { flattenInt(node, +value.asInt) }
          else if kind == .NEGATIVE { flattenInt(node, -value.asInt) }
          else if kind == .COMPLEMENT { flattenInt(node, ~value.asInt) }
        }

        # Fold "float" or "double" values
        else if contentKind == .DOUBLE {
          if kind == .POSITIVE { flattenDouble(node, +value.asDouble) }
          else if kind == .NEGATIVE { flattenDouble(node, -value.asDouble) }
        }
      }

      # Partial evaluation ("!!x" isn't necessarily "x" if we don't know the type)
      else if kind == .NOT && value.resolvedType != .DYNAMIC {
        switch value.kind {
          case .NOT, .EQUAL, .NOT_EQUAL, .LOGICAL_OR, .LOGICAL_AND, .LESS_THAN, .GREATER_THAN, .LESS_THAN_OR_EQUAL, .GREATER_THAN_OR_EQUAL {
            value.invertBooleanCondition(cache)
            node.become(value.remove)
          }
        }
      }
    }

    def foldConstantAddOrSubtract(node Node, variable Node, constant Node, delta int) {
      var isAdd = node.kind == .ADD
      var needsContentUpdate = delta != 0
      var isRightConstant = constant == node.binaryRight
      var shouldNegateConstant = !isAdd && isRightConstant
      var value = constant.asInt

      # Make this an add for simplicity
      if shouldNegateConstant {
        value = -value
      }

      # Include the delta from the parent node if present
      value += delta

      # Apply addition identities
      if value == 0 {
        node.become(variable.remove)
        return
      }

      # Check for nested addition or subtraction
      if variable.kind == .ADD || variable.kind == .SUBTRACT {
        var left = variable.binaryLeft
        var right = variable.binaryRight
        assert(left.resolvedType == cache.intType || left.resolvedType == .DYNAMIC)
        assert(right.resolvedType == cache.intType || right.resolvedType == .DYNAMIC)

        # (a + 1) + 2 => a + 3
        var isLeftConstant = left.isInt
        if isLeftConstant || right.isInt {
          foldConstantAddOrSubtract(variable, isLeftConstant ? right : left, isLeftConstant ? left : right, value)
          node.become(variable.remove)
          return
        }
      }

      # Adjust the value so it has the correct sign
      if shouldNegateConstant {
        value = -value
      }

      # The negative sign can often be removed by code transformation
      if value < 0 {
        # a + -1 => a - 1
        # a - -1 => a + 1
        if isRightConstant {
          node.kind = isAdd ? .SUBTRACT : .ADD
          value = -value
          needsContentUpdate = true
        }

        # -1 + a => a - 1
        else if isAdd {
          node.kind = .SUBTRACT
          value = -value
          variable.swapWith(constant)
          needsContentUpdate = true
        }
      }

      # Avoid extra allocations
      if needsContentUpdate {
        constant.content = IntContent.new(value)
      }

      # Also handle unary negation on "variable"
      foldAddOrSubtract(node)
    }

    def foldAddOrSubtract(node Node) {
      var isAdd = node.kind == .ADD
      var left = node.binaryLeft
      var right = node.binaryRight

      # -a + b => b - a
      if left.kind == .NEGATIVE && isAdd {
        left.become(left.unaryValue.remove)
        left.swapWith(right)
        node.kind = .SUBTRACT
      }

      # a + -b => a - b
      # a - -b => a + b
      else if right.kind == .NEGATIVE {
        right.become(right.unaryValue.remove)
        node.kind = isAdd ? .SUBTRACT : .ADD
      }
    }

    def foldConstantMultiply(node Node, variable Node, constant Node) {
      assert(constant.isInt)

      # Canonicalize multiplication order
      if node.binaryLeft == constant {
        variable.swapWith(constant)
      }

      # Apply identities
      var value = constant.asInt
      if value == 0 {
        if variable.hasNoSideEffects {
          node.become(constant.remove)
        }
        return
      }
      if value == 1 {
        node.become(variable.remove)
        return
      }

      # Multiply by a power of 2 should be a left-shift operation, which is
      # more concise and always faster (or at least never slower) than the
      # alternative. Division can't be replaced by a right-shift operation
      # because that would lead to incorrect results for negative numbers.
      var shift = logBase2(value)
      if shift != -1 {
        constant.content = IntContent.new(shift)
        node.kind = .SHIFT_LEFT
      }
    }

    def foldBinaryWithConstant(node Node, left Node, right Node) {
      # There are lots of other folding opportunities for most binary operators
      # here but those usually have a negligible performance and/or size impact
      # on the generated code and instead slow the compiler down. Only certain
      # ones are implemented below.
      switch node.kind {
        # These are important for dead code elimination
        case .LOGICAL_AND {
          if left.isFalse || right.isTrue { node.become(left.remove) }
          else if left.isTrue { node.become(right.remove) }
        }
        case .LOGICAL_OR {
          if left.isTrue || right.isFalse { node.become(left.remove) }
          else if left.isFalse { node.become(right.remove) }
        }

        # Constants are often added up in compound expressions. Folding
        # addition/subtraction improves minification in JavaScript and often
        # helps with readability.
        case .ADD, .SUBTRACT {
          if left.isInt { foldConstantAddOrSubtract(node, right, left, 0) }
          else if right.isInt { foldConstantAddOrSubtract(node, left, right, 0) }
          else { foldAddOrSubtract(node) }
        }

        # Multiplication is special-cased here because in JavaScript, optimizing
        # away the general-purpose Math.imul function may result in large
        # speedups when it's implemented with a polyfill.
        case .MULTIPLY {
          if left.isInt { foldConstantMultiply(node, right, left) }
          else if right.isInt { foldConstantMultiply(node, left, right) }
        }
      }
    }

    def foldBinary(node Node) {
      var kind = node.kind
      if kind == .ADD && node.resolvedType == cache.stringType {
        foldStringConcatenation(node)
        return
      }

      var left = node.binaryLeft
      var right = node.binaryRight

      if left.kind == .CONSTANT && right.kind == .CONSTANT {
        var leftContent = left.content
        var rightContent = right.content
        var leftKind = leftContent.kind
        var rightKind = rightContent.kind

        # Fold equality operators
        if leftKind == .STRING && rightKind == .STRING {
          switch kind {
            case .EQUAL { flattenBool(node, leftContent.asString == rightContent.asString) }
            case .NOT_EQUAL { flattenBool(node, leftContent.asString != rightContent.asString) }
            case .LESS_THAN { flattenBool(node, leftContent.asString < rightContent.asString) }
            case .GREATER_THAN { flattenBool(node, leftContent.asString > rightContent.asString) }
            case .LESS_THAN_OR_EQUAL { flattenBool(node, leftContent.asString <= rightContent.asString) }
            case .GREATER_THAN_OR_EQUAL { flattenBool(node, leftContent.asString >= rightContent.asString) }
          }
          return
        }

        # Fold "bool" values
        else if leftKind == .BOOL && rightKind == .BOOL {
          switch kind {
            case .LOGICAL_AND { flattenBool(node, leftContent.asBool && rightContent.asBool) }
            case .LOGICAL_OR { flattenBool(node, leftContent.asBool || rightContent.asBool) }
            case .EQUAL { flattenBool(node, leftContent.asBool == rightContent.asBool) }
            case .NOT_EQUAL { flattenBool(node, leftContent.asBool != rightContent.asBool) }
          }
          return
        }

        # Fold "int" values
        else if leftKind == .INT && rightKind == .INT {
          switch kind {
            case .ADD { flattenInt(node, leftContent.asInt + rightContent.asInt) }
            case .SUBTRACT { flattenInt(node, leftContent.asInt - rightContent.asInt) }
            case .MULTIPLY { flattenInt(node, leftContent.asInt * rightContent.asInt) }
            case .DIVIDE { flattenInt(node, leftContent.asInt / rightContent.asInt) }
            case .REMAINDER { flattenInt(node, leftContent.asInt % rightContent.asInt) }
            case .SHIFT_LEFT { flattenInt(node, leftContent.asInt << rightContent.asInt) }
            case .SHIFT_RIGHT { flattenInt(node, leftContent.asInt >> rightContent.asInt) }
            case .BITWISE_AND { flattenInt(node, leftContent.asInt & rightContent.asInt) }
            case .BITWISE_OR { flattenInt(node, leftContent.asInt | rightContent.asInt) }
            case .BITWISE_XOR { flattenInt(node, leftContent.asInt ^ rightContent.asInt) }
            case .EQUAL { flattenBool(node, leftContent.asInt == rightContent.asInt) }
            case .NOT_EQUAL { flattenBool(node, leftContent.asInt != rightContent.asInt) }
            case .LESS_THAN { flattenBool(node, leftContent.asInt < rightContent.asInt) }
            case .GREATER_THAN { flattenBool(node, leftContent.asInt > rightContent.asInt) }
            case .LESS_THAN_OR_EQUAL { flattenBool(node, leftContent.asInt <= rightContent.asInt) }
            case .GREATER_THAN_OR_EQUAL { flattenBool(node, leftContent.asInt >= rightContent.asInt) }
          }
          return
        }

        # Fold "double" values
        else if leftKind == .DOUBLE && rightKind == .DOUBLE {
          switch kind {
            case .ADD { flattenDouble(node, leftContent.asDouble + rightContent.asDouble) }
            case .SUBTRACT { flattenDouble(node, leftContent.asDouble - rightContent.asDouble) }
            case .MULTIPLY { flattenDouble(node, leftContent.asDouble * rightContent.asDouble) }
            case .DIVIDE { flattenDouble(node, leftContent.asDouble / rightContent.asDouble) }
            case .EQUAL { flattenBool(node, leftContent.asDouble == rightContent.asDouble) }
            case .NOT_EQUAL { flattenBool(node, leftContent.asDouble != rightContent.asDouble) }
            case .LESS_THAN { flattenBool(node, leftContent.asDouble < rightContent.asDouble) }
            case .GREATER_THAN { flattenBool(node, leftContent.asDouble > rightContent.asDouble) }
            case .LESS_THAN_OR_EQUAL { flattenBool(node, leftContent.asDouble <= rightContent.asDouble) }
            case .GREATER_THAN_OR_EQUAL { flattenBool(node, leftContent.asDouble >= rightContent.asDouble) }
          }
          return
        }
      }

      foldBinaryWithConstant(node, left, right)
    }

    def foldHook(node Node) {
      var test = node.hookTest
      if test.isTrue { node.become(node.hookTrue.remove) }
      else if test.isFalse { node.become(node.hookFalse.remove) }
    }

    # Returns the log2(value) or -1 if log2(value) is not an integer
    def logBase2(value int) int {
      if value < 1 || (value & (value - 1)) != 0 {
        return -1
      }
      var result = 0
      while value > 1 {
        value >>= 1
        result++
      }
      return result
    }

    def constantForSymbol(symbol VariableSymbol) Content {
      if symbol.id in constantCache {
        return constantCache[symbol.id]
      }

      if prepareSymbol != null {
        prepareSymbol(symbol)
      }

      var constant Content = null
      var value = symbol.value

      if symbol.isConst && value != null {
        constantCache[symbol.id] = null
        foldConstants(value)
        if value.kind == .CONSTANT {
          constant = value.content
        }
      }

      constantCache[symbol.id] = constant
      return constant
    }
  }
}
