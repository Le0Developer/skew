namespace Skew {
  const NATIVE_LIBRARY_JS = "
const __extends = (derived dynamic, base dynamic) => {
  derived.prototype = dynamic.Object.create(base.prototype)
  derived.prototype.constructor = derived
}

const __imul fn(int, int) int = dynamic.Math.imul ? dynamic.Math.imul : (a, b) => {
  const ah dynamic = (a >> 16) & 65535
  const bh dynamic = (b >> 16) & 65535
  const al dynamic = a & 65535
  const bl dynamic = b & 65535
  return al * bl + ((ah * bl + al * bh) << 16) | 0
}

const __isInt = (value dynamic) => value == (value | 0)
const __isBool = (value dynamic) => value == !!value
const __isDouble = (value dynamic) => value == +value || dynamic.isNaN(value)
const __isString = (value dynamic) => dynamic.typeof(value) == \"string\"

def assert(truth bool) {
  if !truth {
    throw dynamic.Error(\"Assertion failed\")
  }
}

@import
namespace Math {}

class double {
  def isFinite bool {
    return dynamic.isFinite(self)
  }

  def isNaN bool {
    return dynamic.isNaN(self)
  }
}

class string {
  def <=>(x string) int {
    return ((x as dynamic < self) as int) - ((x as dynamic > self) as int)
  }

  def startsWith(text string) bool {
    return count >= text.count && slice(0, text.count) == text
  }

  def endsWith(text string) bool {
    return count >= text.count && slice(count - text.count) == text
  }

  def replaceAll(before string, after string) string {
    return after.join(self.split(before))
  }

  def in(value string) bool {
    return indexOf(value) != -1
  }

  def count int {
    return (self as dynamic).length
  }

  def [](index int) int {
    return (self as dynamic).charCodeAt(index)
  }

  def get(index int) string {
    return (self as dynamic)[index]
  }

  def repeat(times int) string {
    var result = \"\"
    for i in 0..times {
      result += self
    }
    return result
  }

  def join(parts List<string>) string {
    return (parts as dynamic).join(self)
  }

  def codeUnits List<int> {
    var result List<int> = []
    for i in 0..count {
      result.append(self[i])
    }
    return result
  }
}

namespace string {
  def fromCodeUnit(codeUnit int) string {
    return dynamic.String.fromCharCode(codeUnit)
  }

  def fromCodeUnits(codeUnits List<int>) string {
    var result = \"\"
    for codeUnit in codeUnits {
      result += string.fromCodeUnit(codeUnit)
    }
    return result
  }
}

class StringBuilder {
  var buffer = \"\"

  def new {
  }

  def append(x string) {
    buffer += x
  }

  def toString string {
    return buffer
  }
}

@rename(\"Array\")
class List {
  @rename(\"shift\") {
    def removeFirst
    def takeFirst T
  }

  @rename(\"pop\") {
    def removeLast
    def takeLast T
  }

  @rename(\"unshift\")
  def prepend(x T)

  @rename(\"push\")
  def append(x T)

  @rename(\"every\") if TARGET == .JAVASCRIPT
  def all(x fn(T) bool) bool

  @rename(\"some\") if TARGET == .JAVASCRIPT
  def any(x fn(T) bool) bool

  @rename(\"slice\") if TARGET == .JAVASCRIPT
  def clone List<T>

  @rename(\"forEach\") if TARGET == .JAVASCRIPT
  def each(x fn(T))

  def in(value T) bool {
    return indexOf(value) != -1
  }

  def isEmpty bool {
    return count == 0
  }

  def count int {
    return (self as dynamic).length
  }

  def first T {
    return self[0]
  }

  def last T {
    return self[count - 1]
  }

  def prepend(values List<T>) {
    var count = values.count
    for i in 0..count {
      prepend(values[count - i - 1])
    }
  }

  def append(values List<T>) {
    for value in values {
      append(value)
    }
  }

  def swap(i int, j int) {
    var temp = self[i]
    self[i] = self[j]
    self[j] = temp
  }

  def insert(index int, value T) {
    (self as dynamic).splice(index, 0, value)
  }

  def removeAt(index int) {
    (self as dynamic).splice(index, 1)
  }

  def appendOne(value T) {
    if !(value in self) {
      append(value)
    }
  }

  def removeOne(value T) {
    var index = indexOf(value)
    if index >= 0 {
      removeAt(index)
    }
  }

  def removeIf(callback fn(T) bool) {
    var index = 0

    # Remove elements in place
    for i in 0..count {
      if !callback(self[i]) {
        if index < i {
          self[index] = self[i]
        }
        index++
      }
    }

    # Shrink the array to the correct size
    while index < count {
      removeLast
    }
  }

  def equals(other List<T>) bool {
    if count != other.count {
      return false
    }
    for i in 0..count {
      if self[i] != other[i] {
        return false
      }
    }
    return true
  }
}

namespace List {
  def new List<T> {
    return [] as dynamic
  }
}

namespace StringMap {
  def new StringMap<T> {
    return dynamic.Object.create(null)
  }
}

class StringMap {
  def {...}(key string, value T) StringMap<T> {
    self[key] = value
    return self
  }

  def get(key string, defaultValue T) T {
    var value = self[key]
    return value != dynamic.void(0) ? value : defaultValue # Compare against undefined so the key is only hashed once for speed
  }

  def keys List<string> {
    return dynamic.Object.keys(self)
  }

  def values List<T> {
    var values List<T> = []
    for key in self as dynamic {
      values.append(self[key])
    }
    return values
  }

  def clone StringMap<T> {
    var clone = new
    for key in keys {
      clone[key] = self[key]
    }
    return clone
  }

  def remove(key string) {
    dynamic.delete(self[key])
  }
}

namespace IntMap {
  def new IntMap<T> {
    return {} as dynamic
  }
}

class IntMap {
  def {...}(key int, value T) IntMap<T> {
    self[key] = value
    return self
  }

  def get(key int, defaultValue T) T {
    var value = self[key]
    return value != dynamic.void(0) ? value : defaultValue # Compare against undefined so the key is only hashed once for speed
  }

  def keys List<int> {
    var keys List<int> = []
    for key in dynamic.Object.keys(self) as List<string> {
      keys.append(key as dynamic as int)
    }
    return keys
  }

  def values List<T> {
    var values List<T> = []
    for key in self as dynamic {
      values.append(self[key])
    }
    return values
  }

  def clone IntMap<T> {
    var clone = new
    for key in keys {
      clone[key] = self[key]
    }
    return clone
  }

  def remove(key int) {
    dynamic.delete(self[key])
  }
}
"
}
