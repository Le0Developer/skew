namespace Skew {
  enum TypeKind {
    LAMBDA
    SPECIAL
    SYMBOL
  }

  class Type {
    const id = _createID
    var kind TypeKind
    var symbol Symbol
    var environment Environment = null
    var substitutions List<Type> = null
    var argumentTypes List<Type> = null
    var returnType Type = null
    var substitutionCache IntMap<Type> = null # Maps a type environment id to this type in that environment

    def parameters List<ParameterSymbol> {
      return
        symbol == null ? null :
        symbol.kind.isObject ? symbol.asObjectSymbol.parameters :
        symbol.kind.isFunction ? symbol.asFunctionSymbol.parameters :
        null
    }

    def isParameterized bool {
      return substitutions != null
    }

    def isWrapped bool {
      return symbol != null && symbol.kind == .OBJECT_WRAPPED
    }

    def isClass bool {
      return symbol != null && symbol.kind == .OBJECT_CLASS
    }

    def isInterface bool {
      return symbol != null && symbol.kind == .OBJECT_INTERFACE
    }

    def isEnum bool {
      return symbol != null && symbol.kind == .OBJECT_ENUM
    }

    def isParameter bool {
      return symbol != null && symbol.kind.isParameter
    }

    # Type parameters are not guaranteed to be nullable since generics are
    # implemented through type erasure and the substituted type may be "int"
    def isReference bool {
      return symbol == null || !symbol.isValueType && !symbol.kind.isParameter && (symbol.kind != .OBJECT_WRAPPED || symbol.asObjectSymbol.wrappedType.isReference)
    }

    def toString string {
      if kind == .SYMBOL {
        if isParameterized {
          var name = symbol.fullName + "<"
          for i in 0..substitutions.count {
            if i != 0 {
              name += ", "
            }
            name += substitutions[i].toString
          }
          return name + ">"
        }
        return symbol.fullName
      }

      if kind == .LAMBDA {
        var result = "fn("
        for i in 0..argumentTypes.count {
          if i != 0 {
            result += ", "
          }
          result += argumentTypes[i].toString
        }
        return result + (returnType != null ? ") " + returnType.toString : ")")
      }

      return self == DYNAMIC ? "dynamic" : "null"
    }

    def baseClass Type {
      if isClass {
        var base = symbol.asObjectSymbol.base
        if base != null {
          return base.resolvedType
        }
      }
      return null
    }
  }

  namespace Type {
    var DYNAMIC Type = null
    var NULL Type = null

    def initialize {
      if DYNAMIC == null {
        DYNAMIC = Type.new(.SPECIAL, null)
      }
      if NULL == null {
        NULL = Type.new(.SPECIAL, null)
      }
    }

    def _createID int {
      _nextID++
      return _nextID
    }

    var _nextID = 0
  }

  class Environment {
    const id = _createID
    const parameters List<ParameterSymbol>
    const substitutions List<Type>
    const mergeCache IntMap<Environment> = null

    # This is just for debugging
    def toString string {
      var text = "("
      for i in 0..parameters.count {
        if i != 0 {
          text += ", "
        }
        text += parameters[i].name + " => " + substitutions[i].toString
      }
      return text + ")"
    }
  }

  namespace Environment {
    def _createID int {
      _nextID++
      return _nextID
    }

    var _nextID = 0
  }
}
