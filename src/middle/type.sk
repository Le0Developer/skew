namespace astral {
  enum TypeKind {
    DYNAMIC
    LAMBDA
    NULL
    SYMBOL
  }

  class Type {
    static var DYNAMIC = SpecialType(.DYNAMIC)
    static var NULL = SpecialType(.NULL)

    virtual TypeKind kind()
    virtual string toString()

    SymbolType asSymbolType() {
      assert kind() == .SYMBOL
      return (SymbolType)this
    }

    LambdaType asLambdaType() {
      assert kind() == .LAMBDA
      return (LambdaType)this
    }

    bool isReference() {
      return kind() != .SYMBOL || !asSymbolType().symbol.isValueType()
    }
  }

  class SpecialType : Type {
    TypeKind specialKind

    override TypeKind kind() {
      return specialKind
    }

    override string toString() {
      return specialKind == .DYNAMIC ? "dynamic" : "null"
    }
  }

  class SymbolType : Type {
    Symbol symbol

    override TypeKind kind() {
      return .SYMBOL
    }

    override string toString() {
      return symbol.fullName()
    }
  }

  class LambdaType : Type {
    List<Type> argumentTypes
    Type returnType

    override TypeKind kind() {
      return .LAMBDA
    }

    override string toString() {
      var result = "fn("
      for (var i = 0; i < argumentTypes.size(); i++) {
        if (i != 0) {
          result += ", "
        }
        result += argumentTypes[i]
      }
      return result + (returnType != null ? ") " + returnType : ")")
    }
  }

  class TypeCache {
    SymbolType boolType = null
    SymbolType doubleType = null
    SymbolType intType = null
    SymbolType stringType = null

    void loadGlobals(Log log, TypeSymbol global) {
      boolType = loadGlobalClass(log, global, "bool", .VALUE_TYPE)
      doubleType = loadGlobalClass(log, global, "double", .VALUE_TYPE)
      intType = loadGlobalClass(log, global, "int", .VALUE_TYPE)
      stringType = loadGlobalClass(log, global, "string", .VALUE_TYPE)
    }

    bool canImplicitlyConvert(Type from, Type to) {
      if (from == to) return true
      if (from == .NULL && to.isReference()) return true
      if (from == intType && to == doubleType) return true
      // if (from.hasBaseType(to)) return true
      return false
    }

    bool canExplicitlyConvert(Type from, Type to) {
      if (canImplicitlyConvert(from, to)) return true
      if (canCastToNumeric(from) && canCastToNumeric(to)) return true
      // if (to.hasBaseType(from)) return true
      return false
    }

    LambdaType createLambdaType(List<Type> argumentTypes, Type returnType) {
      return LambdaType(argumentTypes, returnType) // TODO: Deduplicate this so equality comparison works
    }

    private {
      bool canCastToNumeric(Type type) {
        return type == intType || type == doubleType || type == boolType
      }

      static SymbolType loadGlobalClass(Log log, TypeSymbol global, string name, SymbolFlags flags) {
        var symbol = global.members.getOrDefault(name, null)
        assert symbol != null
        assert symbol.kind == .TYPE_CLASS
        var type = SymbolType(symbol.asType())
        symbol.resolvedType = type
        symbol.flags |= flags
        return type
      }
    }
  }
}
