namespace astral {
  using astral.resolving

  void resolvingPass(Log log, TypeSymbol global) {
    var cache = TypeCache()
    cache.loadGlobals(log, global)
    if (!log.hasErrors()) {
      Resolver(cache, log).resolveType(global)
    }
  }
}

namespace astral.resolving {
  enum ConversionKind {
    IMPLICIT
    EXPLICIT
  }

  enum FailureMode {
    SILENT_FAILURE
    ERROR_FAILURE
  }

  class Resolver {
    TypeCache cache
    Log log

    void initializeSymbol(Symbol symbol) {
      // The scope should have been set by the merging pass (or by this pass for local variables)
      assert symbol.scope != null

      // Only initialize the symbol once
      if (symbol.state == .UNINITIALIZED) {
        symbol.state = .INITIALIZING

        switch (symbol.kind) {
          case .TYPE_CLASS, .TYPE_GLOBAL, .TYPE_INTERFACE, .TYPE_NAMESPACE {
            initializeType(symbol.asType())
          }

          case .FUNCTION_CONSTRUCTOR, .FUNCTION_GLOBAL, .FUNCTION_INSTANCE, .FUNCTION_LOCAL {
            initializeFunction(symbol.asFunction())
          }

          case .VARIABLE_GLOBAL, .VARIABLE_INSTANCE, .VARIABLE_LOCAL {
            initializeVariable(symbol.asVariable())
          }

          case .PARAMETER {
            initializeParameter(symbol.asParameter())
          }

          case .OVERLOADED_GLOBAL, .OVERLOADED_INSTANCE {
            initializeOverloadedFunction(symbol.asOverloadedFunction())
          }

          default {
            assert false
          }
        }

        assert symbol.resolvedType != null
        symbol.state = .INITIALIZED
      }

      // Detect cyclic symbol references such as "foo foo;"
      else if (symbol.state == .INITIALIZING) {
        log.semanticErrorCyclicDeclaration(symbol.range, symbol.name)
        symbol.resolvedType = .DYNAMIC
      }
    }

    void resolveParameters(List<ParameterSymbol> parameters) {
      if (parameters != null) {
        for (var i = 0; i < parameters.size(); i++) {
          resolveParameter(parameters[i])
        }
      }
    }

    void initializeParameter(ParameterSymbol symbol) {
      if (symbol.resolvedType == null) {
        symbol.resolvedType = SymbolType(symbol)
      }
    }

    void resolveParameter(ParameterSymbol symbol) {
      initializeSymbol(symbol)
    }

    void initializeType(TypeSymbol symbol) {
      if (symbol.resolvedType == null) {
        symbol.resolvedType = SymbolType(symbol)
      }

      if (symbol.base != null) {
        resolveAsParameterizedType(symbol.base, symbol.scope)
      }
    }

    void resolveType(TypeSymbol symbol) {
      initializeSymbol(symbol)
      resolveParameters(symbol.parameters)

      for (var i = 0; i < symbol.types.size(); i++) {
        resolveType(symbol.types[i])
      }

      for (var i = 0; i < symbol.functions.size(); i++) {
        resolveFunction(symbol.functions[i])
      }

      for (var i = 0; i < symbol.variables.size(); i++) {
        resolveVariable(symbol.variables[i])
      }
    }

    void initializeFunction(FunctionSymbol symbol) {
      if (symbol.resolvedType == null) {
        symbol.resolvedType = SymbolType(symbol)
      }

      resolveParameters(symbol.parameters)

      for (var i = 0; i < symbol.arguments.size(); i++) {
        var argument = symbol.arguments[i]
        argument.scope = symbol.scope
        resolveVariable(argument)
      }

      if (symbol.returnType != null) {
        if (symbol.kind == .FUNCTION_CONSTRUCTOR) {
          log.semanticErrorConstructorReturnType(symbol.returnType.range)
          symbol.returnType = null
        }

        else {
          resolveAsParameterizedType(symbol.returnType, symbol.scope)
        }
      }

      // Setters must have one argument
      if (symbol.isSetter() && symbol.arguments.size() != 1) {
        log.semanticErrorSetterWrongArgumentCount(symbol.range, symbol.name)
        symbol.flags &= ~.SETTER
      }
    }

    void resolveFunction(FunctionSymbol symbol) {
      initializeSymbol(symbol)

      var scope = LocalScope(symbol.scope)

      if (symbol.kind == .FUNCTION_INSTANCE || symbol.kind == .FUNCTION_CONSTRUCTOR) {
        symbol.self = VariableSymbol(.VARIABLE_LOCAL, "self")
        symbol.self.resolvedType = symbol.parent.resolvedType
        symbol.self.state = .INITIALIZED
        scope.define(symbol.self, log)
      }

      // Default values for argument variables aren't resolved with this local
      // scope since they are evaluated at the call site, not inside the
      // function body, and shouldn't have access to other arguments
      for (var i = 0; i < symbol.arguments.size(); i++) {
        scope.define(symbol.arguments[i], log)
      }

      if (symbol.block != null) {
        resolveNode(symbol.block, scope, null)

        // Missing a return statement is an error
        if (symbol.returnType != null && symbol.returnType.resolvedType != .DYNAMIC && !symbol.block.blockAlwaysEndsWithReturn()) {
          log.semanticErrorMissingReturn(symbol.range, symbol.name, symbol.returnType.resolvedType)
        }
      }
    }

    void initializeVariable(VariableSymbol symbol) {
      if (symbol.type != null) {
        resolveAsParameterizedType(symbol.type, symbol.scope)
        symbol.resolvedType = symbol.type.resolvedType
      }

      // Implicitly-typed variables take their type from their initializer
      else if (symbol.value != null) {
        resolveAsParameterizedExpression(symbol.value, symbol.scope)
        symbol.resolvedType = symbol.value.resolvedType

        // Forbid the null type since it's definitely a mistake
        if (symbol.resolvedType == .NULL) {
          log.semanticErrorBadVariableType(symbol.range, symbol.resolvedType)
          symbol.resolvedType = .DYNAMIC
        }
      }

      // Use a different error for lambda arguments which cannot have an initializer
      else if (symbol.scope.kind() == .FUNCTION && symbol.scope.asFunction().symbol.kind == .FUNCTION_LOCAL) {
        log.semanticErrorVarMissingType(symbol.range, symbol.name)
        symbol.resolvedType = .DYNAMIC
      }

      // Variables without a type are an error
      else {
        log.semanticErrorVarMissingValue(symbol.range)
        symbol.resolvedType = .DYNAMIC
      }
    }

    void resolveVariable(VariableSymbol symbol) {
      initializeSymbol(symbol)

      if (symbol.value != null) {
        resolveAsParameterizedExpressionWithConversion(symbol.value, symbol.scope, symbol.resolvedType)
      }

      // Default-initialize varliables that aren't explicitly initialized
      else if (symbol.kind != .VARIABLE_LOCAL) {
        symbol.value = defaultValueForType(symbol.resolvedType)
      }
    }

    void initializeOverloadedFunction(OverloadedFunctionSymbol symbol) {
      var symbols = symbol.symbols

      if (symbol.resolvedType == null) {
        symbol.resolvedType = SymbolType(symbol)
      }

      for (var i = 0; i < symbols.size(); i++) {
        initializeSymbol(symbols[i])
      }
    }

    void resolveNode(Node node, Scope scope, Type context) {
      if (node.resolvedType != null) {
        return // Only resolve once
      }

      node.resolvedType = .DYNAMIC
      switch (node.kind) {
        case .BLOCK { resolveBlock(node, scope) }

        // Statements
        case .BREAK {}
        case .CONTINUE {}
        case .EXPRESSION { resolveExpression(node, scope) }
        case .IF { resolveIf(node, scope) }
        case .RETURN { resolveReturn(node, scope) }
        case .VAR { resolveVar(node, scope) }
        case .WHILE { resolveWhile(node, scope) }

        // Expressions
        case .ASSIGN_INDEX { resolveIndex(node, scope) }
        case .CALL { resolveCall(node, scope) }
        case .CAST { resolveCast(node, scope) }
        case .CONSTANT { resolveConstant(node, scope) }
        case .DOT { resolveDot(node, scope) }
        case .DYNAMIC {}
        case .HOOK { resolveHook(node, scope) }
        case .INDEX { resolveIndex(node, scope) }
        case .LAMBDA { resolveLambda(node, scope, context) }
        case .LAMBDA_TYPE { resolveLambdaType(node, scope) }
        case .NAME { resolveName(node, scope) }
        case .NULL { node.resolvedType = .NULL }
        case .PARAMETERIZE { resolveParameterize(node, scope) }

        default {
          if (node.kind.isUnary()) { resolveUnary(node, scope) }
          else if (node.kind.isBinary()) { resolveBinary(node, scope) }
          else { assert false }
        }
      }

      assert node.resolvedType != null
    }

    void resolveAsParameterizedType(Node node, Scope scope) {
      assert node.kind.isExpression()
      resolveNode(node, scope, null)
      checkIsType(node)
      checkIsParameterized(node)
    }

    void resolveAsParameterizedExpression(Node node, Scope scope) {
      assert node.kind.isExpression()
      resolveNode(node, scope, null)
      checkIsInstance(node)
      checkIsParameterized(node)
    }

    void resolveAsParameterizedExpressionWithTypeContext(Node node, Scope scope, Type type) {
      assert node.kind.isExpression()
      resolveNode(node, scope, type)
      checkIsInstance(node)
      checkIsParameterized(node)
    }

    void resolveAsParameterizedExpressionWithConversion(Node node, Scope scope, Type type) {
      resolveAsParameterizedExpressionWithTypeContext(node, scope, type)
      checkConversion(node, type, .IMPLICIT)
    }

    void checkIsInstance(Node node) {
      if (node.isType()) {
        log.semanticErrorUnexpectedType(node.range, node.resolvedType)
        node.resolvedType = .DYNAMIC
      }
    }

    void checkIsType(Node node) {
      if (node.resolvedType != .DYNAMIC && !node.isType()) {
        log.semanticErrorUnexpectedExpression(node.range, node.resolvedType)
        node.resolvedType = .DYNAMIC
      }
    }

    void checkIsParameterized(Node node) {
      // TODO
    }

    void checkConversion(Node node, Type to, ConversionKind kind) {
      var from = node.resolvedType
      assert from != null
      assert to != null

      // The "dynamic" type is a hole in the type system
      if (from == .DYNAMIC || to == .DYNAMIC) {
        return
      }

      // No conversion is needed for identical types
      if (from == to) {
        return
      }

      // The implicit conversion must be valid
      if (kind == .IMPLICIT && !cache.canImplicitlyConvert(from, to) ||
          kind == .EXPLICIT && !cache.canExplicitlyConvert(from, to)) {
        log.semanticErrorIncompatibleTypes(node.range, from, to, cache.canExplicitlyConvert(from, to))
        node.resolvedType = .DYNAMIC
        return
      }

      // Make the implicit conversion explicit for convenience later on
      if (kind == .IMPLICIT) {
        var value = Node.createNull()
        value.become(node)
        node.become(Node.createCast(value, Node.createType(to)).withType(to).withRange(node.range))
      }
    }

    void resolveBlock(Node node, Scope scope) {
      assert node.kind == .BLOCK

      // Introduce a new scope for nested blocks
      if (node.parent != null) {
        scope = LocalScope(scope)
      }

      var children = node.children
      var n = children.size()

      for (var i = 0; i < n; i++) {
        var child = children[i]

        // There is a well-known ambiguity in languages like JavaScript where
        // a return statement followed by a newline and a value can either be
        // parsed as a single return statement with a value or as two
        // statements, a return statement without a value and an expression
        // statement. Luckily, we're better off than JavaScript since we know
        // the type of the function. Parse a single statement in a non-void
        // function but two statements in a void function.
        if (child.kind == .RETURN && i + 1 < n && child.returnValue() == null && children[i + 1].kind == .EXPRESSION && findReturnType(scope) != null) {
          child.replaceChild(0, node.removeChildAtIndex(i + 1).expressionValue().replaceWithNull())
          n--
        }

        resolveNode(child, scope, null)
      }
    }

    void resolveExpression(Node node, Scope scope) {
      resolveAsParameterizedExpression(node.expressionValue(), scope)
    }

    void resolveIf(Node node, Scope scope) {
      var ifFalse = node.ifFalse()
      resolveAsParameterizedExpressionWithConversion(node.ifTest(), scope, cache.boolType)
      resolveBlock(node.ifTrue(), scope)
      if (ifFalse != null) {
        resolveBlock(ifFalse, scope)
      }
    }

    void resolveReturn(Node node, Scope scope) {
      var value = node.returnValue()
      var returnType = findReturnType(scope)

      if (value != null) {
        if (returnType != null) {
          resolveAsParameterizedExpressionWithConversion(value, scope, returnType)
        } else {
          log.semanticErrorUnexpectedReturnValue(value.range)
          resolveAsParameterizedExpression(value, scope)
        }
      } else if (returnType != null) {
        log.semanticErrorExpectedReturnValue(node.range, returnType)
      }
    }

    void resolveVar(Node node, Scope scope) {
      var symbol = node.symbol.asVariable()
      scope.asLocal().define(symbol, log)
      resolveVariable(symbol)
    }

    void resolveWhile(Node node, Scope scope) {
      resolveAsParameterizedExpressionWithConversion(node.whileTest(), scope, cache.boolType)
      resolveBlock(node.whileBlock(), scope)
    }

    void resolveCall(Node node, Scope scope) {
      var value = node.callValue()
      resolveAsParameterizedExpression(value, scope)
      var type = value.resolvedType

      switch (type.kind()) {
        // Each function has its own type for simplicity
        case .SYMBOL {
          if (resolveSymbolCall(node, scope, type.asSymbolType())) {
            return
          }
        }

        // Lambda types look like "fn(int, int) int"
        case .LAMBDA {
          if (resolveLambdaCall(node, scope, type.asLambdaType())) {
            return
          }
        }

        // Can't call other types (the null type, for example)
        default {
          if (type != .DYNAMIC) {
            log.semanticErrorInvalidCall(node.internalRange, value.resolvedType)
          }
        }
      }

      // If there was an error, resolve the arguments to check for further
      // errors but use a dynamic type context to avoid introducing errors
      for (var i = 1; i < node.children.size(); i++) {
        resolveAsParameterizedExpressionWithConversion(node.children[i], scope, .DYNAMIC)
      }
    }

    bool resolveSymbolCall(Node node, Scope scope, SymbolType type) {
      var symbol = type.symbol

      // Getters are called implicitly, so explicitly calling one is an error.
      // This error prevents a getter returning a lambda which is then called,
      // but that's really strange and I think this error is more useful.
      if (symbol.isGetter() && node.parent != null && node.parent.kind == .CALL && node == node.parent.callValue()) {
        log.semanticErrorGetterCalledTwice(node.parent.internalRange, symbol.name)
        return false
      }

      // Check for calling a function directly
      if (symbol.kind.isFunction()) {
        return resolveFunctionCall(node, scope, symbol.asFunction())
      }

      // Check for calling a set of functions, must not be ambiguous
      if (symbol.kind.isOverloadedFunction()) {
        return resolveOverloadedFunctionCall(node, scope, symbol.asOverloadedFunction())
      }

      // Can't call other symbols
      log.semanticErrorInvalidCall(node.internalRange, node.callValue().resolvedType)
      return false
    }

    bool resolveFunctionCall(Node node, Scope scope, FunctionSymbol function) {
      var expected = function.arguments.size()
      var count = node.children.size() - 1

      // Use the return type even if there were errors
      if (function.returnType != null) {
        node.resolvedType = function.returnType.resolvedType
      }

      // Constructors have an implicit return type
      else if (function.kind == .FUNCTION_CONSTRUCTOR) {
        node.resolvedType = function.parent.resolvedType
      }

      // There is no "void" type, so make sure this return value isn't used
      // (the parent will be null for variable initializers)
      else if (node.parent == null || node.parent.kind != .EXPRESSION) {
        log.semanticErrorUseOfVoidFunction(node.range, function.name)
      }

      // Check argument count
      if (expected != count) {
        log.semanticErrorArgumentCount(node.internalRange, expected, count)
        return false
      }

      // Check argument types
      for (var i = 0; i < count; i++) {
        resolveAsParameterizedExpressionWithConversion(node.children[i + 1], scope, function.arguments[i].resolvedType)
      }

      return true
    }

    bool resolveOverloadedFunctionCall(Node node, Scope scope, OverloadedFunctionSymbol overloaded) {
      var count = node.children.size() - 1
      List<FunctionSymbol> candidates = []

      // Filter by argument length
      for (var i = 0; i < overloaded.symbols.size(); i++) {
        var overload = overloaded.symbols[i]
        if (overload.arguments.size() == count) {
          candidates.push(overload)
        }
      }

      // Check for matches
      if (candidates.size() < 1) {
        log.semanticErrorNoMatchingOverload(node.callValue().range, overloaded.name, count)
        return false
      }

      // Check for ambiguity
      if (candidates.size() > 1) {
        log.semanticErrorAmbiguousOperator(node.callValue().range, overloaded.name, count)
        return false
      }

      // Target is unambiguous
      return resolveFunctionCall(node, scope, candidates[0])
    }

    bool resolveLambdaCall(Node node, Scope scope, LambdaType type) {
      var expected = type.argumentTypes.size()
      var count = node.children.size() - 1

      // Use the return type even if there were errors
      if (type.returnType != null) {
        node.resolvedType = type.returnType
      }

      // There is no "void" type, so make sure this return value isn't used
      // (the parent will be null for variable initializers)
      else if (node.parent == null || node.parent.kind != .EXPRESSION) {
        log.semanticErrorUseOfVoidLambda(node.range)
      }

      // Check argument count
      if (expected != count) {
        log.semanticErrorArgumentCount(node.internalRange, expected, count)
        return false
      }

      // Check argument types
      for (var i = 0; i < count; i++) {
        resolveAsParameterizedExpressionWithConversion(node.children[i + 1], scope, type.argumentTypes[i])
      }

      return true
    }

    void resolveCast(Node node, Scope scope) {
      var value = node.castValue()
      var type = node.castType()
      resolveAsParameterizedType(type, scope)
      resolveAsParameterizedExpressionWithTypeContext(value, scope, type.resolvedType)
      checkConversion(value, type.resolvedType, .EXPLICIT)
      node.resolvedType = type.resolvedType
    }

    void resolveConstant(Node node, Scope scope) {
      switch (node.content.kind()) {
        case .BOOL { node.resolvedType = cache.boolType }
        case .DOUBLE { node.resolvedType = cache.doubleType }
        case .INT { node.resolvedType = cache.intType }
        case .STRING { node.resolvedType = cache.stringType }
        default { assert false }
      }
    }

    Symbol findMember(Type type, string name, Range range, FailureMode mode) {
      if (type.kind() == .SYMBOL) {
        var symbol = type.asSymbolType().symbol
        if (symbol.kind.isType()) {
          var member = symbol.asType().members.getOrDefault(name, null)
          if (member != null) {
            initializeSymbol(member)
            return member
          }
        }
      }
      if (mode == .ERROR_FAILURE && type != .DYNAMIC) {
        log.semanticErrorUnknownMemberSymbol(range, name, type)
      }
      return null
    }

    void resolveDot(Node node, Scope scope) {
      var target = node.dotTarget()
      var name = node.asString()
      resolveNode(target, scope, null)

      // Search for a setter first, then search for a normal member
      Symbol symbol = null
      if (shouldCheckForSetter(node)) {
        symbol = findMember(target.resolvedType, name + "=", node.internalRange, .SILENT_FAILURE)
      }
      if (symbol == null) {
        symbol = findMember(target.resolvedType, name, node.internalRange, .ERROR_FAILURE)
        if (symbol == null) {
          return
        }
      }

      var isType = target.isType()
      var needsType = !symbol.kind.isOnInstances()

      // Make sure the global/instance context matches the intended usage
      if (isType && !needsType) {
        log.semanticErrorMemberUnexpectedInstance(node.internalRange, symbol.name)
      } else if (!isType && needsType) {
        log.semanticErrorMemberUnexpectedGlobal(node.internalRange, symbol.name)
      }

      node.symbol = symbol
      node.resolvedType = symbol.resolvedType
      automaticallyCallGetter(node, scope)
    }

    void resolveHook(Node node, Scope scope) {
      resolveAsParameterizedExpressionWithConversion(node.hookTest(), scope, cache.boolType)
      resolveAsParameterizedExpression(node.hookTrue(), scope) // TODO: resolveAsParameterizedExpressionWithConversion()
      resolveAsParameterizedExpression(node.hookFalse(), scope) // TODO: resolveAsParameterizedExpressionWithConversion()
    }

    void resolveLambda(Node node, Scope scope, Type context) {
      var symbol = node.symbol.asFunction()
      symbol.scope = FunctionScope(scope, symbol)

      // Use type context to implicitly set missing types
      if (context != null && context.kind() == .LAMBDA) {
        var lambda = context.asLambdaType()
        var count = lambda.argumentTypes.size()

        // Copy over the argument types if they line up
        if (symbol.arguments.size() == count) {
          for (var i = 0; i < count; i++) {
            var argument = symbol.arguments[i]
            if (argument.type == null) {
              argument.type = Node.createType(lambda.argumentTypes[i])
            }
          }
        }

        // Copy over the return type
        if (symbol.returnType == null && lambda.returnType != null) {
          symbol.returnType = Node.createType(lambda.returnType)
        }
      }

      resolveFunction(symbol)
    }

    void resolveLambdaType(Node node, Scope scope) {
      var children = node.children
      List<Type> types = []

      for (var i = 0; i < children.size(); i++) {
        var child = children[i]
        if (child != null) {
          resolveAsParameterizedType(child, scope)
          types.push(child.resolvedType)
        } else {
          types.push(null)
        }
      }

      var returnType = types.pop()
      node.resolvedType = LambdaType(types, returnType)
    }

    void resolveName(Node node, Scope scope) {
      var name = node.asString()
      Symbol symbol = null

      // Search for a setter first, then search for a normal symbol
      if (shouldCheckForSetter(node)) {
        symbol = scope.find(name + "=")
      }
      if (symbol == null) {
        symbol = scope.find(name)
        if (symbol == null) {
          log.semanticErrorUndeclaredSymbol(node.range, name)
          return
        }
      }
      initializeSymbol(symbol)

      node.symbol = symbol
      node.resolvedType = symbol.resolvedType
      automaticallyCallGetter(node, scope)
    }

    void resolveParameterize(Node node, Scope scope) {
      var value = node.parameterizeValue()
      resolveNode(value, scope, null)

      // Resolve parameter types
      for (var i = 1; i < node.children.size(); i++) {
        resolveAsParameterizedType(node.children[i], scope)
      }

      node.resolvedType = value.resolvedType // TODO: Parameterize this type
    }

    void resolveUnary(Node node, Scope scope) {
      resolveAsParameterizedExpression(node.unaryValue(), scope)
      resolveOperatorOverload(node, scope)
    }

    void resolveBinary(Node node, Scope scope) {
      var left = node.binaryLeft()
      var right = node.binaryRight()

      resolveAsParameterizedExpression(left, scope)
      resolveAsParameterizedExpression(right, scope)

      if (node.kind == .ASSIGN) {
        if (left.symbol != null && left.symbol.isSetter()) {
          node.become(Node.createCall(left.replaceWithNull(), [right.replaceWithNull()]).withRange(node.range).withInternalRange(right.range))
          resolveAsParameterizedExpression(node, scope)
        }
      }

      else {
        resolveOperatorOverload(node, scope)
      }
    }

    void resolveIndex(Node node, Scope scope) {
      for (var i = 0; i < node.children.size(); i++) {
        resolveAsParameterizedExpression(node.children[i], scope)
      }

      resolveOperatorOverload(node, scope)
    }

    void resolveOperatorOverload(Node node, Scope scope) {
      // The order of operands are reversed for the "in" operator
      var reverseBinaryOrder = node.kind == .IN
      var target = node.children[reverseBinaryOrder ? 1 : 0]
      var type = target.resolvedType
      if (type == .DYNAMIC) {
        return
      }

      // Check if the operator can be overridden at all
      var info = operatorInfo[node.kind]
      if (info.kind != .OVERRIDABLE) {
        log.semanticErrorUnknownMemberSymbol(node.internalRange, info.text, type)
        return
      }

      // Find the operator method
      var symbol = findMember(type, info.text, node.internalRange, .ERROR_FAILURE)
      if (symbol == null) {
        return
      }

      // Resolve the method call
      var value = node.replaceChild(0, Node.createDot(target.replaceWithNull(), info.text).withRange(node.internalRange).withInternalRange(node.internalRange))
      if (reverseBinaryOrder) {
        node.replaceChild(1, value)
      }
      node.kind = .CALL
      node.resolvedType = null
      resolveAsParameterizedExpression(node, scope)
    }

    Node defaultValueForType(Type type) {
      return
        type == cache.boolType ? Node.createBool(false) :
        type == cache.doubleType ? Node.createDouble(0.0) :
        type == cache.intType ? Node.createInt(0) :
        type == cache.stringType ? Node.createString("") :
        Node.createNull()
    }

    void automaticallyCallGetter(Node node, Scope scope) {
      var symbol = node.symbol
      if (symbol == null) {
        return
      }
      var isGetter = symbol.isGetter()

      // The check for getters is complicated by overloaded functions
      if (!isGetter && symbol.kind.isOverloadedFunction() && (node.parent.kind != .CALL || node != node.parent.callValue() || node.parent.children.size() == 1)) {
        var overloaded = symbol.asOverloadedFunction()
        for (var i = 0; i < overloaded.symbols.size(); i++) {
          var getter = overloaded.symbols[i]

          // Just return the first getter assuming errors for duplicate getters
          // were already logged when the overloaded symbol was initialized
          if (getter.isGetter()) {
            node.resolvedType = getter.resolvedType
            node.symbol = getter
            isGetter = true
            break
          }
        }
      }

      // Automatically wrap the getter in a call expression
      if (isGetter) {
        var value = Node.createNull()
        value.become(node)
        node.become(Node.createCall(value, []).withRange(node.range))
        resolveAsParameterizedExpression(node, scope)
      }
    }

    static bool shouldCheckForSetter(Node node) {
      return node.parent != null && node.parent.kind == .ASSIGN && node == node.parent.binaryLeft()
    }

    static Type findReturnType(Scope scope) {
      var returnType = scope.findEnclosingFunction().symbol.returnType
      return returnType != null ? returnType.resolvedType : null
    }
  }
}
