namespace astral {
  using astral.resolving

  void resolvingPass(Log log, TypeSymbol global) {
    var cache = TypeCache()
    cache.loadGlobals(log, global)
    if (!log.hasErrors()) {
      Resolver(cache, log).resolveType(global)
    }
  }
}

namespace astral.resolving {
  enum ConversionKind {
    IMPLICIT
    EXPLICIT
  }

  class Resolver {
    TypeCache cache
    Log log

    void initializeSymbol(Symbol symbol) {
      // The scope should have been set by the merging pass (or by this pass for local variables)
      assert symbol.scope != null

      // Only initialize the symbol once
      if (symbol.state == .UNINITIALIZED) {
        symbol.state = .INITIALIZING

        switch (symbol.kind) {
          case .TYPE_CLASS, .TYPE_GLOBAL, .TYPE_INTERFACE, .TYPE_NAMESPACE {
            initializeType(symbol.asType())
          }

          case .FUNCTION_CONSTRUCTOR, .FUNCTION_GLOBAL, .FUNCTION_INSTANCE, .FUNCTION_LOCAL {
            initializeFunction(symbol.asFunction())
          }

          case .VARIABLE_GLOBAL, .VARIABLE_INSTANCE, .VARIABLE_LOCAL {
            initializeVariable(symbol.asVariable())
          }

          case .PARAMETER {
            initializeParameter(symbol.asParameter())
          }

          case .OVERLOADED_CONSTRUCTOR, .OVERLOADED_GLOBAL, .OVERLOADED_INSTANCE {
            initializeOverloadedFunction(symbol.asOverloadedFunction())
          }

          default {
            assert false
          }
        }

        assert symbol.resolvedType != null
        symbol.state = .INITIALIZED
      }

      // Detect cyclic symbol references such as "foo foo;"
      else if (symbol.state == .INITIALIZING) {
        log.semanticErrorCyclicDeclaration(symbol.range, symbol.name)
        symbol.resolvedType = .DYNAMIC
      }
    }

    void resolveParameters(List<ParameterSymbol> parameters) {
      if (parameters != null) {
        for (var i = 0; i < parameters.size(); i++) {
          resolveParameter(parameters[i])
        }
      }
    }

    void initializeParameter(ParameterSymbol symbol) {
      if (symbol.resolvedType == null) {
        symbol.resolvedType = SymbolType(symbol)
      }
    }

    void resolveParameter(ParameterSymbol symbol) {
      initializeSymbol(symbol)
    }

    void initializeType(TypeSymbol symbol) {
      if (symbol.resolvedType == null) {
        symbol.resolvedType = SymbolType(symbol)
      }

      if (symbol.base != null) {
        resolveAsParameterizedType(symbol.base, symbol.scope)
      }
    }

    void resolveType(TypeSymbol symbol) {
      initializeSymbol(symbol)
      resolveParameters(symbol.parameters)

      for (var i = 0; i < symbol.types.size(); i++) {
        resolveType(symbol.types[i])
      }

      for (var i = 0; i < symbol.functions.size(); i++) {
        resolveFunction(symbol.functions[i])
      }

      for (var i = 0; i < symbol.variables.size(); i++) {
        resolveVariable(symbol.variables[i])
      }
    }

    void initializeFunction(FunctionSymbol symbol) {
      if (symbol.resolvedType == null) {
        symbol.resolvedType = SymbolType(symbol)
      }

      resolveParameters(symbol.parameters)

      for (var i = 0; i < symbol.arguments.size(); i++) {
        var argument = symbol.arguments[i]
        argument.scope = symbol.scope
        resolveVariable(argument)
      }

      if (symbol.returnType != null) {
        if (symbol.kind == .FUNCTION_CONSTRUCTOR) {
          log.semanticErrorConstructorReturnType(symbol.returnType.range)
          symbol.returnType = null
        }

        else {
          resolveAsParameterizedType(symbol.returnType, symbol.scope)
        }
      }
    }

    void resolveFunction(FunctionSymbol symbol) {
      initializeSymbol(symbol)

      var scope = LocalScope(symbol.scope)

      if (symbol.kind == .FUNCTION_INSTANCE || symbol.kind == .FUNCTION_CONSTRUCTOR) {
        symbol.self = VariableSymbol(.VARIABLE_LOCAL, "self")
        symbol.self.resolvedType = symbol.parent.resolvedType
        symbol.self.state = .INITIALIZED
        scope.define(symbol.self, log)
      }

      // Default values for argument variables aren't resolved with this local
      // scope since they are evaluated at the call site, not inside the
      // function body, and shouldn't have access to other arguments
      for (var i = 0; i < symbol.arguments.size(); i++) {
        scope.define(symbol.arguments[i], log)
      }

      if (symbol.block != null) {
        resolveNode(symbol.block, scope)
      }
    }

    void initializeVariable(VariableSymbol symbol) {
      if (symbol.type != null) {
        resolveAsParameterizedType(symbol.type, symbol.scope)
        symbol.resolvedType = symbol.type.resolvedType
      }

      // Implicitly-typed variables take their type from their initializer
      else if (symbol.value != null) {
        resolveAsParameterizedExpression(symbol.value, symbol.scope)
        symbol.resolvedType = symbol.value.resolvedType

        // Forbid the null type since it's definitely a mistake
        if (symbol.resolvedType == .NULL) {
          log.semanticErrorBadVariableType(symbol.range, symbol.resolvedType)
          symbol.resolvedType = .DYNAMIC
        }
      }

      else {
        log.semanticErrorVarMissingValue(symbol.range)
        symbol.resolvedType = .DYNAMIC
      }
    }

    void resolveVariable(VariableSymbol symbol) {
      initializeSymbol(symbol)

      if (symbol.value != null) {
        resolveAsParameterizedExpressionWithConversion(symbol.value, symbol.scope, symbol.resolvedType)
      }

      // Default-initialize varliables that aren't explicitly initialized
      else if (symbol.kind != .VARIABLE_LOCAL) {
        symbol.value = defaultValueForType(symbol.resolvedType)
      }
    }

    void initializeOverloadedFunction(OverloadedFunctionSymbol symbol) {
      var symbols = symbol.symbols

      if (symbol.resolvedType == null) {
        symbol.resolvedType = SymbolType(symbol)
      }

      for (var i = 0; i < symbols.size(); i++) {
        initializeSymbol(symbols[i])
      }
    }

    void resolveNode(Node node, Scope scope) {
      if (node.resolvedType != null) {
        return // Only resolve once
      }

      node.resolvedType = .DYNAMIC
      switch (node.kind) {
        case .BLOCK { resolveBlock(node, scope) }

        // Statements
        case .BREAK {}
        case .CONTINUE {}
        case .EXPRESSION { resolveExpression(node, scope) }
        case .IF { resolveIf(node, scope) }
        case .RETURN { resolveReturn(node, scope) }
        case .VAR { resolveVar(node, scope) }
        case .WHILE { resolveWhile(node, scope) }

        // Expressions
        case .ASSIGN_INDEX { resolveIndex(node, scope) }
        case .CALL { resolveCall(node, scope) }
        case .CAST { resolveCast(node, scope) }
        case .CONSTANT { resolveConstant(node, scope) }
        case .DOT { resolveDot(node, scope) }
        case .DYNAMIC {}
        case .HOOK { resolveHook(node, scope) }
        case .INDEX { resolveIndex(node, scope) }
        case .LAMBDA { resolveLambda(node, scope) }
        case .LAMBDA_TYPE { resolveLambdaType(node, scope) }
        case .NAME { resolveName(node, scope) }
        case .NULL { node.resolvedType = .NULL }
        case .PARAMETERIZE { resolveParameterize(node, scope) }

        default {
          if (node.kind.isUnary()) { resolveUnary(node, scope) }
          else if (node.kind.isBinary()) { resolveBinary(node, scope) }
          else { assert false }
        }
      }

      assert node.resolvedType != null
    }

    void resolveAsParameterizedType(Node node, Scope scope) {
      assert node.kind.isExpression()
      resolveNode(node, scope)
      checkIsType(node)
      checkIsParameterized(node)
    }

    void resolveAsParameterizedExpression(Node node, Scope scope) {
      assert node.kind.isExpression()
      resolveNode(node, scope)
      checkIsInstance(node)
      checkIsParameterized(node)
    }

    void resolveAsParameterizedExpressionWithConversion(Node node, Scope scope, Type type) {
      resolveAsParameterizedExpression(node, scope)
      checkConversion(node, type, .IMPLICIT)
    }

    void checkIsInstance(Node node) {
      if (node.isType()) {
        log.semanticErrorUnexpectedType(node.range, node.resolvedType)
        node.resolvedType = .DYNAMIC
      }
    }

    void checkIsType(Node node) {
      if (node.resolvedType != .DYNAMIC && !node.isType()) {
        log.semanticErrorUnexpectedExpression(node.range, node.resolvedType)
        node.resolvedType = .DYNAMIC
      }
    }

    void checkIsParameterized(Node node) {
      // TODO
    }

    void checkConversion(Node node, Type to, ConversionKind kind) {
      var from = node.resolvedType
      assert from != null
      assert to != null

      // The "dynamic" type is a hole in the type system
      if (from == .DYNAMIC || to == .DYNAMIC) {
        return
      }

      // No conversion is needed for identical types
      if (from == to) {
        return
      }

      // The implicit conversion must be valid
      if (kind == .IMPLICIT && !cache.canImplicitlyConvert(from, to) ||
          kind == .EXPLICIT && !cache.canExplicitlyConvert(from, to)) {
        log.semanticErrorIncompatibleTypes(node.range, from, to, cache.canExplicitlyConvert(from, to))
        node.resolvedType = .DYNAMIC
        return
      }

      // Make the implicit conversion explicit for convenience later on
      if (kind == .IMPLICIT) {
        var value = Node(.NULL)
        value.become(node)
        node.become(Node.createCast(value, Node.createType(to)).withType(to).withRange(node.range))
      }
    }

    void resolveBlock(Node node, Scope scope) {
      assert node.kind == .BLOCK

      if (node.parent != null) {
        scope = LocalScope(scope)
      }

      for (var i = 0; i < node.children.size(); i++) {
        resolveNode(node.children[i], scope)
      }
    }

    void resolveExpression(Node node, Scope scope) {
      resolveAsParameterizedExpression(node.expressionValue(), scope)
    }

    void resolveIf(Node node, Scope scope) {
      var ifFalse = node.ifFalse()
      resolveAsParameterizedExpressionWithConversion(node.ifTest(), scope, cache.boolType)
      resolveBlock(node.ifTrue(), scope)
      if (ifFalse != null) {
        resolveBlock(ifFalse, scope)
      }
    }

    void resolveReturn(Node node, Scope scope) {
      var value = node.returnValue()
      if (value != null) {
        resolveAsParameterizedExpression(value, scope) // TODO: resolveAsParameterizedExpressionWithConversion()
      }
    }

    void resolveVar(Node node, Scope scope) {
      var symbol = node.symbol.asVariable()
      scope.asLocal().define(symbol, log)
      resolveVariable(symbol)
    }

    void resolveWhile(Node node, Scope scope) {
      resolveAsParameterizedExpressionWithConversion(node.whileTest(), scope, cache.boolType)
      resolveBlock(node.whileBlock(), scope)
    }

    void resolveCall(Node node, Scope scope) {
      var value = node.callValue()
      resolveAsParameterizedExpression(value, scope)
      var type = value.resolvedType

      if (type.kind() == .SYMBOL) {
        var symbol = type.asSymbolType().symbol

        // Check for calling a function directly
        if (symbol.kind.isFunction()) {
          var function = symbol.asFunction()
          var expected = function.arguments.size()
          var count = node.children.size() - 1

          // Check argument count
          if (expected != count) {
            log.semanticErrorArgumentCount(node.internalRange, expected, count)
          }

          // Use the return type even if there were errors
          if (function.returnType != null) {
            node.resolvedType = function.returnType.resolvedType
          }

          // Constructors have an implicit return type
          else if (function.kind == .FUNCTION_CONSTRUCTOR) {
            node.resolvedType = function.parent.resolvedType
          }

          // There is no "void" type, so make sure this return value isn't used
          // (the parent will be null for variable initializers)
          else if (node.parent == null || node.parent.kind != .EXPRESSION) {
            log.semanticErrorUseOfVoid(node.range, function.name)
          }
        }

        // Check for calling a set of functions, must not be ambiguous
        else if (symbol.kind.isOverloadedFunction()) {
          var overloaded = symbol.asOverloadedFunction()
          var count = node.children.size() - 1
          List<FunctionSymbol> candidates = []

          // Filter by argument length
          for (var i = 0; i < overloaded.symbols.size(); i++) {
            var overload = overloaded.symbols[i]
            if (overload.arguments.size() == count) {
              candidates.push(overload)
            }
          }

          // Check for matches
          if (candidates.size() < 1) {
            log.semanticErrorNoMatchingOverload(value.range, symbol.name, count)
          }

          // Check for ambiguity
          else if (candidates.size() > 1) {
            log.semanticErrorAmbiguousOperator(value.range, symbol.name, count)
          }

          // Target is unambiguous
          else {
            var overload = candidates[0]
            var expected = overload.arguments.size()

            // Check argument count
            if (expected != count) {
              log.semanticErrorArgumentCount(node.internalRange, expected, count)
            }
          }
        }

        // Can't call other symbols
        else {
          log.semanticErrorInvalidCall(value.range, value.resolvedType)
        }
      }

      // Can't call other types (the null type, for example)
      else if (type != .DYNAMIC) {
        log.semanticErrorInvalidCall(value.range, value.resolvedType)
      }

      for (var i = 1; i < node.children.size(); i++) {
        resolveAsParameterizedExpression(node.children[i], scope) // TODO: resolveAsParameterizedExpressionWithConversion()
      }
    }

    void resolveCast(Node node, Scope scope) {
      var value = node.castValue()
      var type = node.castType()
      resolveAsParameterizedExpression(value, scope) // TODO: Provide type context
      resolveAsParameterizedType(type, scope)
      checkConversion(value, type.resolvedType, .EXPLICIT)
      node.resolvedType = type.resolvedType
    }

    void resolveConstant(Node node, Scope scope) {
      switch (node.content.kind()) {
        case .BOOL { node.resolvedType = cache.boolType }
        case .DOUBLE { node.resolvedType = cache.doubleType }
        case .INT { node.resolvedType = cache.intType }
        case .STRING { node.resolvedType = cache.stringType }
        default { assert false }
      }
    }

    Symbol findMember(Type type, string name, Range range) {
      if (type.kind() == .SYMBOL) {
        var symbol = type.asSymbolType().symbol
        if (symbol.kind.isType()) {
          var member = symbol.asType().members.getOrDefault(name, null)
          if (member != null) {
            initializeSymbol(member)
            return member
          }
        }
      }

      if (type != .DYNAMIC) {
        log.semanticErrorUnknownMemberSymbol(range, name, type)
      }

      return null
    }

    void resolveDot(Node node, Scope scope) {
      var target = node.dotTarget()
      var name = node.asString()
      resolveNode(target, scope)

      var member = findMember(target.resolvedType, name, node.internalRange)
      if (member == null) {
        return
      }

      var isType = target.isType()
      var needsType = !member.kind.isOnInstances()

      // Make sure the global/instance context matches the intended usage
      if (isType && !needsType) {
        log.semanticErrorMemberUnexpectedInstance(node.internalRange, member.name)
      } else if (!isType && needsType) {
        log.semanticErrorMemberUnexpectedGlobal(node.internalRange, member.name)
      }

      node.resolvedType = member.resolvedType
    }

    void resolveHook(Node node, Scope scope) {
      resolveAsParameterizedExpressionWithConversion(node.hookTest(), scope, cache.boolType)
      resolveAsParameterizedExpression(node.hookTrue(), scope) // TODO: resolveAsParameterizedExpressionWithConversion()
      resolveAsParameterizedExpression(node.hookFalse(), scope) // TODO: resolveAsParameterizedExpressionWithConversion()
    }

    void resolveLambda(Node node, Scope scope) {
      var symbol = node.symbol.asFunction()
      symbol.scope = scope
      resolveFunction(symbol)
    }

    void resolveLambdaType(Node node, Scope scope) {
      var children = node.children
      List<Type> types = []

      for (var i = 0; i < children.size(); i++) {
        var child = children[i]
        if (child != null) {
          resolveAsParameterizedType(child, scope)
          types.push(child.resolvedType)
        } else {
          types.push(null)
        }
      }

      var returnType = types.pop()
      node.resolvedType = LambdaType(types, returnType)
    }

    void resolveName(Node node, Scope scope) {
      var name = node.asString()
      var symbol = scope.find(name)

      if (symbol == null) {
        log.semanticErrorUndeclaredSymbol(node.range, name)
        return
      }

      initializeSymbol(symbol)
      node.symbol = symbol
      node.resolvedType = symbol.resolvedType
    }

    void resolveParameterize(Node node, Scope scope) {
      for (var i = 0; i < node.children.size(); i++) {
        resolveNode(node.children[i], scope) // TODO: resolveAsParameterizedType() for parameters
      }
    }

    void resolveUnary(Node node, Scope scope) {
      resolveAsParameterizedExpression(node.unaryValue(), scope)
      resolveOperatorOverload(node, scope)
    }

    void resolveBinary(Node node, Scope scope) {
      var left = node.binaryLeft()
      var right = node.binaryRight()

      resolveAsParameterizedExpression(left, scope)
      resolveAsParameterizedExpression(right, scope)

      if (node.kind != .ASSIGN) {
        resolveOperatorOverload(node, scope)
      }
    }

    void resolveIndex(Node node, Scope scope) {
      for (var i = 0; i < node.children.size(); i++) {
        resolveAsParameterizedExpression(node.children[i], scope)
      }

      resolveOperatorOverload(node, scope)
    }

    void resolveOperatorOverload(Node node, Scope scope) {
      var target = node.children[0]
      var type = target.resolvedType
      if (type == .DYNAMIC) {
        return
      }

      // Check if the operator can be overridden at all
      var info = operatorInfo[node.kind]
      if (info.kind != .OVERRIDABLE) {
        log.semanticErrorUnknownMemberSymbol(node.internalRange, info.text, type)
        return
      }

      // Find the operator method
      var symbol = findMember(type, info.text, node.internalRange)
      if (symbol == null) {
        return
      }

      // Resolve the method call
      node.kind = .CALL
      node.replaceChild(0, Node.createDot(target.replaceWithNull(), info.text).withRange(node.internalRange).withInternalRange(node.internalRange))
      node.resolvedType = null
      resolveAsParameterizedExpression(node, scope)
    }

    Node defaultValueForType(Type type) {
      return
        type == cache.boolType ? Node.createBool(false) :
        type == cache.doubleType ? Node.createDouble(0.0) :
        type == cache.intType ? Node.createInt(0) :
        type == cache.stringType ? Node.createString("") :
        Node.createNull()
    }
  }
}
