namespace skew {
  def globalizingPass(global ObjectSymbol, graph CallGraph) {
    for info in graph.callInfo {
      var symbol = info.symbol

      # Turn certain instance functions into global functions
      if symbol.kind == .FUNCTION_INSTANCE && (symbol.parent.kind == .OBJECT_ENUM || symbol.parent.isImported && !symbol.isImported) {
        var function = symbol.asFunctionSymbol
        function.kind = .FUNCTION_GLOBAL
        function.arguments.prepend(function.self)
        function.self = null

        # Update all call sites
        for i in 0..info.callSites.count {
          var callSite = info.callSites[i]
          var value = callSite.callValue

          # Rewrite "super(foo)" to "bar(self, foo)"
          if value.kind == .SUPER {
            var self = info.callContexts[i]
            value.replaceWith(Node.createName(self.name).withSymbol(self))
          }

          # Rewrite "self.foo(bar)" to "foo(self, bar)"
          else {
            value.dotTarget.swapWith(value)
          }

          callSite.insertChild(0, Node.createName(function.name).withSymbol(function))
        }
      }
    }
  }
}
