namespace Skew {
  enum PassKind {
    GLOBALIZING
  }

  class GlobalizingPass : Pass {
    over kind PassKind {
      return .GLOBALIZING
    }

    over run(context PassContext) {
      var virtualLookup = context.options.globalizeAllFunctions ? VirtualLookup.new(context.global) : null

      for info in context.callGraph.callInfo {
        var symbol = info.symbol

        # Turn certain instance functions into global functions
        if symbol.kind == .FUNCTION_INSTANCE && (
            symbol.parent.kind == .OBJECT_ENUM ||
            symbol.parent.kind == .OBJECT_WRAPPED ||
            symbol.parent.isImported && !symbol.isImported ||
            !symbol.isImportedOrExported && virtualLookup != null && !virtualLookup.isVirtual(symbol)) {

          var function = symbol.asFunctionSymbol
          function.kind = .FUNCTION_GLOBAL
          function.arguments.prepend(function.this)
          function.this = null

          # Update all call sites
          for callSite in info.callSites {
            var value = callSite.callNode.callValue

            # Rewrite "super(foo)" to "bar(self, foo)"
            if value.kind == .SUPER {
              var this = callSite.enclosingSymbol.asFunctionSymbol.this
              value.replaceWith(Node.createSymbolReference(this))
            }

            # Rewrite "self.foo(bar)" to "foo(self, bar)"
            else {
              value.replaceWith(value.dotTarget.remove)
            }

            callSite.callNode.prependChild(Node.createSymbolReference(function))
          }
        }
      }
    }
  }

  class VirtualLookup {
    const _map IntMap<bool> = {}

    def new(global ObjectSymbol) {
      _visitObject(global)
    }

    def isVirtual(symbol FunctionSymbol) bool {
      return _map.get(symbol.id, false)
    }

    def _visitObject(symbol ObjectSymbol) {
      for object in symbol.objects {
        _visitObject(object)
      }

      for function in symbol.functions {
        _visitFunction(function)
      }
    }

    def _visitFunction(symbol FunctionSymbol) {
      if symbol.overridden != null {
        _map[symbol.overridden.id] = true
        _map[symbol.id] = true
      }
    }
  }
}
