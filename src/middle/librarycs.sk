namespace Skew {
  const NATIVE_LIBRARY_CS = "
@using(\"System.Diagnostics\")
def assert(truth bool) {
  dynamic.Debug.Assert(truth)
}

@using(\"System\")
namespace Math {
}

class double {
  def isFinite bool {
    return !isNaN && !dynamic.double.IsInfinity(self)
  }

  def isNaN bool {
    return dynamic.double.IsNaN(self)
  }
}

@using(\"System.Text\")
class StringBuilder {
}

class bool {
  def toString string {
    return self ? \"true\" : \"false\"
  }
}

class string {
  def count int {
    return (self as dynamic).Length
  }

  def get(index int) string {
    return fromCodeUnit(self[index])
  }

  def repeat(times int) string {
    var result = \"\"
    for i in 0..times {
      result += self
    }
    return result
  }

  @using(\"System.Linq\")
  @using(\"System\")
  def split(separator string) List<string> {
    var separators = [separator]
    return dynamic.Enumerable.ToList((self as dynamic).Split(dynamic.Enumerable.ToArray(separators as dynamic), dynamic.StringSplitOptions.RemoveEmptyEntries))
  }

  def join(parts List<string>) string {
    return dynamic.string.Join(self, parts)
  }

  def slice(start int, end int) string {
    return (self as dynamic).Substring(start, end - start)
  }
}

namespace string {
  def fromCodeUnit(codeUnit int) string {
    return dynamic.string.new(codeUnit as dynamic.char, 1)
  }
}

@using(\"System.Collections.Generic\")
class List {
  def isEmpty bool {
    return count == 0
  }

  def count int {
    return (self as dynamic).Count
  }

  def prepend(value T) {
    insert(0, value)
  }

  def prepend(values List<T>) {
    var count = values.count
    for i in 0..count {
      prepend(values[count - i - 1])
    }
  }

  def removeFirst {
    removeAt(0)
  }

  def removeLast {
    removeAt(count - 1)
  }

  def takeFirst T {
    var value = first
    removeFirst
    return value
  }

  def takeLast T {
    var value = last
    removeLast
    return value
  }

  def slice(start int) List<T> {
    return slice(start, count)
  }

  def slice(start int, end int) List<T> {
    return (self as dynamic).GetRange(start, end - start)
  }

  def swap(i int, j int) {
    var temp = self[i]
    self[i] = self[j]
    self[j] = temp
  }

  def clone List<T> {
    var clone = new
    clone.append(self)
    return clone
  }
}

@using(\"System.Collections.Generic\")
@rename(\"Dictionary\")
class StringMap {
  def {...}(key string, value T) StringMap<T> {
    (self as dynamic).Add(key, value)
    return self
  }

  def get(key string, value T) T {
    return key in self ? self[key] : value
  }

  def keys List<string> {
    return dynamic.System.Linq.Enumerable.ToList((self as dynamic).Keys)
  }

  def values List<T> {
    return dynamic.System.Linq.Enumerable.ToList((self as dynamic).Values)
  }

  def clone StringMap<T> {
    var clone = new
    for key in keys {
      clone[key] = self[key]
    }
    return clone
  }
}

@using(\"System.Collections.Generic\")
@rename(\"Dictionary\")
class IntMap {
  def {...}(key int, value T) IntMap<T> {
    (self as dynamic).Add(key, value)
    return self
  }

  def get(key int, value T) T {
    return key in self ? self[key] : value
  }

  def keys List<int> {
    return dynamic.System.Linq.Enumerable.ToList((self as dynamic).Keys)
  }

  def values List<T> {
    return dynamic.System.Linq.Enumerable.ToList((self as dynamic).Values)
  }

  def clone IntMap<T> {
    var clone = new
    for key in keys {
      clone[key] = self[key]
    }
    return clone
  }
}
"
}
