class Foo {
  ivar x int
  ivar y int

  cdef new() {
    self.x = 0
    self.y = 1
  }

  def foo() {
  }
}

var fn fn() = null

def fib(n int) int {
  return n < 2 ? 1 : fib(n - 1) + fib(n - 2)
}

def test() {
  return => 100
  return () => 100
  return (x) => 100
  return (x int) => 100
  return (x int) => { return 100 }
  return (x, y) => 100
  return (x, y) int => 100
  return n < 2 ? 1 : fib(n - 1) + fib(n - 2)
}

namespace ns {
  var t = !200 as fn() int
  var t = !(200 as fn() int)
  var t = (!200) as fn() int
  var t = 1 == 2 as fn() int
  var t = 1 == (2 as fn() int)
  var t = (1 == 2) as fn() int
}

var x = x => 100
var x = (x) => 100
var y = (x int, y int) int => x + y
var z fn(int, int) = (x, y) => x + y
var fib2 = (n int) => n < 2 ? 1 : fib(n - 1) + fib(n - 2)

def create_adder(n int) fn(int) int {
  return x => x + n
}

def fetch(url string, callback fn()) {
  req = XMLHttpRequest()
  req.open("GET", url)
  req.onload = callback
  req.send(null)
}
